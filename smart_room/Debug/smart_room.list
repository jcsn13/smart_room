
smart_room.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006310  08006310  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006310  08006310  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006310  08006310  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006310  08006310  00016310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000105c  20000074  0800638c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010d0  0800638c  000210d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa63  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c1  00000000  00000000  0003ab07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0003e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a838  00000000  00000000  00040d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e13  00000000  00000000  0006b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102d79  00000000  00000000  0008236b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001850e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ddc  00000000  00000000  00185138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006210 	.word	0x08006210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006210 	.word	0x08006210

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	20000148 	.word	0x20000148

08000204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__NVIC_GetPriorityGrouping+0x18>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	0a1b      	lsrs	r3, r3, #8
 800020e:	f003 0307 	and.w	r3, r3, #7
}
 8000212:	4618      	mov	r0, r3
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	2b00      	cmp	r3, #0
 8000230:	db0b      	blt.n	800024a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 021f 	and.w	r2, r3, #31
 8000238:	4907      	ldr	r1, [pc, #28]	; (8000258 <__NVIC_EnableIRQ+0x38>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	2001      	movs	r0, #1
 8000242:	fa00 f202 	lsl.w	r2, r0, r2
 8000246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000e100 	.word	0xe000e100

0800025c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	6039      	str	r1, [r7, #0]
 8000266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	db0a      	blt.n	8000286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	490c      	ldr	r1, [pc, #48]	; (80002a8 <__NVIC_SetPriority+0x4c>)
 8000276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027a:	0112      	lsls	r2, r2, #4
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	440b      	add	r3, r1
 8000280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000284:	e00a      	b.n	800029c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4908      	ldr	r1, [pc, #32]	; (80002ac <__NVIC_SetPriority+0x50>)
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 030f 	and.w	r3, r3, #15
 8000292:	3b04      	subs	r3, #4
 8000294:	0112      	lsls	r2, r2, #4
 8000296:	b2d2      	uxtb	r2, r2
 8000298:	440b      	add	r3, r1
 800029a:	761a      	strb	r2, [r3, #24]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f003 0307 	and.w	r3, r3, #7
 80002c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	f1c3 0307 	rsb	r3, r3, #7
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	bf28      	it	cs
 80002ce:	2304      	movcs	r3, #4
 80002d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	3304      	adds	r3, #4
 80002d6:	2b06      	cmp	r3, #6
 80002d8:	d902      	bls.n	80002e0 <NVIC_EncodePriority+0x30>
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	3b03      	subs	r3, #3
 80002de:	e000      	b.n	80002e2 <NVIC_EncodePriority+0x32>
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	fa02 f303 	lsl.w	r3, r2, r3
 80002ee:	43da      	mvns	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	401a      	ands	r2, r3
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	43d9      	mvns	r1, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000308:	4313      	orrs	r3, r2
         );
}
 800030a:	4618      	mov	r0, r3
 800030c:	3724      	adds	r7, #36	; 0x24
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0201 	orr.w	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000336:	b480      	push	{r7}
 8000338:	b083      	sub	sp, #12
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	f003 0320 	and.w	r3, r3, #32
 8000372:	2b20      	cmp	r3, #32
 8000374:	d101      	bne.n	800037a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000376:	2301      	movs	r3, #1
 8000378:	e000      	b.n	800037c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800037a:	2300      	movs	r3, #0
}
 800037c:	4618      	mov	r0, r3
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	69db      	ldr	r3, [r3, #28]
 8000394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000398:	2b80      	cmp	r3, #128	; 0x80
 800039a:	d101      	bne.n	80003a0 <LL_USART_IsActiveFlag_TXE+0x18>
 800039c:	2301      	movs	r3, #1
 800039e:	e000      	b.n	80003a2 <LL_USART_IsActiveFlag_TXE+0x1a>
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b083      	sub	sp, #12
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0220 	orr.w	r2, r3, #32
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800041a:	b29b      	uxth	r3, r3
 800041c:	b2db      	uxtb	r3, r3
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	460b      	mov	r3, r1
 8000434:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000436:	78fb      	ldrb	r3, [r7, #3]
 8000438:	b29a      	uxth	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
	...

0800044c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000458:	4907      	ldr	r1, [pc, #28]	; (8000478 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4013      	ands	r3, r2
 8000468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000488:	4907      	ldr	r1, [pc, #28]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000492:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4013      	ands	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004b8:	4907      	ldr	r1, [pc, #28]	; (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000

080004dc <sendchar>:
QueueHandle_t tx_queue_2;
QueueHandle_t rx_queue_2;
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

void sendchar(char c, char usart){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10b      	bne.n	800050a <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <sendchar+0x54>)
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	1df9      	adds	r1, r7, #7
 80004f8:	2300      	movs	r3, #0
 80004fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004fe:	f003 fe43 	bl	8004188 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <sendchar+0x58>)
 8000504:	f7ff ff63 	bl	80003ce <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 8000508:	e00d      	b.n	8000526 <sendchar+0x4a>
	else if( usart == USART_2){
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d10a      	bne.n	8000526 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <sendchar+0x5c>)
 8000512:	6818      	ldr	r0, [r3, #0]
 8000514:	1df9      	adds	r1, r7, #7
 8000516:	2300      	movs	r3, #0
 8000518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800051c:	f003 fe34 	bl	8004188 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <sendchar+0x60>)
 8000522:	f7ff ff54 	bl	80003ce <LL_USART_EnableIT_TXE>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20001070 	.word	0x20001070
 8000534:	40013800 	.word	0x40013800
 8000538:	20001068 	.word	0x20001068
 800053c:	40004400 	.word	0x40004400

08000540 <readchar>:
		sendchar(*str, usart);
		str++;
	}
}

char readchar(char usart){
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d109      	bne.n	8000568 <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <readchar+0x4c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f107 010f 	add.w	r1, r7, #15
 800055c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000560:	4618      	mov	r0, r3
 8000562:	f003 ffab 	bl	80044bc <xQueueReceive>
 8000566:	e00b      	b.n	8000580 <readchar+0x40>
	else if(usart == USART_2)
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d108      	bne.n	8000580 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <readchar+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f107 010f 	add.w	r1, r7, #15
 8000576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800057a:	4618      	mov	r0, r3
 800057c:	f003 ff9e 	bl	80044bc <xQueueReceive>
	return caracter;
 8000580:	7bfb      	ldrb	r3, [r7, #15]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20001064 	.word	0x20001064
 8000590:	2000106c 	.word	0x2000106c

08000594 <cli>:

void cli(void * vParam)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	while(1)
	{
		caracter = readchar(USART_2);
 800059c:	2002      	movs	r0, #2
 800059e:	f7ff ffcf 	bl	8000540 <readchar>
 80005a2:	4603      	mov	r3, r0
 80005a4:	73fb      	strb	r3, [r7, #15]
		switch(caracter){
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b4c      	cmp	r3, #76	; 0x4c
 80005aa:	d1f7      	bne.n	800059c <cli+0x8>
			case 'L':
				changeLedState();
 80005ac:	f000 f802 	bl	80005b4 <changeLedState>
				break;
 80005b0:	bf00      	nop
		caracter = readchar(USART_2);
 80005b2:	e7f3      	b.n	800059c <cli+0x8>

080005b4 <changeLedState>:
//				break;
		}
	}
}

void changeLedState(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0){
 80005b8:	2120      	movs	r1, #32
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 ff27 	bl	8001410 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d106      	bne.n	80005d6 <changeLedState+0x22>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2120      	movs	r1, #32
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f000 ff36 	bl	8001440 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	}
}
 80005d4:	e005      	b.n	80005e2 <changeLedState+0x2e>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f000 ff2f 	bl	8001440 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <usart_1_fcn>:
//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	}
//}

//IMPORTANTE: Esta taska deve ser removida no projeto final
void usart_1_fcn(void * vParam){
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	char c;
	while(1){
		c = readchar(USART_1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ffa6 	bl	8000540 <readchar>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
		if( c != 0){
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d004      	beq.n	8000608 <usart_1_fcn+0x22>
			sendchar(c, USART_2);
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff6a 	bl	80004dc <sendchar>
		}
		if(c == 'L'){
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	2b4c      	cmp	r3, #76	; 0x4c
 800060c:	d106      	bne.n	800061c <usart_1_fcn+0x36>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2120      	movs	r1, #32
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f000 ff13 	bl	8001440 <HAL_GPIO_WritePin>
 800061a:	e7e8      	b.n	80005ee <usart_1_fcn+0x8>
		} else if (c == 'D'){
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b44      	cmp	r3, #68	; 0x44
 8000620:	d1e5      	bne.n	80005ee <usart_1_fcn+0x8>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f000 ff09 	bl	8001440 <HAL_GPIO_WritePin>
		c = readchar(USART_1);
 800062e:	e7de      	b.n	80005ee <usart_1_fcn+0x8>

08000630 <USART_2_IRQHandler>:

	}
}
//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000636:	482a      	ldr	r0, [pc, #168]	; (80006e0 <USART_2_IRQHandler+0xb0>)
 8000638:	f7ff fea6 	bl	8000388 <LL_USART_IsActiveFlag_TXE>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d026      	beq.n	8000690 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000642:	e014      	b.n	800066e <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <USART_2_IRQHandler+0xb4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f107 020c 	add.w	r2, r7, #12
 800064c:	f107 010b 	add.w	r1, r7, #11
 8000650:	4618      	mov	r0, r3
 8000652:	f004 f813 	bl	800467c <xQueueReceiveFromISR>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 800065c:	4820      	ldr	r0, [pc, #128]	; (80006e0 <USART_2_IRQHandler+0xb0>)
 800065e:	f7ff fec6 	bl	80003ee <LL_USART_DisableIT_TXE>
 8000662:	e00a      	b.n	800067a <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8000664:	7afb      	ldrb	r3, [r7, #11]
 8000666:	4619      	mov	r1, r3
 8000668:	481d      	ldr	r0, [pc, #116]	; (80006e0 <USART_2_IRQHandler+0xb0>)
 800066a:	f7ff fede 	bl	800042a <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 800066e:	481c      	ldr	r0, [pc, #112]	; (80006e0 <USART_2_IRQHandler+0xb0>)
 8000670:	f7ff fe8a 	bl	8000388 <LL_USART_IsActiveFlag_TXE>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1e4      	bne.n	8000644 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d007      	beq.n	8000690 <USART_2_IRQHandler+0x60>
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <USART_2_IRQHandler+0xb8>)
 8000682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <USART_2_IRQHandler+0xb0>)
 8000692:	f7ff fe66 	bl	8000362 <LL_USART_IsActiveFlag_RXNE>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01d      	beq.n	80006d8 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800069c:	e00b      	b.n	80006b6 <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <USART_2_IRQHandler+0xb0>)
 80006a0:	f7ff feb5 	bl	800040e <LL_USART_ReceiveData8>
 80006a4:	4603      	mov	r3, r0
        	uint8_t byte =
 80006a6:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <USART_2_IRQHandler+0xbc>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	1d3a      	adds	r2, r7, #4
 80006ae:	1cf9      	adds	r1, r7, #3
 80006b0:	2300      	movs	r3, #0
 80006b2:	f003 fe67 	bl	8004384 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 80006b6:	480a      	ldr	r0, [pc, #40]	; (80006e0 <USART_2_IRQHandler+0xb0>)
 80006b8:	f7ff fe53 	bl	8000362 <LL_USART_IsActiveFlag_RXNE>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1ed      	bne.n	800069e <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d007      	beq.n	80006d8 <USART_2_IRQHandler+0xa8>
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <USART_2_IRQHandler+0xb8>)
 80006ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	f3bf 8f6f 	isb	sy
    }
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40004400 	.word	0x40004400
 80006e4:	20001068 	.word	0x20001068
 80006e8:	e000ed04 	.word	0xe000ed04
 80006ec:	2000106c 	.word	0x2000106c

080006f0 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 80006f6:	482a      	ldr	r0, [pc, #168]	; (80007a0 <USART_1_IRQHandler+0xb0>)
 80006f8:	f7ff fe46 	bl	8000388 <LL_USART_IsActiveFlag_TXE>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d026      	beq.n	8000750 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000702:	e014      	b.n	800072e <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <USART_1_IRQHandler+0xb4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	f107 010b 	add.w	r1, r7, #11
 8000710:	4618      	mov	r0, r3
 8000712:	f003 ffb3 	bl	800467c <xQueueReceiveFromISR>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 800071c:	4820      	ldr	r0, [pc, #128]	; (80007a0 <USART_1_IRQHandler+0xb0>)
 800071e:	f7ff fe66 	bl	80003ee <LL_USART_DisableIT_TXE>
 8000722:	e00a      	b.n	800073a <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 8000724:	7afb      	ldrb	r3, [r7, #11]
 8000726:	4619      	mov	r1, r3
 8000728:	481d      	ldr	r0, [pc, #116]	; (80007a0 <USART_1_IRQHandler+0xb0>)
 800072a:	f7ff fe7e 	bl	800042a <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 800072e:	481c      	ldr	r0, [pc, #112]	; (80007a0 <USART_1_IRQHandler+0xb0>)
 8000730:	f7ff fe2a 	bl	8000388 <LL_USART_IsActiveFlag_TXE>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1e4      	bne.n	8000704 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d007      	beq.n	8000750 <USART_1_IRQHandler+0x60>
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <USART_1_IRQHandler+0xb8>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	f3bf 8f4f 	dsb	sy
 800074c:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <USART_1_IRQHandler+0xb0>)
 8000752:	f7ff fe06 	bl	8000362 <LL_USART_IsActiveFlag_RXNE>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01d      	beq.n	8000798 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800075c:	e00b      	b.n	8000776 <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 800075e:	4810      	ldr	r0, [pc, #64]	; (80007a0 <USART_1_IRQHandler+0xb0>)
 8000760:	f7ff fe55 	bl	800040e <LL_USART_ReceiveData8>
 8000764:	4603      	mov	r3, r0
        	uint8_t byte =
 8000766:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <USART_1_IRQHandler+0xbc>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	1d3a      	adds	r2, r7, #4
 800076e:	1cf9      	adds	r1, r7, #3
 8000770:	2300      	movs	r3, #0
 8000772:	f003 fe07 	bl	8004384 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <USART_1_IRQHandler+0xb0>)
 8000778:	f7ff fdf3 	bl	8000362 <LL_USART_IsActiveFlag_RXNE>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1ed      	bne.n	800075e <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <USART_1_IRQHandler+0xa8>
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <USART_1_IRQHandler+0xb8>)
 800078a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	f3bf 8f6f 	isb	sy
    }
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013800 	.word	0x40013800
 80007a4:	20001070 	.word	0x20001070
 80007a8:	e000ed04 	.word	0xe000ed04
 80007ac:	20001064 	.word	0x20001064

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 fb5f 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f84b 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 f9cd 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007c2:	f000 f933 	bl	8000a2c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007c6:	f000 f897 	bl	80008f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 80007ca:	2001      	movs	r0, #1
 80007cc:	f003 fcc3 	bl	8004156 <xQueueCreateMutex>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <main+0x84>)
 80007d4:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 80007d6:	2001      	movs	r0, #1
 80007d8:	f003 fcbd 	bl	8004156 <xQueueCreateMutex>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <main+0x88>)
 80007e0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <main+0x8c>)
 80007e4:	1d3c      	adds	r4, r7, #4
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 fabc 	bl	8003d76 <osThreadCreate>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <main+0x90>)
 8000802:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 8000804:	2300      	movs	r3, #0
 8000806:	9301      	str	r3, [sp, #4]
 8000808:	2301      	movs	r3, #1
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2300      	movs	r3, #0
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <main+0x94>)
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <main+0x98>)
 8000814:	f004 f91f 	bl	8004a56 <xTaskCreate>
			  NULL,       /* parametro para a task */
			  1,          /* nivel de prioridade */
			  NULL);      /* ponteiro para o handle da task */

  //IMPORTANTE: Esta taska deve ser removida no projeto final
  xTaskCreate(usart_1_fcn,    /* Nome da funcao que contem a task */
 8000818:	2300      	movs	r3, #0
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	2301      	movs	r3, #1
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2300      	movs	r3, #0
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	4909      	ldr	r1, [pc, #36]	; (800084c <main+0x9c>)
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <main+0xa0>)
 8000828:	f004 f915 	bl	8004a56 <xTaskCreate>
			  1,          /* nivel de prioridade */
			  NULL);      /* ponteiro para o handle da task */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800082c:	f003 fa9c 	bl	8003d68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000830:	e7fe      	b.n	8000830 <main+0x80>
 8000832:	bf00      	nop
 8000834:	20000348 	.word	0x20000348
 8000838:	2000034c 	.word	0x2000034c
 800083c:	08006244 	.word	0x08006244
 8000840:	20001060 	.word	0x20001060
 8000844:	08006234 	.word	0x08006234
 8000848:	08000595 	.word	0x08000595
 800084c:	08006238 	.word	0x08006238
 8000850:	080005e7 	.word	0x080005e7

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	; 0x58
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2244      	movs	r2, #68	; 0x44
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fc06 	bl	8006074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087a:	f000 fe07 	bl	800148c <HAL_PWREx_ControlVoltageScaling>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000884:	f000 f9ec 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000890:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000892:	2310      	movs	r3, #16
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008a2:	230a      	movs	r3, #10
 80008a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fe3e 	bl	8001538 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008c2:	f000 f9cd 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2303      	movs	r3, #3
 80008cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fa10 	bl	8001d04 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ea:	f000 f9b9 	bl	8000c60 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	; 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0b0      	sub	sp, #192	; 0xc0
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80008fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2288      	movs	r2, #136	; 0x88
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f005 fba2 	bl	8006074 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000930:	2301      	movs	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000934:	2300      	movs	r3, #0
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fc04 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f98b 	bl	8000c60 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800094a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800094e:	f7ff fdad 	bl	80004ac <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fd7a 	bl	800044c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000958:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000960:	2302      	movs	r3, #2
 8000962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000978:	2307      	movs	r3, #7
 800097a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f002 fcb7 	bl	80032fa <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800098c:	f7ff fc3a 	bl	8000204 <__NVIC_GetPriorityGrouping>
 8000990:	4603      	mov	r3, r0
 8000992:	2200      	movs	r2, #0
 8000994:	2105      	movs	r1, #5
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc8a 	bl	80002b0 <NVIC_EncodePriority>
 800099c:	4603      	mov	r3, r0
 800099e:	4619      	mov	r1, r3
 80009a0:	2025      	movs	r0, #37	; 0x25
 80009a2:	f7ff fc5b 	bl	800025c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80009a6:	2025      	movs	r0, #37	; 0x25
 80009a8:	f7ff fc3a 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80009ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009c6:	230c      	movs	r3, #12
 80009c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 80009d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009dc:	4619      	mov	r1, r3
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <MX_USART1_UART_Init+0x128>)
 80009e0:	f003 f92e 	bl	8003c40 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80009e4:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x128>)
 80009e6:	f7ff fca6 	bl	8000336 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_USART1_UART_Init+0x128>)
 80009ec:	f7ff fc93 	bl	8000316 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	2080      	movs	r0, #128	; 0x80
 80009f6:	f003 fb3b 	bl	8004070 <xQueueGenericCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <MX_USART1_UART_Init+0x12c>)
 80009fe:	6013      	str	r3, [r2, #0]
   rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	2005      	movs	r0, #5
 8000a06:	f003 fb33 	bl	8004070 <xQueueGenericCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <MX_USART1_UART_Init+0x130>)
 8000a0e:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART1);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_USART1_UART_Init+0x128>)
 8000a12:	f7ff fccc 	bl	80003ae <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	37c0      	adds	r7, #192	; 0xc0
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40013800 	.word	0x40013800
 8000a24:	20001070 	.word	0x20001070
 8000a28:	20001064 	.word	0x20001064

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0b0      	sub	sp, #192	; 0xc0
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2288      	movs	r2, #136	; 0x88
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f005 fb08 	bl	8006074 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fb6a 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 f8f1 	bl	8000c60 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000a7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a82:	f7ff fcfb 	bl	800047c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fce0 	bl	800044c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f002 fc1e 	bl	80032fa <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000abe:	f7ff fba1 	bl	8000204 <__NVIC_GetPriorityGrouping>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2105      	movs	r1, #5
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fbf1 	bl	80002b0 <NVIC_EncodePriority>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2026      	movs	r0, #38	; 0x26
 8000ad4:	f7ff fbc2 	bl	800025c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000ad8:	2026      	movs	r0, #38	; 0x26
 8000ada:	f7ff fba1 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ade:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000af8:	230c      	movs	r3, #12
 8000afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8000b0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480f      	ldr	r0, [pc, #60]	; (8000b50 <MX_USART2_UART_Init+0x124>)
 8000b12:	f003 f895 	bl	8003c40 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x124>)
 8000b18:	f7ff fc0d 	bl	8000336 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x124>)
 8000b1e:	f7ff fbfa 	bl	8000316 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	2080      	movs	r0, #128	; 0x80
 8000b28:	f003 faa2 	bl	8004070 <xQueueGenericCreate>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <MX_USART2_UART_Init+0x128>)
 8000b30:	6013      	str	r3, [r2, #0]
   rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000b32:	2200      	movs	r2, #0
 8000b34:	2101      	movs	r1, #1
 8000b36:	2005      	movs	r0, #5
 8000b38:	f003 fa9a 	bl	8004070 <xQueueGenericCreate>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x12c>)
 8000b40:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART2);
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <MX_USART2_UART_Init+0x124>)
 8000b44:	f7ff fc33 	bl	80003ae <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	37c0      	adds	r7, #192	; 0xc0
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40004400 	.word	0x40004400
 8000b54:	20001068 	.word	0x20001068
 8000b58:	2000106c 	.word	0x2000106c

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a24      	ldr	r2, [pc, #144]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_GPIO_Init+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f000 fc31 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_GPIO_Init+0xc8>)
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_GPIO_Init+0xcc>)
 8000bf4:	f000 fa62 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f000 fa53 	bl	80010bc <HAL_GPIO_Init>

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	10210000 	.word	0x10210000
 8000c28:	48000800 	.word	0x48000800

08000c2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f003 f8ea 	bl	8003e0e <osDelay>
 8000c3a:	e7fb      	b.n	8000c34 <StartDefaultTask+0x8>

08000c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4e:	f000 f933 	bl	8000eb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40012c00 	.word	0x40012c00

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	; 0x58
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f000 f9dd 	bl	8001068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	2019      	movs	r0, #25
 8000cd2:	f000 f9c9 	bl	8001068 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cd6:	2019      	movs	r0, #25
 8000cd8:	f000 f9e2 	bl	80010a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_InitTick+0x9c>)
 8000cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_InitTick+0x9c>)
 8000ce2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_InitTick+0x9c>)
 8000cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf4:	f107 0210 	add.w	r2, r7, #16
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 f990 	bl	8002024 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d04:	f001 f978 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8000d08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_InitTick+0xa0>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3b01      	subs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d3a:	f001 fec1 	bl	8002ac0 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d104      	bne.n	8000d4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d46:	f001 ff1d 	bl	8002b84 <HAL_TIM_Base_Start_IT>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	20001074 	.word	0x20001074
 8000d64:	40012c00 	.word	0x40012c00

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d9a:	f001 ff63 	bl	8002c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20001074 	.word	0x20001074

08000da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8000dac:	f7ff fca0 	bl	80006f0 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 8000db8:	f7ff fc3a 	bl	8000630 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <SystemInit+0x5c>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <SystemInit+0x5c>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <SystemInit+0x60>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <SystemInit+0x60>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <SystemInit+0x60>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <SystemInit+0x60>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <SystemInit+0x60>)
 8000dec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000df0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <SystemInit+0x60>)
 8000df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <SystemInit+0x60>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <SystemInit+0x60>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SystemInit+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	40021000 	.word	0x40021000

08000e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff ffca 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e2e:	e003      	b.n	8000e38 <LoopCopyDataInit>

08000e30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e36:	3104      	adds	r1, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e40:	d3f6      	bcc.n	8000e30 <CopyDataInit>
	ldr	r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e44:	e002      	b.n	8000e4c <LoopFillZerobss>

08000e46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e48:	f842 3b04 	str.w	r3, [r2], #4

08000e4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <LoopForever+0x16>)
	cmp	r2, r3
 8000e4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e50:	d3f9      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f005 f8db 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e56:	f7ff fcab 	bl	80007b0 <main>

08000e5a <LoopForever>:

LoopForever:
    b LoopForever
 8000e5a:	e7fe      	b.n	8000e5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e5c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e60:	08006318 	.word	0x08006318
	ldr	r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e68:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000e6c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000e70:	200010d0 	.word	0x200010d0

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_Init+0x3c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_Init+0x3c>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f8df 	bl	8001052 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e94:	200f      	movs	r0, #15
 8000e96:	f7ff ff11 	bl	8000cbc <HAL_InitTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	e001      	b.n	8000eaa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea6:	f7ff fee1 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	200010c0 	.word	0x200010c0

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200010c0 	.word	0x200010c0

08000ef8 <__NVIC_SetPriorityGrouping>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff4c 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107a:	f7ff ff61 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 800107e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	6978      	ldr	r0, [r7, #20]
 8001086:	f7ff ffb1 	bl	8000fec <NVIC_EncodePriority>
 800108a:	4602      	mov	r2, r0
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff80 	bl	8000f98 <__NVIC_SetPriority>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff54 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	e17f      	b.n	80013cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8171 	beq.w	80013c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d00b      	beq.n	8001104 <HAL_GPIO_Init+0x48>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f8:	2b11      	cmp	r3, #17
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b12      	cmp	r3, #18
 8001102:	d130      	bne.n	8001166 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 0201 	and.w	r2, r3, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b03      	cmp	r3, #3
 8001170:	d118      	bne.n	80011a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x128>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b12      	cmp	r3, #18
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	6939      	ldr	r1, [r7, #16]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80ac 	beq.w	80013c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_GPIO_Init+0x330>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	4a5e      	ldr	r2, [pc, #376]	; (80013ec <HAL_GPIO_Init+0x330>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6613      	str	r3, [r2, #96]	; 0x60
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_GPIO_Init+0x330>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001286:	4a5a      	ldr	r2, [pc, #360]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x242>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4f      	ldr	r2, [pc, #316]	; (80013f4 <HAL_GPIO_Init+0x338>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x23e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <HAL_GPIO_Init+0x33c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x23a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <HAL_GPIO_Init+0x340>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x236>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4c      	ldr	r2, [pc, #304]	; (8001400 <HAL_GPIO_Init+0x344>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x232>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <HAL_GPIO_Init+0x348>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4a      	ldr	r2, [pc, #296]	; (8001408 <HAL_GPIO_Init+0x34c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x22a>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00c      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00a      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012ea:	2305      	movs	r3, #5
 80012ec:	e008      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e004      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012fe:	2300      	movs	r3, #0
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	4093      	lsls	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001310:	4937      	ldr	r1, [pc, #220]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_GPIO_Init+0x350>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001342:	4a32      	ldr	r2, [pc, #200]	; (800140c <HAL_GPIO_Init+0x350>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_GPIO_Init+0x350>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800136c:	4a27      	ldr	r2, [pc, #156]	; (800140c <HAL_GPIO_Init+0x350>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_GPIO_Init+0x350>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001396:	4a1d      	ldr	r2, [pc, #116]	; (800140c <HAL_GPIO_Init+0x350>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_GPIO_Init+0x350>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_GPIO_Init+0x350>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f ae78 	bne.w	80010cc <HAL_GPIO_Init+0x10>
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	48000400 	.word	0x48000400
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000c00 	.word	0x48000c00
 8001400:	48001000 	.word	0x48001000
 8001404:	48001400 	.word	0x48001400
 8001408:	48001800 	.word	0x48001800
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e001      	b.n	8001432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800145c:	e002      	b.n	8001464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_PWREx_GetVoltageRange+0x18>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40007000 	.word	0x40007000

0800148c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149a:	d130      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a8:	d038      	beq.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2232      	movs	r2, #50	; 0x32
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9b      	lsrs	r3, r3, #18
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d0:	e002      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e4:	d102      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f2      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f8:	d110      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e00f      	b.n	800151e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150a:	d007      	beq.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001514:	4a05      	ldr	r2, [pc, #20]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40007000 	.word	0x40007000
 8001530:	20000000 	.word	0x20000000
 8001534:	431bde83 	.word	0x431bde83

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e3d4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154a:	4ba1      	ldr	r3, [pc, #644]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001554:	4b9e      	ldr	r3, [pc, #632]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80e4 	beq.w	8001734 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_RCC_OscConfig+0x4a>
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	f040 808b 	bne.w	8001690 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b01      	cmp	r3, #1
 800157e:	f040 8087 	bne.w	8001690 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001582:	4b93      	ldr	r3, [pc, #588]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x62>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e3ac      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	4b8c      	ldr	r3, [pc, #560]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <HAL_RCC_OscConfig+0x7c>
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b2:	e005      	b.n	80015c0 <HAL_RCC_OscConfig+0x88>
 80015b4:	4b86      	ldr	r3, [pc, #536]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d223      	bcs.n	800160c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fd5d 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e38d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d8:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a7c      	ldr	r2, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b7a      	ldr	r3, [pc, #488]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4977      	ldr	r1, [pc, #476]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	4972      	ldr	r1, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
 800160a:	e025      	b.n	8001658 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6f      	ldr	r2, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	496a      	ldr	r1, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162a:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4965      	ldr	r1, [pc, #404]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd1d 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e34d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001658:	f000 fc36 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	495a      	ldr	r1, [pc, #360]	; (80017d4 <HAL_RCC_OscConfig+0x29c>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_RCC_OscConfig+0x2a0>)
 8001676:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001678:	4b58      	ldr	r3, [pc, #352]	; (80017dc <HAL_RCC_OscConfig+0x2a4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fb1d 	bl	8000cbc <HAL_InitTick>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d052      	beq.n	8001732 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	e331      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d032      	beq.n	80016fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001698:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4c      	ldr	r2, [pc, #304]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc1c 	bl	8000ee0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc18 	bl	8000ee0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e31a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	493b      	ldr	r1, [pc, #236]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	4936      	ldr	r1, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
 80016fc:	e01a      	b.n	8001734 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170a:	f7ff fbe9 	bl	8000ee0 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001712:	f7ff fbe5 	bl	8000ee0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e2e7      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x1da>
 8001730:	e000      	b.n	8001734 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d074      	beq.n	800182a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x21a>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d10e      	bne.n	800176a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d10b      	bne.n	800176a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d064      	beq.n	8001828 <HAL_RCC_OscConfig+0x2f0>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d160      	bne.n	8001828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e2c4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x24a>
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e01d      	b.n	80017be <HAL_RCC_OscConfig+0x286>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x26e>
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x286>
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01c      	beq.n	8001800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb8b 	bl	8000ee0 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017cc:	e011      	b.n	80017f2 <HAL_RCC_OscConfig+0x2ba>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08006268 	.word	0x08006268
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb7e 	bl	8000ee0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e280      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	4baf      	ldr	r3, [pc, #700]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2a8>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb6e 	bl	8000ee0 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fb6a 	bl	8000ee0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e26c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181a:	4ba5      	ldr	r3, [pc, #660]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x2d0>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d060      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x310>
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d119      	bne.n	8001876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d116      	bne.n	8001876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001848:	4b99      	ldr	r3, [pc, #612]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x328>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e249      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b93      	ldr	r3, [pc, #588]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	4990      	ldr	r1, [pc, #576]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001874:	e040      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d023      	beq.n	80018c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187e:	4b8c      	ldr	r3, [pc, #560]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a8b      	ldr	r2, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff fb29 	bl	8000ee0 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fb25 	bl	8000ee0 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e227      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	4b82      	ldr	r3, [pc, #520]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b7f      	ldr	r3, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	497c      	ldr	r1, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e018      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c6:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a79      	ldr	r2, [pc, #484]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb05 	bl	8000ee0 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fb01 	bl	8000ee0 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e203      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03c      	beq.n	800197e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01c      	beq.n	8001946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	4a67      	ldr	r2, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fae0 	bl	8000ee0 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fadc 	bl	8000ee0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1de      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001936:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ef      	beq.n	8001924 <HAL_RCC_OscConfig+0x3ec>
 8001944:	e01b      	b.n	800197e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fac3 	bl	8000ee0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fabf 	bl	8000ee0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1c1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001970:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80a6 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6593      	str	r3, [r2, #88]	; 0x58
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b4:	2301      	movs	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d118      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fa86 	bl	8000ee0 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff fa82 	bl	8000ee0 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e184      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4d8>
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0e:	e024      	b.n	8001a5a <HAL_RCC_OscConfig+0x522>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d110      	bne.n	8001a3a <HAL_RCC_OscConfig+0x502>
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a38:	e00f      	b.n	8001a5a <HAL_RCC_OscConfig+0x522>
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a52:	f023 0304 	bic.w	r3, r3, #4
 8001a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d016      	beq.n	8001a90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa3d 	bl	8000ee0 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fa39 	bl	8000ee0 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e139      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ed      	beq.n	8001a6a <HAL_RCC_OscConfig+0x532>
 8001a8e:	e01a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa26 	bl	8000ee0 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff fa22 	bl	8000ee0 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d906      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e122      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab8:	4b90      	ldr	r3, [pc, #576]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1e8      	bne.n	8001a98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	4a8a      	ldr	r2, [pc, #552]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8108 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f040 80d0 	bne.w	8001c8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aec:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d130      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d127      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d11f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b2c:	2a07      	cmp	r2, #7
 8001b2e:	bf14      	ite	ne
 8001b30:	2201      	movne	r2, #1
 8001b32:	2200      	moveq	r2, #0
 8001b34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d113      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d06e      	beq.n	8001c40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d069      	beq.n	8001c3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b68:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b74:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b7      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b84:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5c      	ldr	r2, [pc, #368]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b90:	f7ff f9a6 	bl	8000ee0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f9a2 	bl	8000ee0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0a4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001baa:	4b54      	ldr	r3, [pc, #336]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_RCC_OscConfig+0x7c8>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd0:	0212      	lsls	r2, r2, #8
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bd8:	0852      	lsrs	r2, r2, #1
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	0552      	lsls	r2, r2, #21
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001be4:	0852      	lsrs	r2, r2, #1
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0652      	lsls	r2, r2, #25
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf0:	0912      	lsrs	r2, r2, #4
 8001bf2:	0452      	lsls	r2, r2, #17
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	4941      	ldr	r1, [pc, #260]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a3b      	ldr	r2, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7ff f964 	bl	8000ee0 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f960 	bl	8000ee0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e062      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3a:	e05a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e059      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d152      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c64:	f7ff f93c 	bl	8000ee0 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f938 	bl	8000ee0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e03a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x734>
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d02d      	beq.n	8001cee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cb0:	f023 0303 	bic.w	r3, r3, #3
 8001cb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f90b 	bl	8000ee0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f907 	bl	8000ee0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e009      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x796>
 8001cec:	e001      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	f99d808c 	.word	0xf99d808c

08001d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0c8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4961      	ldr	r1, [pc, #388]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d04c      	beq.n	8001dee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5c:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d121      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e09e      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d115      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e092      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e086      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e07e      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 0203 	bic.w	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	493f      	ldr	r1, [pc, #252]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbe:	f7ff f88f 	bl	8000ee0 <HAL_GetTick>
 8001dc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7ff f88b 	bl	8000ee0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e066      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 020c 	and.w	r2, r3, #12
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d1eb      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	492c      	ldr	r1, [pc, #176]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d210      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4924      	ldr	r1, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e036      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4918      	ldr	r1, [pc, #96]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4910      	ldr	r1, [pc, #64]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e7a:	f000 f825 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	490c      	ldr	r1, [pc, #48]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	5ccb      	ldrb	r3, [r1, r3]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff0c 	bl	8000cbc <HAL_InitTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08006268 	.word	0x08006268
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x34>
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d121      	bne.n	8001f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d11e      	bne.n	8001f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e005      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f24:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	e004      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d134      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d003      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0xac>
 8001f6c:	e005      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f70:	617b      	str	r3, [r7, #20]
      break;
 8001f72:	e005      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f76:	617b      	str	r3, [r7, #20]
      break;
 8001f78:	e002      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	617b      	str	r3, [r7, #20]
      break;
 8001f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	fb02 f203 	mul.w	r2, r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	0e5b      	lsrs	r3, r3, #25
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08006280 	.word	0x08006280
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200

08001fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0adb      	lsrs	r3, r3, #11
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4904      	ldr	r1, [pc, #16]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	08006278 	.word	0x08006278

08002024 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	220f      	movs	r2, #15
 8002032:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_GetClockConfig+0x5c>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_RCC_GetClockConfig+0x5c>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_RCC_GetClockConfig+0x5c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_GetClockConfig+0x5c>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	08db      	lsrs	r3, r3, #3
 800205e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_RCC_GetClockConfig+0x60>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0207 	and.w	r2, r3, #7
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	40022000 	.word	0x40022000

08002088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a0:	f7ff f9e6 	bl	8001470 <HAL_PWREx_GetVoltageRange>
 80020a4:	6178      	str	r0, [r7, #20]
 80020a6:	e014      	b.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a24      	ldr	r2, [pc, #144]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff f9d6 	bl	8001470 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d10b      	bne.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d919      	bls.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2ba0      	cmp	r3, #160	; 0xa0
 80020e4:	d902      	bls.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e013      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e010      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d902      	bls.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f8:	2303      	movs	r3, #3
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e00a      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d102      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e004      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b70      	cmp	r3, #112	; 0x70
 800210e:	d101      	bne.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4909      	ldr	r1, [pc, #36]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002150:	2300      	movs	r3, #0
 8002152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002154:	2300      	movs	r3, #0
 8002156:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002160:	2b00      	cmp	r3, #0
 8002162:	d041      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002168:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800216c:	d02a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800216e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002172:	d824      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800217a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800217e:	d81e      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002188:	d010      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800218a:	e018      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800218c:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a85      	ldr	r2, [pc, #532]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002198:	e015      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fabb 	bl	800271c <RCCEx_PLLSAI1_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021aa:	e00c      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3320      	adds	r3, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fba6 	bl	8002904 <RCCEx_PLLSAI2_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021bc:	e003      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	74fb      	strb	r3, [r7, #19]
      break;
 80021c2:	e000      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021da:	4973      	ldr	r1, [pc, #460]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e2:	e001      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d041      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021fc:	d02a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002202:	d824      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002208:	d008      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800220a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800220e:	d81e      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d010      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800221a:	e018      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800221c:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a61      	ldr	r2, [pc, #388]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002228:	e015      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa73 	bl	800271c <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800223a:	e00c      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3320      	adds	r3, #32
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fb5e 	bl	8002904 <RCCEx_PLLSAI2_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800224c:	e003      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	74fb      	strb	r3, [r7, #19]
      break;
 8002252:	e000      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800225c:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800226a:	494f      	ldr	r1, [pc, #316]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002272:	e001      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a0 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	4a40      	ldr	r2, [pc, #256]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022aa:	6593      	str	r3, [r2, #88]	; 0x58
 80022ac:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fe0a 	bl	8000ee0 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ce:	e009      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d0:	f7fe fe06 	bl	8000ee0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d902      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	74fb      	strb	r3, [r7, #19]
        break;
 80022e2:	e005      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ef      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d15c      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01f      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d019      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fdc5 	bl	8000ee0 <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002358:	e00b      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fdc1 	bl	8000ee0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d902      	bls.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	74fb      	strb	r3, [r7, #19]
            break;
 8002370:	e006      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ec      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002396:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800239e:	e009      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
 80023a4:	e006      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b4:	7c7b      	ldrb	r3, [r7, #17]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	4a9d      	ldr	r2, [pc, #628]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d2:	4b98      	ldr	r3, [pc, #608]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f023 0203 	bic.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	4994      	ldr	r1, [pc, #592]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f4:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 020c 	bic.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	498c      	ldr	r1, [pc, #560]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002416:	4b87      	ldr	r3, [pc, #540]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4983      	ldr	r1, [pc, #524]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	497b      	ldr	r1, [pc, #492]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	4972      	ldr	r1, [pc, #456]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	496a      	ldr	r1, [pc, #424]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800249e:	4b65      	ldr	r3, [pc, #404]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	4961      	ldr	r1, [pc, #388]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c0:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	4959      	ldr	r1, [pc, #356]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e2:	4b54      	ldr	r3, [pc, #336]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f0:	4950      	ldr	r1, [pc, #320]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	4948      	ldr	r1, [pc, #288]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	493f      	ldr	r1, [pc, #252]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d028      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002556:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002566:	d106      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002568:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a31      	ldr	r2, [pc, #196]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002572:	60d3      	str	r3, [r2, #12]
 8002574:	e011      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800257e:	d10c      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	2101      	movs	r1, #1
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f8c8 	bl	800271c <RCCEx_PLLSAI1_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d028      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	491f      	ldr	r1, [pc, #124]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c4:	d106      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d0:	60d3      	str	r3, [r2, #12]
 80025d2:	e011      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f899 	bl	800271c <RCCEx_PLLSAI1_Config>
 80025ea:	4603      	mov	r3, r0
 80025ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02b      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002622:	d109      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a02      	ldr	r2, [pc, #8]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262e:	60d3      	str	r3, [r2, #12]
 8002630:	e014      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	2101      	movs	r1, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f867 	bl	800271c <RCCEx_PLLSAI1_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02f      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002676:	4928      	ldr	r1, [pc, #160]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002686:	d10d      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f844 	bl	800271c <RCCEx_PLLSAI1_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d014      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	74bb      	strb	r3, [r7, #18]
 80026a2:	e011      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3320      	adds	r3, #32
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f925 	bl	8002904 <RCCEx_PLLSAI2_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e2:	490d      	ldr	r1, [pc, #52]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002706:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800270e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272a:	4b75      	ldr	r3, [pc, #468]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002736:	4b72      	ldr	r3, [pc, #456]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0203 	and.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d10d      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
       ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800274e:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
       ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d047      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e044      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d018      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0x86>
 8002770:	2b03      	cmp	r3, #3
 8002772:	d825      	bhi.n	80027c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002774:	2b01      	cmp	r3, #1
 8002776:	d002      	beq.n	800277e <RCCEx_PLLSAI1_Config+0x62>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d009      	beq.n	8002790 <RCCEx_PLLSAI1_Config+0x74>
 800277c:	e020      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800277e:	4b60      	ldr	r3, [pc, #384]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11d      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278e:	e01a      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d116      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a0:	e013      	b.n	80027ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027be:	e006      	b.n	80027ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e004      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	430b      	orrs	r3, r1
 80027ec:	4944      	ldr	r1, [pc, #272]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d17d      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027f8:	4b41      	ldr	r3, [pc, #260]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a40      	ldr	r2, [pc, #256]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe fb6c 	bl	8000ee0 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800280a:	e009      	b.n	8002820 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800280c:	f7fe fb68 	bl	8000ee0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	73fb      	strb	r3, [r7, #15]
        break;
 800281e:	e005      	b.n	800282c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ef      	bne.n	800280c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d160      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d111      	bne.n	800285c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	0211      	lsls	r1, r2, #8
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	0912      	lsrs	r2, r2, #4
 8002850:	0452      	lsls	r2, r2, #17
 8002852:	430a      	orrs	r2, r1
 8002854:	492a      	ldr	r1, [pc, #168]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	610b      	str	r3, [r1, #16]
 800285a:	e027      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d112      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800286a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6892      	ldr	r2, [r2, #8]
 8002872:	0211      	lsls	r1, r2, #8
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6912      	ldr	r2, [r2, #16]
 8002878:	0852      	lsrs	r2, r2, #1
 800287a:	3a01      	subs	r2, #1
 800287c:	0552      	lsls	r2, r2, #21
 800287e:	430a      	orrs	r2, r1
 8002880:	491f      	ldr	r1, [pc, #124]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	610b      	str	r3, [r1, #16]
 8002886:	e011      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002890:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
 8002898:	0211      	lsls	r1, r2, #8
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6952      	ldr	r2, [r2, #20]
 800289e:	0852      	lsrs	r2, r2, #1
 80028a0:	3a01      	subs	r2, #1
 80028a2:	0652      	lsls	r2, r2, #25
 80028a4:	430a      	orrs	r2, r1
 80028a6:	4916      	ldr	r1, [pc, #88]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe fb12 	bl	8000ee0 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028be:	e009      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c0:	f7fe fb0e 	bl	8000ee0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d902      	bls.n	80028d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	73fb      	strb	r3, [r7, #15]
          break;
 80028d2:	e005      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ef      	beq.n	80028c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	4904      	ldr	r1, [pc, #16]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d10d      	bne.n	800294a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
       ||
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002936:	4b61      	ldr	r3, [pc, #388]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
       ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d047      	beq.n	80029da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e044      	b.n	80029da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d018      	beq.n	800298a <RCCEx_PLLSAI2_Config+0x86>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d825      	bhi.n	80029a8 <RCCEx_PLLSAI2_Config+0xa4>
 800295c:	2b01      	cmp	r3, #1
 800295e:	d002      	beq.n	8002966 <RCCEx_PLLSAI2_Config+0x62>
 8002960:	2b02      	cmp	r3, #2
 8002962:	d009      	beq.n	8002978 <RCCEx_PLLSAI2_Config+0x74>
 8002964:	e020      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002966:	4b55      	ldr	r3, [pc, #340]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11d      	bne.n	80029ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002976:	e01a      	b.n	80029ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002978:	4b50      	ldr	r3, [pc, #320]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002988:	e013      	b.n	80029b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298a:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002996:	4b49      	ldr	r3, [pc, #292]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a6:	e006      	b.n	80029b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e004      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	430b      	orrs	r3, r1
 80029d4:	4939      	ldr	r1, [pc, #228]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d167      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029e0:	4b36      	ldr	r3, [pc, #216]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a35      	ldr	r2, [pc, #212]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ec:	f7fe fa78 	bl	8000ee0 <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029f2:	e009      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029f4:	f7fe fa74 	bl	8000ee0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	73fb      	strb	r3, [r7, #15]
        break;
 8002a06:	e005      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ef      	bne.n	80029f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d14a      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d111      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	0211      	lsls	r1, r2, #8
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	0912      	lsrs	r2, r2, #4
 8002a38:	0452      	lsls	r2, r2, #17
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	491f      	ldr	r1, [pc, #124]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	614b      	str	r3, [r1, #20]
 8002a42:	e011      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	0211      	lsls	r1, r2, #8
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6912      	ldr	r2, [r2, #16]
 8002a5a:	0852      	lsrs	r2, r2, #1
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0652      	lsls	r2, r2, #25
 8002a60:	430a      	orrs	r2, r1
 8002a62:	4916      	ldr	r1, [pc, #88]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a13      	ldr	r2, [pc, #76]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fa34 	bl	8000ee0 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a7a:	e009      	b.n	8002a90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a7c:	f7fe fa30 	bl	8000ee0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d902      	bls.n	8002a90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a8e:	e005      	b.n	8002a9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ef      	beq.n	8002a7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4904      	ldr	r1, [pc, #16]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e049      	b.n	8002b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f841 	bl	8002b6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f000 f9f8 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e04f      	b.n	8002c3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01d      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc6:	d018      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d115      	bne.n	8002c26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d015      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d011      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	e008      	b.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e000      	b.n	8002c3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	40013400 	.word	0x40013400
 8002c5c:	40014000 	.word	0x40014000
 8002c60:	00010007 	.word	0x00010007

08002c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0202 	mvn.w	r2, #2
 8002c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f905 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8f7 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f908 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0204 	mvn.w	r2, #4
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8db 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8cd 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8de 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0208 	mvn.w	r2, #8
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8b1 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8a3 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8b4 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0210 	mvn.w	r2, #16
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2208      	movs	r2, #8
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f887 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f879 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f88a 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0201 	mvn.w	r2, #1
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd ff2a 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b80      	cmp	r3, #128	; 0x80
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e00:	2b80      	cmp	r3, #128	; 0x80
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f914 	bl	800303c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e22:	d10e      	bne.n	8002e42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d107      	bne.n	8002e42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f907 	bl	8003050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d10e      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
 8002e5c:	d107      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f838 	bl	8002ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d10e      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f06f 0220 	mvn.w	r2, #32
 8002e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8c7 	bl	8003028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a40      	ldr	r2, [pc, #256]	; (8003008 <TIM_Base_SetConfig+0x114>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d013      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f12:	d00f      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3d      	ldr	r2, [pc, #244]	; (800300c <TIM_Base_SetConfig+0x118>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <TIM_Base_SetConfig+0x11c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3b      	ldr	r2, [pc, #236]	; (8003014 <TIM_Base_SetConfig+0x120>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3a      	ldr	r2, [pc, #232]	; (8003018 <TIM_Base_SetConfig+0x124>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <TIM_Base_SetConfig+0x114>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d01b      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2c      	ldr	r2, [pc, #176]	; (800300c <TIM_Base_SetConfig+0x118>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d017      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <TIM_Base_SetConfig+0x11c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <TIM_Base_SetConfig+0x120>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00f      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a29      	ldr	r2, [pc, #164]	; (8003018 <TIM_Base_SetConfig+0x124>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <TIM_Base_SetConfig+0x128>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a27      	ldr	r2, [pc, #156]	; (8003020 <TIM_Base_SetConfig+0x12c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <TIM_Base_SetConfig+0x130>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a10      	ldr	r2, [pc, #64]	; (8003008 <TIM_Base_SetConfig+0x114>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00f      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <TIM_Base_SetConfig+0x124>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a11      	ldr	r2, [pc, #68]	; (800301c <TIM_Base_SetConfig+0x128>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <TIM_Base_SetConfig+0x12c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <TIM_Base_SetConfig+0x130>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40013400 	.word	0x40013400
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800

08003028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003064:	b480      	push	{r7}
 8003066:	b08b      	sub	sp, #44	; 0x2c
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e003      	b.n	8003096 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2103      	movs	r1, #3
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	401a      	ands	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	61fb      	str	r3, [r7, #28]
  return result;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e003      	b.n	80030c4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	372c      	adds	r7, #44	; 0x2c
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800310e:	b480      	push	{r7}
 8003110:	b08b      	sub	sp, #44	; 0x2c
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	613b      	str	r3, [r7, #16]
  return result;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e003      	b.n	8003140 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2103      	movs	r1, #3
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	61fb      	str	r3, [r7, #28]
  return result;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003162:	2320      	movs	r3, #32
 8003164:	e003      	b.n	800316e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	431a      	orrs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800317c:	bf00      	nop
 800317e:	372c      	adds	r7, #44	; 0x2c
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003188:	b480      	push	{r7}
 800318a:	b08b      	sub	sp, #44	; 0x2c
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	613b      	str	r3, [r7, #16]
  return result;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80031ae:	2320      	movs	r3, #32
 80031b0:	e003      	b.n	80031ba <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2103      	movs	r1, #3
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	401a      	ands	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	61fb      	str	r3, [r7, #28]
  return result;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80031dc:	2320      	movs	r3, #32
 80031de:	e003      	b.n	80031e8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	60da      	str	r2, [r3, #12]
}
 80031f6:	bf00      	nop
 80031f8:	372c      	adds	r7, #44	; 0x2c
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003202:	b480      	push	{r7}
 8003204:	b08b      	sub	sp, #44	; 0x2c
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	613b      	str	r3, [r7, #16]
  return result;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e003      	b.n	8003234 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	210f      	movs	r1, #15
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	61fb      	str	r3, [r7, #28]
  return result;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003270:	bf00      	nop
 8003272:	372c      	adds	r7, #44	; 0x2c
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800327c:	b480      	push	{r7}
 800327e:	b08b      	sub	sp, #44	; 0x2c
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	613b      	str	r3, [r7, #16]
  return result;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80032a4:	2320      	movs	r3, #32
 80032a6:	e003      	b.n	80032b0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	210f      	movs	r1, #15
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	61fb      	str	r3, [r7, #28]
  return result;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80032d4:	2320      	movs	r3, #32
 80032d6:	e003      	b.n	80032e0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80032ee:	bf00      	nop
 80032f0:	372c      	adds	r7, #44	; 0x2c
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b088      	sub	sp, #32
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	60fb      	str	r3, [r7, #12]
  return result;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <LL_GPIO_Init+0x26>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800332a:	e048      	b.n	80033be <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03a      	beq.n	80033b8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d003      	beq.n	8003352 <LL_GPIO_Init+0x58>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d10e      	bne.n	8003370 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	461a      	mov	r2, r3
 8003358:	69b9      	ldr	r1, [r7, #24]
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fed7 	bl	800310e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	461a      	mov	r2, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff feb7 	bl	80030de <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	461a      	mov	r2, r3
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff05 	bl	8003188 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d111      	bne.n	80033aa <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2bff      	cmp	r3, #255	; 0xff
 800338a:	d807      	bhi.n	800339c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	461a      	mov	r2, r3
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff34 	bl	8003202 <LL_GPIO_SetAFPin_0_7>
 800339a:	e006      	b.n	80033aa <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	461a      	mov	r2, r3
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff69 	bl	800327c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	69b9      	ldr	r1, [r7, #24]
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff fe56 	bl	8003064 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	3301      	adds	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1af      	bne.n	800332c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <LL_RCC_HSI_IsReady+0x24>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e8:	d101      	bne.n	80033ee <LL_RCC_HSI_IsReady+0x16>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <LL_RCC_HSI_IsReady+0x18>
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000

08003400 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8003404:	4b07      	ldr	r3, [pc, #28]	; (8003424 <LL_RCC_LSE_IsReady+0x24>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d101      	bne.n	8003416 <LL_RCC_LSE_IsReady+0x16>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <LL_RCC_LSE_IsReady+0x18>
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000

08003428 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d101      	bne.n	800343c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40021000 	.word	0x40021000

0800344c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <LL_RCC_MSI_GetRange+0x18>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003472:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40021000 	.word	0x40021000

08003484 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <LL_RCC_GetSysClkSource+0x18>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000

080034a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <LL_RCC_GetAHBPrescaler+0x18>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000

080034bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000

080034d8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000

080034f4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <LL_RCC_GetUSARTClockSource+0x24>)
 80034fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	401a      	ands	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	4313      	orrs	r3, r2
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40021000 	.word	0x40021000

0800351c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <LL_RCC_GetUARTClockSource+0x24>)
 8003526:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	401a      	ands	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	4313      	orrs	r3, r2
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40021000 	.word	0x40021000

08003544 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <LL_RCC_PLL_GetMainSource+0x18>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0303 	and.w	r3, r3, #3
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000

08003560 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <LL_RCC_PLL_GetN+0x18>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000

0800357c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <LL_RCC_PLL_GetR+0x18>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <LL_RCC_PLL_GetDivider+0x18>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d137      	bne.n	8003636 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff94 	bl	80034f4 <LL_RCC_GetUSARTClockSource>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	f200 80b3 	bhi.w	800373e <LL_RCC_GetUSARTClockFreq+0x18a>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	0800361f 	.word	0x0800361f
 80035e4:	080035f1 	.word	0x080035f1
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	0800360b 	.word	0x0800360b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80035f0:	f000 f95c 	bl	80038ac <RCC_GetSystemClockFreq>
 80035f4:	60f8      	str	r0, [r7, #12]
        break;
 80035f6:	e0b5      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80035f8:	f7ff feee 	bl	80033d8 <LL_RCC_HSI_IsReady>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 809f 	beq.w	8003742 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8003604:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8003606:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003608:	e09b      	b.n	8003742 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800360a:	f7ff fef9 	bl	8003400 <LL_RCC_LSE_IsReady>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8098 	beq.w	8003746 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800361c:	e093      	b.n	8003746 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800361e:	f000 f945 	bl	80038ac <RCC_GetSystemClockFreq>
 8003622:	4603      	mov	r3, r0
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f9d1 	bl	80039cc <RCC_GetHCLKClockFreq>
 800362a:	4603      	mov	r3, r0
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f9f7 	bl	8003a20 <RCC_GetPCLK2ClockFreq>
 8003632:	60f8      	str	r0, [r7, #12]
        break;
 8003634:	e096      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d146      	bne.n	80036ca <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff59 	bl	80034f4 <LL_RCC_GetUSARTClockSource>
 8003642:	4603      	mov	r3, r0
 8003644:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003648:	2b0c      	cmp	r3, #12
 800364a:	d87e      	bhi.n	800374a <LL_RCC_GetUSARTClockFreq+0x196>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	080036b3 	.word	0x080036b3
 8003658:	0800374b 	.word	0x0800374b
 800365c:	0800374b 	.word	0x0800374b
 8003660:	0800374b 	.word	0x0800374b
 8003664:	08003689 	.word	0x08003689
 8003668:	0800374b 	.word	0x0800374b
 800366c:	0800374b 	.word	0x0800374b
 8003670:	0800374b 	.word	0x0800374b
 8003674:	08003691 	.word	0x08003691
 8003678:	0800374b 	.word	0x0800374b
 800367c:	0800374b 	.word	0x0800374b
 8003680:	0800374b 	.word	0x0800374b
 8003684:	080036a1 	.word	0x080036a1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003688:	f000 f910 	bl	80038ac <RCC_GetSystemClockFreq>
 800368c:	60f8      	str	r0, [r7, #12]
        break;
 800368e:	e069      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003690:	f7ff fea2 	bl	80033d8 <LL_RCC_HSI_IsReady>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d059      	beq.n	800374e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800369a:	4b35      	ldr	r3, [pc, #212]	; (8003770 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800369c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800369e:	e056      	b.n	800374e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80036a0:	f7ff feae 	bl	8003400 <LL_RCC_LSE_IsReady>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d053      	beq.n	8003752 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ae:	60fb      	str	r3, [r7, #12]
        }
        break;
 80036b0:	e04f      	b.n	8003752 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80036b2:	f000 f8fb 	bl	80038ac <RCC_GetSystemClockFreq>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f987 	bl	80039cc <RCC_GetHCLKClockFreq>
 80036be:	4603      	mov	r3, r0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f999 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 80036c6:	60f8      	str	r0, [r7, #12]
        break;
 80036c8:	e04c      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d142      	bne.n	8003756 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff0f 	bl	80034f4 <LL_RCC_GetUSARTClockSource>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80036dc:	d01a      	beq.n	8003714 <LL_RCC_GetUSARTClockFreq+0x160>
 80036de:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80036e2:	d83a      	bhi.n	800375a <LL_RCC_GetUSARTClockFreq+0x1a6>
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00c      	beq.n	8003704 <LL_RCC_GetUSARTClockFreq+0x150>
 80036ea:	4a22      	ldr	r2, [pc, #136]	; (8003774 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d834      	bhi.n	800375a <LL_RCC_GetUSARTClockFreq+0x1a6>
 80036f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036f4:	d017      	beq.n	8003726 <LL_RCC_GetUSARTClockFreq+0x172>
 80036f6:	4a20      	ldr	r2, [pc, #128]	; (8003778 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d12e      	bne.n	800375a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80036fc:	f000 f8d6 	bl	80038ac <RCC_GetSystemClockFreq>
 8003700:	60f8      	str	r0, [r7, #12]
          break;
 8003702:	e02f      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8003704:	f7ff fe68 	bl	80033d8 <LL_RCC_HSI_IsReady>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d027      	beq.n	800375e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8003710:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003712:	e024      	b.n	800375e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8003714:	f7ff fe74 	bl	8003400 <LL_RCC_LSE_IsReady>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d021      	beq.n	8003762 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800371e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003722:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003724:	e01d      	b.n	8003762 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003726:	f000 f8c1 	bl	80038ac <RCC_GetSystemClockFreq>
 800372a:	4603      	mov	r3, r0
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f94d 	bl	80039cc <RCC_GetHCLKClockFreq>
 8003732:	4603      	mov	r3, r0
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f95f 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 800373a:	60f8      	str	r0, [r7, #12]
          break;
 800373c:	e012      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800373e:	bf00      	nop
 8003740:	e010      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8003742:	bf00      	nop
 8003744:	e00e      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8003746:	bf00      	nop
 8003748:	e00c      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800374a:	bf00      	nop
 800374c:	e00a      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800374e:	bf00      	nop
 8003750:	e008      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8003752:	bf00      	nop
 8003754:	e006      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8003756:	bf00      	nop
 8003758:	e004      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800375a:	bf00      	nop
 800375c:	e002      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800375e:	bf00      	nop
 8003760:	e000      	b.n	8003764 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8003762:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	00f42400 	.word	0x00f42400
 8003774:	00300020 	.word	0x00300020
 8003778:	00300010 	.word	0x00300010

0800377c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2bc0      	cmp	r3, #192	; 0xc0
 800378c:	d136      	bne.n	80037fc <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fec4 	bl	800351c <LL_RCC_GetUARTClockSource>
 8003794:	4603      	mov	r3, r0
 8003796:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800379a:	d01a      	beq.n	80037d2 <LL_RCC_GetUARTClockFreq+0x56>
 800379c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80037a0:	d82e      	bhi.n	8003800 <LL_RCC_GetUARTClockFreq+0x84>
 80037a2:	4a3d      	ldr	r2, [pc, #244]	; (8003898 <LL_RCC_GetUARTClockFreq+0x11c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00c      	beq.n	80037c2 <LL_RCC_GetUARTClockFreq+0x46>
 80037a8:	4a3b      	ldr	r2, [pc, #236]	; (8003898 <LL_RCC_GetUARTClockFreq+0x11c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d828      	bhi.n	8003800 <LL_RCC_GetUARTClockFreq+0x84>
 80037ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037b2:	d017      	beq.n	80037e4 <LL_RCC_GetUARTClockFreq+0x68>
 80037b4:	4a39      	ldr	r2, [pc, #228]	; (800389c <LL_RCC_GetUARTClockFreq+0x120>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d122      	bne.n	8003800 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80037ba:	f000 f877 	bl	80038ac <RCC_GetSystemClockFreq>
 80037be:	60f8      	str	r0, [r7, #12]
        break;
 80037c0:	e023      	b.n	800380a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80037c2:	f7ff fe09 	bl	80033d8 <LL_RCC_HSI_IsReady>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 80037cc:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <LL_RCC_GetUARTClockFreq+0x124>)
 80037ce:	60fb      	str	r3, [r7, #12]
        }
        break;
 80037d0:	e018      	b.n	8003804 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80037d2:	f7ff fe15 	bl	8003400 <LL_RCC_LSE_IsReady>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d015      	beq.n	8003808 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 80037dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80037e2:	e011      	b.n	8003808 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80037e4:	f000 f862 	bl	80038ac <RCC_GetSystemClockFreq>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f8ee 	bl	80039cc <RCC_GetHCLKClockFreq>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f900 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 80037f8:	60f8      	str	r0, [r7, #12]
        break;
 80037fa:	e006      	b.n	800380a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80037fc:	bf00      	nop
 80037fe:	e004      	b.n	800380a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8003800:	bf00      	nop
 8003802:	e002      	b.n	800380a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8003804:	bf00      	nop
 8003806:	e000      	b.n	800380a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8003808:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003810:	d136      	bne.n	8003880 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff fe82 	bl	800351c <LL_RCC_GetUARTClockSource>
 8003818:	4603      	mov	r3, r0
 800381a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800381e:	d01a      	beq.n	8003856 <LL_RCC_GetUARTClockFreq+0xda>
 8003820:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003824:	d82e      	bhi.n	8003884 <LL_RCC_GetUARTClockFreq+0x108>
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <LL_RCC_GetUARTClockFreq+0x128>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00c      	beq.n	8003846 <LL_RCC_GetUARTClockFreq+0xca>
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <LL_RCC_GetUARTClockFreq+0x128>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d828      	bhi.n	8003884 <LL_RCC_GetUARTClockFreq+0x108>
 8003832:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003836:	d017      	beq.n	8003868 <LL_RCC_GetUARTClockFreq+0xec>
 8003838:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <LL_RCC_GetUARTClockFreq+0x12c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d122      	bne.n	8003884 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800383e:	f000 f835 	bl	80038ac <RCC_GetSystemClockFreq>
 8003842:	60f8      	str	r0, [r7, #12]
        break;
 8003844:	e023      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003846:	f7ff fdc7 	bl	80033d8 <LL_RCC_HSI_IsReady>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01b      	beq.n	8003888 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <LL_RCC_GetUARTClockFreq+0x124>)
 8003852:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003854:	e018      	b.n	8003888 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003856:	f7ff fdd3 	bl	8003400 <LL_RCC_LSE_IsReady>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8003860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003864:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003866:	e011      	b.n	800388c <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003868:	f000 f820 	bl	80038ac <RCC_GetSystemClockFreq>
 800386c:	4603      	mov	r3, r0
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f8ac 	bl	80039cc <RCC_GetHCLKClockFreq>
 8003874:	4603      	mov	r3, r0
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f8be 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 800387c:	60f8      	str	r0, [r7, #12]
        break;
 800387e:	e006      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8003880:	bf00      	nop
 8003882:	e004      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8003884:	bf00      	nop
 8003886:	e002      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8003888:	bf00      	nop
 800388a:	e000      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800388c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	00c00080 	.word	0x00c00080
 800389c:	00c00040 	.word	0x00c00040
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	03000200 	.word	0x03000200
 80038a8:	03000100 	.word	0x03000100

080038ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80038b2:	f7ff fde7 	bl	8003484 <LL_RCC_GetSysClkSource>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	d851      	bhi.n	8003960 <RCC_GetSystemClockFreq+0xb4>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <RCC_GetSystemClockFreq+0x18>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003961 	.word	0x08003961
 80038cc:	08003961 	.word	0x08003961
 80038d0:	08003961 	.word	0x08003961
 80038d4:	0800394d 	.word	0x0800394d
 80038d8:	08003961 	.word	0x08003961
 80038dc:	08003961 	.word	0x08003961
 80038e0:	08003961 	.word	0x08003961
 80038e4:	08003953 	.word	0x08003953
 80038e8:	08003961 	.word	0x08003961
 80038ec:	08003961 	.word	0x08003961
 80038f0:	08003961 	.word	0x08003961
 80038f4:	08003959 	.word	0x08003959
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80038f8:	f7ff fd96 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d111      	bne.n	8003926 <RCC_GetSystemClockFreq+0x7a>
 8003902:	f7ff fd91 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <RCC_GetSystemClockFreq+0x6a>
 800390c:	f7ff fd9e 	bl	800344c <LL_RCC_MSI_GetRange>
 8003910:	4603      	mov	r3, r0
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	e003      	b.n	800391e <RCC_GetSystemClockFreq+0x72>
 8003916:	f7ff fda7 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 800391a:	4603      	mov	r3, r0
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	4a28      	ldr	r2, [pc, #160]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	e010      	b.n	8003948 <RCC_GetSystemClockFreq+0x9c>
 8003926:	f7ff fd7f 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <RCC_GetSystemClockFreq+0x8e>
 8003930:	f7ff fd8c 	bl	800344c <LL_RCC_MSI_GetRange>
 8003934:	4603      	mov	r3, r0
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	e003      	b.n	8003942 <RCC_GetSystemClockFreq+0x96>
 800393a:	f7ff fd95 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 800393e:	4603      	mov	r3, r0
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800394a:	e033      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <RCC_GetSystemClockFreq+0x118>)
 800394e:	607b      	str	r3, [r7, #4]
      break;
 8003950:	e030      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <RCC_GetSystemClockFreq+0x11c>)
 8003954:	607b      	str	r3, [r7, #4]
      break;
 8003956:	e02d      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003958:	f000 f876 	bl	8003a48 <RCC_PLL_GetFreqDomain_SYS>
 800395c:	6078      	str	r0, [r7, #4]
      break;
 800395e:	e029      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003960:	f7ff fd62 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d111      	bne.n	800398e <RCC_GetSystemClockFreq+0xe2>
 800396a:	f7ff fd5d 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <RCC_GetSystemClockFreq+0xd2>
 8003974:	f7ff fd6a 	bl	800344c <LL_RCC_MSI_GetRange>
 8003978:	4603      	mov	r3, r0
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	e003      	b.n	8003986 <RCC_GetSystemClockFreq+0xda>
 800397e:	f7ff fd73 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 8003982:	4603      	mov	r3, r0
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 8003988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398c:	e010      	b.n	80039b0 <RCC_GetSystemClockFreq+0x104>
 800398e:	f7ff fd4b 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <RCC_GetSystemClockFreq+0xf6>
 8003998:	f7ff fd58 	bl	800344c <LL_RCC_MSI_GetRange>
 800399c:	4603      	mov	r3, r0
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	e003      	b.n	80039aa <RCC_GetSystemClockFreq+0xfe>
 80039a2:	f7ff fd61 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 80039a6:	4603      	mov	r3, r0
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80039b2:	bf00      	nop
  }

  return frequency;
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	08006280 	.word	0x08006280
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80039d4:	f7ff fd64 	bl	80034a0 <LL_RCC_GetAHBPrescaler>
 80039d8:	4603      	mov	r3, r0
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <RCC_GetHCLKClockFreq+0x28>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	40d3      	lsrs	r3, r2
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	08006268 	.word	0x08006268

080039f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a00:	f7ff fd5c 	bl	80034bc <LL_RCC_GetAPB1Prescaler>
 8003a04:	4603      	mov	r3, r0
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <RCC_GetPCLK1ClockFreq+0x24>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	40d3      	lsrs	r3, r2
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08006278 	.word	0x08006278

08003a20 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a28:	f7ff fd56 	bl	80034d8 <LL_RCC_GetAPB2Prescaler>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	0adb      	lsrs	r3, r3, #11
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <RCC_GetPCLK2ClockFreq+0x24>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	40d3      	lsrs	r3, r2
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	08006278 	.word	0x08006278

08003a48 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a4e:	f7ff fd79 	bl	8003544 <LL_RCC_PLL_GetMainSource>
 8003a52:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d036      	beq.n	8003ac8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d836      	bhi.n	8003ace <RCC_PLL_GetFreqDomain_SYS+0x86>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d003      	beq.n	8003a6e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d02a      	beq.n	8003ac2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8003a6c:	e02f      	b.n	8003ace <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003a6e:	f7ff fcdb 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d111      	bne.n	8003a9c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003a78:	f7ff fcd6 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8003a82:	f7ff fce3 	bl	800344c <LL_RCC_MSI_GetRange>
 8003a86:	4603      	mov	r3, r0
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	e003      	b.n	8003a94 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003a8c:	f7ff fcec 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 8003a90:	4603      	mov	r3, r0
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	4a2f      	ldr	r2, [pc, #188]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9a:	e010      	b.n	8003abe <RCC_PLL_GetFreqDomain_SYS+0x76>
 8003a9c:	f7ff fcc4 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d004      	beq.n	8003ab0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8003aa6:	f7ff fcd1 	bl	800344c <LL_RCC_MSI_GetRange>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	e003      	b.n	8003ab8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8003ab0:	f7ff fcda 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003ac0:	e02f      	b.n	8003b22 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8003ac4:	607b      	str	r3, [r7, #4]
      break;
 8003ac6:	e02c      	b.n	8003b22 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8003aca:	607b      	str	r3, [r7, #4]
      break;
 8003acc:	e029      	b.n	8003b22 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003ace:	f7ff fcab 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d111      	bne.n	8003afc <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8003ad8:	f7ff fca6 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8003ae2:	f7ff fcb3 	bl	800344c <LL_RCC_MSI_GetRange>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	e003      	b.n	8003af4 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8003aec:	f7ff fcbc 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 8003af0:	4603      	mov	r3, r0
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afa:	e010      	b.n	8003b1e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8003afc:	f7ff fc94 	bl	8003428 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8003b06:	f7ff fca1 	bl	800344c <LL_RCC_MSI_GetRange>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	e003      	b.n	8003b18 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8003b10:	f7ff fcaa 	bl	8003468 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b14:	4603      	mov	r3, r0
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003b20:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003b22:	f7ff fd39 	bl	8003598 <LL_RCC_PLL_GetDivider>
 8003b26:	4603      	mov	r3, r0
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	fbb2 f4f3 	udiv	r4, r2, r3
 8003b32:	f7ff fd15 	bl	8003560 <LL_RCC_PLL_GetN>
 8003b36:	4603      	mov	r3, r0
 8003b38:	fb03 f404 	mul.w	r4, r3, r4
 8003b3c:	f7ff fd1e 	bl	800357c <LL_RCC_PLL_GetR>
 8003b40:	4603      	mov	r3, r0
 8003b42:	0e5b      	lsrs	r3, r3, #25
 8003b44:	3301      	adds	r3, #1
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}
 8003b54:	08006280 	.word	0x08006280
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <LL_USART_IsEnabled>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <LL_USART_IsEnabled+0x18>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_USART_IsEnabled+0x1a>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_USART_SetStopBitsLength>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	605a      	str	r2, [r3, #4]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_USART_SetHWFlowCtrl>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_USART_SetBaudRate>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be6:	d11a      	bne.n	8003c1e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	005a      	lsls	r2, r3, #1
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	441a      	add	r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	60da      	str	r2, [r3, #12]
}
 8003c1c:	e00a      	b.n	8003c34 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	085a      	lsrs	r2, r3, #1
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	441a      	add	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	60da      	str	r2, [r3, #12]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ff84 	bl	8003b60 <LL_USART_IsEnabled>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d15b      	bne.n	8003d16 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <LL_USART_Init+0xe0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	6851      	ldr	r1, [r2, #4]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	6912      	ldr	r2, [r2, #16]
 8003c74:	4311      	orrs	r1, r2
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	6992      	ldr	r2, [r2, #24]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff7c 	bl	8003b86 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff89 	bl	8003bac <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <LL_USART_Init+0xe4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d104      	bne.n	8003cac <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003ca2:	2003      	movs	r0, #3
 8003ca4:	f7ff fc86 	bl	80035b4 <LL_RCC_GetUSARTClockFreq>
 8003ca8:	60b8      	str	r0, [r7, #8]
 8003caa:	e023      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <LL_USART_Init+0xe8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d104      	bne.n	8003cbe <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003cb4:	200c      	movs	r0, #12
 8003cb6:	f7ff fc7d 	bl	80035b4 <LL_RCC_GetUSARTClockFreq>
 8003cba:	60b8      	str	r0, [r7, #8]
 8003cbc:	e01a      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <LL_USART_Init+0xec>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d104      	bne.n	8003cd0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003cc6:	2030      	movs	r0, #48	; 0x30
 8003cc8:	f7ff fc74 	bl	80035b4 <LL_RCC_GetUSARTClockFreq>
 8003ccc:	60b8      	str	r0, [r7, #8]
 8003cce:	e011      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <LL_USART_Init+0xf0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d104      	bne.n	8003ce2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003cd8:	20c0      	movs	r0, #192	; 0xc0
 8003cda:	f7ff fd4f 	bl	800377c <LL_RCC_GetUARTClockFreq>
 8003cde:	60b8      	str	r0, [r7, #8]
 8003ce0:	e008      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <LL_USART_Init+0xf4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d104      	bne.n	8003cf4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003cea:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003cee:	f7ff fd45 	bl	800377c <LL_RCC_GetUARTClockFreq>
 8003cf2:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff5e 	bl	8003bd2 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	efff69f3 	.word	0xefff69f3
 8003d24:	40013800 	.word	0x40013800
 8003d28:	40004400 	.word	0x40004400
 8003d2c:	40004800 	.word	0x40004800
 8003d30:	40004c00 	.word	0x40004c00
 8003d34:	40005000 	.word	0x40005000

08003d38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d4a:	2b84      	cmp	r3, #132	; 0x84
 8003d4c:	d005      	beq.n	8003d5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	3303      	adds	r3, #3
 8003d58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d6c:	f000 fff8 	bl	8004d60 <vTaskStartScheduler>
  
  return osOK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d78:	b089      	sub	sp, #36	; 0x24
 8003d7a:	af04      	add	r7, sp, #16
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <osThreadCreate+0x54>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01c      	beq.n	8003dca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685c      	ldr	r4, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681d      	ldr	r5, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691e      	ldr	r6, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ffc8 	bl	8003d38 <makeFreeRtosPriority>
 8003da8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db2:	9202      	str	r2, [sp, #8]
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	9100      	str	r1, [sp, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4632      	mov	r2, r6
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f000 fdec 	bl	800499c <xTaskCreateStatic>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	e01c      	b.n	8003e04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685c      	ldr	r4, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dd6:	b29e      	uxth	r6, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff ffaa 	bl	8003d38 <makeFreeRtosPriority>
 8003de4:	4602      	mov	r2, r0
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	9200      	str	r2, [sp, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	4632      	mov	r2, r6
 8003df2:	4629      	mov	r1, r5
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 fe2e 	bl	8004a56 <xTaskCreate>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <osDelay+0x16>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	e000      	b.n	8003e26 <osDelay+0x18>
 8003e24:	2301      	movs	r3, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 ff66 	bl	8004cf8 <vTaskDelay>
  
  return osOK;
 8003e2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f103 0208 	add.w	r2, r3, #8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f103 0208 	add.w	r2, r3, #8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f103 0208 	add.w	r2, r3, #8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	601a      	str	r2, [r3, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eee:	d103      	bne.n	8003ef8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e00c      	b.n	8003f12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3308      	adds	r3, #8
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e002      	b.n	8003f06 <vListInsert+0x2e>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d2f6      	bcs.n	8003f00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6892      	ldr	r2, [r2, #8]
 8003f60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6852      	ldr	r2, [r2, #4]
 8003f6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d103      	bne.n	8003f7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fca:	f001 fd13 	bl	80059f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	22ff      	movs	r2, #255	; 0xff
 800400e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	22ff      	movs	r2, #255	; 0xff
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d114      	bne.n	800404a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3310      	adds	r3, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f001 f8e9 	bl	8005204 <xTaskRemoveFromEventList>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d012      	beq.n	800405e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <xQueueGenericReset+0xcc>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	e009      	b.n	800405e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3310      	adds	r3, #16
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fef1 	bl	8003e36 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff feec 	bl	8003e36 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800405e:	f001 fcf9 	bl	8005a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004062:	2301      	movs	r3, #1
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	613b      	str	r3, [r7, #16]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3348      	adds	r3, #72	; 0x48
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fdc5 	bl	8005c38 <pvPortMalloc>
 80040ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d011      	beq.n	80040da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	3348      	adds	r3, #72	; 0x48
 80040be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040c8:	79fa      	ldrb	r2, [r7, #7]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f805 	bl	80040e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040da:	69bb      	ldr	r3, [r7, #24]
	}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e002      	b.n	8004106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004112:	2101      	movs	r1, #1
 8004114:	69b8      	ldr	r0, [r7, #24]
 8004116:	f7ff ff43 	bl	8003fa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004142:	2300      	movs	r3, #0
 8004144:	2200      	movs	r2, #0
 8004146:	2100      	movs	r1, #0
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f81d 	bl	8004188 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004160:	2301      	movs	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	461a      	mov	r2, r3
 800416c:	6939      	ldr	r1, [r7, #16]
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f7ff ff7e 	bl	8004070 <xQueueGenericCreate>
 8004174:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ffd3 	bl	8004122 <prvInitialiseMutex>

		return xNewQueue;
 800417c:	68fb      	ldr	r3, [r7, #12]
	}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08e      	sub	sp, #56	; 0x38
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004196:	2300      	movs	r3, #0
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueGenericSend+0x32>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d103      	bne.n	80041c8 <xQueueGenericSend+0x40>
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <xQueueGenericSend+0x44>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <xQueueGenericSend+0x46>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <xQueueGenericSend+0x60>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d103      	bne.n	80041f6 <xQueueGenericSend+0x6e>
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <xQueueGenericSend+0x72>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <xQueueGenericSend+0x74>
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xQueueGenericSend+0x8e>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	623b      	str	r3, [r7, #32]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004216:	f001 f9b5 	bl	8005584 <xTaskGetSchedulerState>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <xQueueGenericSend+0x9e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <xQueueGenericSend+0xa2>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <xQueueGenericSend+0xa4>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xQueueGenericSend+0xbe>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	61fb      	str	r3, [r7, #28]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004246:	f001 fbd5 	bl	80059f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	429a      	cmp	r2, r3
 8004254:	d302      	bcc.n	800425c <xQueueGenericSend+0xd4>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d129      	bne.n	80042b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004262:	f000 fa8b 	bl	800477c <prvCopyDataToQueue>
 8004266:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	3324      	adds	r3, #36	; 0x24
 8004274:	4618      	mov	r0, r3
 8004276:	f000 ffc5 	bl	8005204 <xTaskRemoveFromEventList>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d013      	beq.n	80042a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004280:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <xQueueGenericSend+0x1f8>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	e00a      	b.n	80042a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004298:	4b39      	ldr	r3, [pc, #228]	; (8004380 <xQueueGenericSend+0x1f8>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042a8:	f001 fbd4 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e063      	b.n	8004378 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042b6:	f001 fbcd 	bl	8005a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e05c      	b.n	8004378 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fffd 	bl	80052c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ce:	2301      	movs	r3, #1
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042d2:	f001 fbbf 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042d6:	f000 fdad 	bl	8004e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042da:	f001 fb8b 	bl	80059f4 <vPortEnterCritical>
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042e4:	b25b      	sxtb	r3, r3
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ea:	d103      	bne.n	80042f4 <xQueueGenericSend+0x16c>
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004300:	d103      	bne.n	800430a <xQueueGenericSend+0x182>
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800430a:	f001 fba3 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800430e:	1d3a      	adds	r2, r7, #4
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	4611      	mov	r1, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 ffec 	bl	80052f4 <xTaskCheckForTimeOut>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d124      	bne.n	800436c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004324:	f000 fb22 	bl	800496c <prvIsQueueFull>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d018      	beq.n	8004360 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	3310      	adds	r3, #16
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f000 ff40 	bl	80051bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800433c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433e:	f000 faad 	bl	800489c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004342:	f000 fd85 	bl	8004e50 <xTaskResumeAll>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f af7c 	bne.w	8004246 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <xQueueGenericSend+0x1f8>)
 8004350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	e772      	b.n	8004246 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004362:	f000 fa9b 	bl	800489c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004366:	f000 fd73 	bl	8004e50 <xTaskResumeAll>
 800436a:	e76c      	b.n	8004246 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800436c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800436e:	f000 fa95 	bl	800489c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004372:	f000 fd6d 	bl	8004e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004376:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004378:	4618      	mov	r0, r3
 800437a:	3738      	adds	r7, #56	; 0x38
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b090      	sub	sp, #64	; 0x40
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d103      	bne.n	80043c0 <xQueueGenericSendFromISR+0x3c>
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <xQueueGenericSendFromISR+0x40>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <xQueueGenericSendFromISR+0x42>
 80043c4:	2300      	movs	r3, #0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d103      	bne.n	80043ee <xQueueGenericSendFromISR+0x6a>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <xQueueGenericSendFromISR+0x6e>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <xQueueGenericSendFromISR+0x70>
 80043f2:	2300      	movs	r3, #0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	623b      	str	r3, [r7, #32]
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800440e:	f001 fbd3 	bl	8005bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004412:	f3ef 8211 	mrs	r2, BASEPRI
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	61fa      	str	r2, [r7, #28]
 8004428:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800442a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800442c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <xQueueGenericSendFromISR+0xbc>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d12f      	bne.n	80044a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004456:	f000 f991 	bl	800477c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800445a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004462:	d112      	bne.n	800448a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d016      	beq.n	800449a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	3324      	adds	r3, #36	; 0x24
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fec7 	bl	8005204 <xTaskRemoveFromEventList>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00e      	beq.n	800449a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e007      	b.n	800449a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800448a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800448e:	3301      	adds	r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	b25a      	sxtb	r2, r3
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800449a:	2301      	movs	r3, #1
 800449c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800449e:	e001      	b.n	80044a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3740      	adds	r7, #64	; 0x40
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08c      	sub	sp, #48	; 0x30
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <xQueueReceive+0x30>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	623b      	str	r3, [r7, #32]
}
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <xQueueReceive+0x3e>
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <xQueueReceive+0x42>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <xQueueReceive+0x44>
 80044fe:	2300      	movs	r3, #0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xQueueReceive+0x5e>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	61fb      	str	r3, [r7, #28]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800451a:	f001 f833 	bl	8005584 <xTaskGetSchedulerState>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <xQueueReceive+0x6e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <xQueueReceive+0x72>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueReceive+0x74>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xQueueReceive+0x8e>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61bb      	str	r3, [r7, #24]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800454a:	f001 fa53 	bl	80059f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01f      	beq.n	800459a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800455e:	f000 f977 	bl	8004850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	3310      	adds	r3, #16
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fe44 	bl	8005204 <xTaskRemoveFromEventList>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004582:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <xQueueReceive+0x1bc>)
 8004584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004592:	f001 fa5f 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8004596:	2301      	movs	r3, #1
 8004598:	e069      	b.n	800466e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045a0:	f001 fa58 	bl	8005a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e062      	b.n	800466e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045ae:	f107 0310 	add.w	r3, r7, #16
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fe88 	bl	80052c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045bc:	f001 fa4a 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045c0:	f000 fc38 	bl	8004e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045c4:	f001 fa16 	bl	80059f4 <vPortEnterCritical>
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ce:	b25b      	sxtb	r3, r3
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d4:	d103      	bne.n	80045de <xQueueReceive+0x122>
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e4:	b25b      	sxtb	r3, r3
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ea:	d103      	bne.n	80045f4 <xQueueReceive+0x138>
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f4:	f001 fa2e 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f8:	1d3a      	adds	r2, r7, #4
 80045fa:	f107 0310 	add.w	r3, r7, #16
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fe77 	bl	80052f4 <xTaskCheckForTimeOut>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d123      	bne.n	8004654 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800460c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460e:	f000 f997 	bl	8004940 <prvIsQueueEmpty>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d017      	beq.n	8004648 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fdcb 	bl	80051bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004628:	f000 f938 	bl	800489c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800462c:	f000 fc10 	bl	8004e50 <xTaskResumeAll>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d189      	bne.n	800454a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <xQueueReceive+0x1bc>)
 8004638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	e780      	b.n	800454a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464a:	f000 f927 	bl	800489c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800464e:	f000 fbff 	bl	8004e50 <xTaskResumeAll>
 8004652:	e77a      	b.n	800454a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004656:	f000 f921 	bl	800489c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800465a:	f000 fbf9 	bl	8004e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800465e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004660:	f000 f96e 	bl	8004940 <prvIsQueueEmpty>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	f43f af6f 	beq.w	800454a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800466c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800466e:	4618      	mov	r0, r3
 8004670:	3730      	adds	r7, #48	; 0x30
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	; 0x38
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	623b      	str	r3, [r7, #32]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <xQueueReceiveFromISR+0x3a>
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <xQueueReceiveFromISR+0x3e>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <xQueueReceiveFromISR+0x40>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	61fb      	str	r3, [r7, #28]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046d6:	f001 fa6f 	bl	8005bb8 <vPortValidateInterruptPriority>
	__asm volatile
 80046da:	f3ef 8211 	mrs	r2, BASEPRI
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	61ba      	str	r2, [r7, #24]
 80046f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d02f      	beq.n	8004762 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004710:	f000 f89e 	bl	8004850 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	1e5a      	subs	r2, r3, #1
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800471c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004724:	d112      	bne.n	800474c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	3310      	adds	r3, #16
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fd66 	bl	8005204 <xTaskRemoveFromEventList>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00e      	beq.n	800475c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e007      	b.n	800475c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800474c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004750:	3301      	adds	r3, #1
 8004752:	b2db      	uxtb	r3, r3
 8004754:	b25a      	sxtb	r2, r3
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800475c:	2301      	movs	r3, #1
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
 8004760:	e001      	b.n	8004766 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004762:	2300      	movs	r3, #0
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	613b      	str	r3, [r7, #16]
	__asm volatile
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f383 8811 	msr	BASEPRI, r3
}
 8004770:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004774:	4618      	mov	r0, r3
 8004776:	3738      	adds	r7, #56	; 0x38
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10d      	bne.n	80047b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d14d      	bne.n	800483e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 ff0a 	bl	80055c0 <xTaskPriorityDisinherit>
 80047ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	e043      	b.n	800483e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d119      	bne.n	80047f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6858      	ldr	r0, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	461a      	mov	r2, r3
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	f001 fc46 	bl	8006058 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	441a      	add	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d32b      	bcc.n	800483e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	e026      	b.n	800483e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68d8      	ldr	r0, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	461a      	mov	r2, r3
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	f001 fc2c 	bl	8006058 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	425b      	negs	r3, r3
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d207      	bcs.n	800482c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	425b      	negs	r3, r3
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d105      	bne.n	800483e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	3b01      	subs	r3, #1
 800483c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004846:	697b      	ldr	r3, [r7, #20]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d018      	beq.n	8004894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	441a      	add	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	d303      	bcc.n	8004884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68d9      	ldr	r1, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	461a      	mov	r2, r3
 800488e:	6838      	ldr	r0, [r7, #0]
 8004890:	f001 fbe2 	bl	8006058 <memcpy>
	}
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048a4:	f001 f8a6 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048b0:	e011      	b.n	80048d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d012      	beq.n	80048e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3324      	adds	r3, #36	; 0x24
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fca0 	bl	8005204 <xTaskRemoveFromEventList>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048ca:	f000 fd75 	bl	80053b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	dce9      	bgt.n	80048b2 <prvUnlockQueue+0x16>
 80048de:	e000      	b.n	80048e2 <prvUnlockQueue+0x46>
					break;
 80048e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048ea:	f001 f8b3 	bl	8005a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048ee:	f001 f881 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048fa:	e011      	b.n	8004920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3310      	adds	r3, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fc7b 	bl	8005204 <xTaskRemoveFromEventList>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004914:	f000 fd50 	bl	80053b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004918:	7bbb      	ldrb	r3, [r7, #14]
 800491a:	3b01      	subs	r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004924:	2b00      	cmp	r3, #0
 8004926:	dce9      	bgt.n	80048fc <prvUnlockQueue+0x60>
 8004928:	e000      	b.n	800492c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800492a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	22ff      	movs	r2, #255	; 0xff
 8004930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004934:	f001 f88e 	bl	8005a54 <vPortExitCritical>
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004948:	f001 f854 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e001      	b.n	800495e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800495e:	f001 f879 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004962:	68fb      	ldr	r3, [r7, #12]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004974:	f001 f83e 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	429a      	cmp	r2, r3
 8004982:	d102      	bne.n	800498a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e001      	b.n	800498e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800498e:	f001 f861 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08e      	sub	sp, #56	; 0x38
 80049a0:	af04      	add	r7, sp, #16
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	61fb      	str	r3, [r7, #28]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049e2:	23b8      	movs	r3, #184	; 0xb8
 80049e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2bb8      	cmp	r3, #184	; 0xb8
 80049ea:	d00a      	beq.n	8004a02 <xTaskCreateStatic+0x66>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	61bb      	str	r3, [r7, #24]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01e      	beq.n	8004a48 <xTaskCreateStatic+0xac>
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a22:	2300      	movs	r3, #0
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f850 	bl	8004ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a42:	f000 f8ef 	bl	8004c24 <prvAddNewTaskToReadyList>
 8004a46:	e001      	b.n	8004a4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a4c:	697b      	ldr	r3, [r7, #20]
	}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b08c      	sub	sp, #48	; 0x30
 8004a5a:	af04      	add	r7, sp, #16
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 f8e4 	bl	8005c38 <pvPortMalloc>
 8004a70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00e      	beq.n	8004a96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a78:	20b8      	movs	r0, #184	; 0xb8
 8004a7a:	f001 f8dd 	bl	8005c38 <pvPortMalloc>
 8004a7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8c:	e005      	b.n	8004a9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f001 f99e 	bl	8005dd0 <vPortFree>
 8004a94:	e001      	b.n	8004a9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d017      	beq.n	8004ad0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9303      	str	r3, [sp, #12]
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f80e 	bl	8004ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ac4:	69f8      	ldr	r0, [r7, #28]
 8004ac6:	f000 f8ad 	bl	8004c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	e002      	b.n	8004ad6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ad4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004af8:	3b01      	subs	r3, #1
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	617b      	str	r3, [r7, #20]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01f      	beq.n	8004b6e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	e012      	b.n	8004b5a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	7819      	ldrb	r1, [r3, #0]
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	4413      	add	r3, r2
 8004b42:	3334      	adds	r3, #52	; 0x34
 8004b44:	460a      	mov	r2, r1
 8004b46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	3301      	adds	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2b0f      	cmp	r3, #15
 8004b5e:	d9e9      	bls.n	8004b34 <prvInitialiseNewTask+0x54>
 8004b60:	e000      	b.n	8004b64 <prvInitialiseNewTask+0x84>
			{
				break;
 8004b62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b6c:	e003      	b.n	8004b76 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d901      	bls.n	8004b80 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b7c:	2306      	movs	r3, #6
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	2200      	movs	r2, #0
 8004b90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	3304      	adds	r3, #4
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff f96d 	bl	8003e76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff f968 	bl	8003e76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	f1c3 0207 	rsb	r2, r3, #7
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	3350      	adds	r3, #80	; 0x50
 8004bd6:	2260      	movs	r2, #96	; 0x60
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fa4a 	bl	8006074 <memset>
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <prvInitialiseNewTask+0x138>)
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	4a0c      	ldr	r2, [pc, #48]	; (8004c1c <prvInitialiseNewTask+0x13c>)
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <prvInitialiseNewTask+0x140>)
 8004bf0:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	69b8      	ldr	r0, [r7, #24]
 8004bf8:	f000 fdce 	bl	8005798 <pxPortInitialiseStack>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c0e:	bf00      	nop
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	080062d0 	.word	0x080062d0
 8004c1c:	080062f0 	.word	0x080062f0
 8004c20:	080062b0 	.word	0x080062b0

08004c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c2c:	f000 fee2 	bl	80059f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <prvAddNewTaskToReadyList+0xb8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	4a29      	ldr	r2, [pc, #164]	; (8004cdc <prvAddNewTaskToReadyList+0xb8>)
 8004c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <prvAddNewTaskToReadyList+0xbc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <prvAddNewTaskToReadyList+0xbc>)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <prvAddNewTaskToReadyList+0xb8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d110      	bne.n	8004c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c50:	f000 fbd6 	bl	8005400 <prvInitialiseTaskLists>
 8004c54:	e00d      	b.n	8004c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <prvAddNewTaskToReadyList+0xc0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <prvAddNewTaskToReadyList+0xbc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d802      	bhi.n	8004c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <prvAddNewTaskToReadyList+0xbc>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <prvAddNewTaskToReadyList+0xc4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <prvAddNewTaskToReadyList+0xc4>)
 8004c7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	2201      	movs	r2, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <prvAddNewTaskToReadyList+0xc8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <prvAddNewTaskToReadyList+0xc8>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <prvAddNewTaskToReadyList+0xcc>)
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7ff f8f3 	bl	8003e90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004caa:	f000 fed3 	bl	8005a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <prvAddNewTaskToReadyList+0xc0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00e      	beq.n	8004cd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <prvAddNewTaskToReadyList+0xbc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d207      	bcs.n	8004cd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <prvAddNewTaskToReadyList+0xd0>)
 8004cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000450 	.word	0x20000450
 8004ce0:	20000350 	.word	0x20000350
 8004ce4:	2000045c 	.word	0x2000045c
 8004ce8:	2000046c 	.word	0x2000046c
 8004cec:	20000458 	.word	0x20000458
 8004cf0:	20000354 	.word	0x20000354
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <vTaskDelay+0x60>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <vTaskDelay+0x30>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60bb      	str	r3, [r7, #8]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d28:	f000 f884 	bl	8004e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fccc 	bl	80056cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d34:	f000 f88c 	bl	8004e50 <xTaskResumeAll>
 8004d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <vTaskDelay+0x64>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000478 	.word	0x20000478
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d6e:	463a      	mov	r2, r7
 8004d70:	1d39      	adds	r1, r7, #4
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fa2a 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	9202      	str	r2, [sp, #8]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	4921      	ldr	r1, [pc, #132]	; (8004e14 <vTaskStartScheduler+0xb4>)
 8004d90:	4821      	ldr	r0, [pc, #132]	; (8004e18 <vTaskStartScheduler+0xb8>)
 8004d92:	f7ff fe03 	bl	800499c <xTaskCreateStatic>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <vTaskStartScheduler+0xbc>)
 8004d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d9c:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <vTaskStartScheduler+0xbc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e001      	b.n	8004dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d11b      	bne.n	8004dec <vTaskStartScheduler+0x8c>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	613b      	str	r3, [r7, #16]
}
 8004dc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <vTaskStartScheduler+0xc0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3350      	adds	r3, #80	; 0x50
 8004dce:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <vTaskStartScheduler+0xc4>)
 8004dd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <vTaskStartScheduler+0xc8>)
 8004dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <vTaskStartScheduler+0xcc>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <vTaskStartScheduler+0xd0>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004de6:	f000 fd63 	bl	80058b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dea:	e00e      	b.n	8004e0a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df2:	d10a      	bne.n	8004e0a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	60fb      	str	r3, [r7, #12]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <vTaskStartScheduler+0xa8>
}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	08006260 	.word	0x08006260
 8004e18:	080053d1 	.word	0x080053d1
 8004e1c:	20000474 	.word	0x20000474
 8004e20:	20000350 	.word	0x20000350
 8004e24:	20000010 	.word	0x20000010
 8004e28:	20000470 	.word	0x20000470
 8004e2c:	2000045c 	.word	0x2000045c
 8004e30:	20000454 	.word	0x20000454

08004e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <vTaskSuspendAll+0x18>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	4a03      	ldr	r2, [pc, #12]	; (8004e4c <vTaskSuspendAll+0x18>)
 8004e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000478 	.word	0x20000478

08004e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e5e:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <xTaskResumeAll+0x114>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	603b      	str	r3, [r7, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e7c:	f000 fdba 	bl	80059f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e80:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <xTaskResumeAll+0x114>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	4a37      	ldr	r2, [pc, #220]	; (8004f64 <xTaskResumeAll+0x114>)
 8004e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e8a:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <xTaskResumeAll+0x114>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d161      	bne.n	8004f56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e92:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <xTaskResumeAll+0x118>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d05d      	beq.n	8004f56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e9a:	e02e      	b.n	8004efa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e9c:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <xTaskResumeAll+0x11c>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3318      	adds	r3, #24
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff f84e 	bl	8003f4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff f849 	bl	8003f4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <xTaskResumeAll+0x120>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <xTaskResumeAll+0x120>)
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4a27      	ldr	r2, [pc, #156]	; (8004f74 <xTaskResumeAll+0x124>)
 8004ed8:	441a      	add	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fe ffd5 	bl	8003e90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	4b23      	ldr	r3, [pc, #140]	; (8004f78 <xTaskResumeAll+0x128>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <xTaskResumeAll+0x12c>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004efa:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <xTaskResumeAll+0x11c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1cc      	bne.n	8004e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f08:	f000 fb1c 	bl	8005544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <xTaskResumeAll+0x130>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d010      	beq.n	8004f3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f18:	f000 f836 	bl	8004f88 <xTaskIncrementTick>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <xTaskResumeAll+0x12c>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f1      	bne.n	8004f18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004f34:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <xTaskResumeAll+0x130>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <xTaskResumeAll+0x12c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xTaskResumeAll+0x134>)
 8004f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f56:	f000 fd7d 	bl	8005a54 <vPortExitCritical>

	return xAlreadyYielded;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000478 	.word	0x20000478
 8004f68:	20000450 	.word	0x20000450
 8004f6c:	20000410 	.word	0x20000410
 8004f70:	20000458 	.word	0x20000458
 8004f74:	20000354 	.word	0x20000354
 8004f78:	20000350 	.word	0x20000350
 8004f7c:	20000464 	.word	0x20000464
 8004f80:	20000460 	.word	0x20000460
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f92:	4b4e      	ldr	r3, [pc, #312]	; (80050cc <xTaskIncrementTick+0x144>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 808e 	bne.w	80050b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <xTaskIncrementTick+0x148>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fa4:	4a4a      	ldr	r2, [pc, #296]	; (80050d0 <xTaskIncrementTick+0x148>)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d120      	bne.n	8004ff2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fb0:	4b48      	ldr	r3, [pc, #288]	; (80050d4 <xTaskIncrementTick+0x14c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	603b      	str	r3, [r7, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <xTaskIncrementTick+0x46>
 8004fd0:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <xTaskIncrementTick+0x14c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	4b40      	ldr	r3, [pc, #256]	; (80050d8 <xTaskIncrementTick+0x150>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3e      	ldr	r2, [pc, #248]	; (80050d4 <xTaskIncrementTick+0x14c>)
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4a3e      	ldr	r2, [pc, #248]	; (80050d8 <xTaskIncrementTick+0x150>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <xTaskIncrementTick+0x154>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	4a3c      	ldr	r2, [pc, #240]	; (80050dc <xTaskIncrementTick+0x154>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	f000 faa9 	bl	8005544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ff2:	4b3b      	ldr	r3, [pc, #236]	; (80050e0 <xTaskIncrementTick+0x158>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d348      	bcc.n	800508e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ffc:	4b35      	ldr	r3, [pc, #212]	; (80050d4 <xTaskIncrementTick+0x14c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005006:	4b36      	ldr	r3, [pc, #216]	; (80050e0 <xTaskIncrementTick+0x158>)
 8005008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800500c:	601a      	str	r2, [r3, #0]
					break;
 800500e:	e03e      	b.n	800508e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <xTaskIncrementTick+0x14c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d203      	bcs.n	8005030 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005028:	4a2d      	ldr	r2, [pc, #180]	; (80050e0 <xTaskIncrementTick+0x158>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800502e:	e02e      	b.n	800508e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe ff88 	bl	8003f4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	3318      	adds	r3, #24
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe ff7f 	bl	8003f4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	2201      	movs	r2, #1
 8005052:	409a      	lsls	r2, r3
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <xTaskIncrementTick+0x15c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4313      	orrs	r3, r2
 800505a:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <xTaskIncrementTick+0x15c>)
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4a1f      	ldr	r2, [pc, #124]	; (80050e8 <xTaskIncrementTick+0x160>)
 800506c:	441a      	add	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3304      	adds	r3, #4
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7fe ff0b 	bl	8003e90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507e:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <xTaskIncrementTick+0x164>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	429a      	cmp	r2, r3
 8005086:	d3b9      	bcc.n	8004ffc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800508c:	e7b6      	b.n	8004ffc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <xTaskIncrementTick+0x164>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4914      	ldr	r1, [pc, #80]	; (80050e8 <xTaskIncrementTick+0x160>)
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d901      	bls.n	80050aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <xTaskIncrementTick+0x168>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e004      	b.n	80050c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050b8:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <xTaskIncrementTick+0x16c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <xTaskIncrementTick+0x16c>)
 80050c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050c2:	697b      	ldr	r3, [r7, #20]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000478 	.word	0x20000478
 80050d0:	20000454 	.word	0x20000454
 80050d4:	20000408 	.word	0x20000408
 80050d8:	2000040c 	.word	0x2000040c
 80050dc:	20000468 	.word	0x20000468
 80050e0:	20000470 	.word	0x20000470
 80050e4:	20000458 	.word	0x20000458
 80050e8:	20000354 	.word	0x20000354
 80050ec:	20000350 	.word	0x20000350
 80050f0:	20000464 	.word	0x20000464
 80050f4:	20000460 	.word	0x20000460

080050f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050fe:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <vTaskSwitchContext+0xac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005106:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <vTaskSwitchContext+0xb0>)
 8005108:	2201      	movs	r2, #1
 800510a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800510c:	e044      	b.n	8005198 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800510e:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <vTaskSwitchContext+0xb0>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <vTaskSwitchContext+0xb4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	fab3 f383 	clz	r3, r3
 8005120:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005122:	7afb      	ldrb	r3, [r7, #11]
 8005124:	f1c3 031f 	rsb	r3, r3, #31
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	4921      	ldr	r1, [pc, #132]	; (80051b0 <vTaskSwitchContext+0xb8>)
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vTaskSwitchContext+0x5c>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vTaskSwitchContext+0x5a>
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <vTaskSwitchContext+0xb8>)
 8005160:	4413      	add	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3308      	adds	r3, #8
 8005176:	429a      	cmp	r2, r3
 8005178:	d104      	bne.n	8005184 <vTaskSwitchContext+0x8c>
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <vTaskSwitchContext+0xbc>)
 800518c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <vTaskSwitchContext+0xbc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3350      	adds	r3, #80	; 0x50
 8005194:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <vTaskSwitchContext+0xc0>)
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	20000478 	.word	0x20000478
 80051a8:	20000464 	.word	0x20000464
 80051ac:	20000458 	.word	0x20000458
 80051b0:	20000354 	.word	0x20000354
 80051b4:	20000350 	.word	0x20000350
 80051b8:	20000010 	.word	0x20000010

080051bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60fb      	str	r3, [r7, #12]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <vTaskPlaceOnEventList+0x44>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3318      	adds	r3, #24
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fe fe74 	bl	8003ed8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051f0:	2101      	movs	r1, #1
 80051f2:	6838      	ldr	r0, [r7, #0]
 80051f4:	f000 fa6a 	bl	80056cc <prvAddCurrentTaskToDelayedList>
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000350 	.word	0x20000350

08005204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	60fb      	str	r3, [r7, #12]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3318      	adds	r3, #24
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe fe88 	bl	8003f4a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <xTaskRemoveFromEventList+0xac>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11c      	bne.n	800527c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3304      	adds	r3, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fe7f 	bl	8003f4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	2201      	movs	r2, #1
 8005252:	409a      	lsls	r2, r3
 8005254:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <xTaskRemoveFromEventList+0xb0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4313      	orrs	r3, r2
 800525a:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <xTaskRemoveFromEventList+0xb0>)
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <xTaskRemoveFromEventList+0xb4>)
 800526c:	441a      	add	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3304      	adds	r3, #4
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f7fe fe0b 	bl	8003e90 <vListInsertEnd>
 800527a:	e005      	b.n	8005288 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3318      	adds	r3, #24
 8005280:	4619      	mov	r1, r3
 8005282:	480e      	ldr	r0, [pc, #56]	; (80052bc <xTaskRemoveFromEventList+0xb8>)
 8005284:	f7fe fe04 	bl	8003e90 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <xTaskRemoveFromEventList+0xbc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d905      	bls.n	80052a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005296:	2301      	movs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <xTaskRemoveFromEventList+0xc0>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e001      	b.n	80052a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052a6:	697b      	ldr	r3, [r7, #20]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20000478 	.word	0x20000478
 80052b4:	20000458 	.word	0x20000458
 80052b8:	20000354 	.word	0x20000354
 80052bc:	20000410 	.word	0x20000410
 80052c0:	20000350 	.word	0x20000350
 80052c4:	20000464 	.word	0x20000464

080052c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <vTaskInternalSetTimeOutState+0x24>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <vTaskInternalSetTimeOutState+0x28>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	20000468 	.word	0x20000468
 80052f0:	20000454 	.word	0x20000454

080052f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	613b      	str	r3, [r7, #16]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005336:	f000 fb5d 	bl	80059f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800533a:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <xTaskCheckForTimeOut+0xbc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005352:	d102      	bne.n	800535a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e023      	b.n	80053a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <xTaskCheckForTimeOut+0xc0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d007      	beq.n	8005376 <xTaskCheckForTimeOut+0x82>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	e015      	b.n	80053a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	429a      	cmp	r2, r3
 800537e:	d20b      	bcs.n	8005398 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ff9b 	bl	80052c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	e004      	b.n	80053a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053a2:	f000 fb57 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 80053a6:	69fb      	ldr	r3, [r7, #28]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000454 	.word	0x20000454
 80053b4:	20000468 	.word	0x20000468

080053b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053bc:	4b03      	ldr	r3, [pc, #12]	; (80053cc <vTaskMissedYield+0x14>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20000464 	.word	0x20000464

080053d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053d8:	f000 f852 	bl	8005480 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <prvIdleTask+0x28>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d9f9      	bls.n	80053d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <prvIdleTask+0x2c>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053f4:	e7f0      	b.n	80053d8 <prvIdleTask+0x8>
 80053f6:	bf00      	nop
 80053f8:	20000354 	.word	0x20000354
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	e00c      	b.n	8005426 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4a12      	ldr	r2, [pc, #72]	; (8005460 <prvInitialiseTaskLists+0x60>)
 8005418:	4413      	add	r3, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fd0b 	bl	8003e36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3301      	adds	r3, #1
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b06      	cmp	r3, #6
 800542a:	d9ef      	bls.n	800540c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800542c:	480d      	ldr	r0, [pc, #52]	; (8005464 <prvInitialiseTaskLists+0x64>)
 800542e:	f7fe fd02 	bl	8003e36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005432:	480d      	ldr	r0, [pc, #52]	; (8005468 <prvInitialiseTaskLists+0x68>)
 8005434:	f7fe fcff 	bl	8003e36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005438:	480c      	ldr	r0, [pc, #48]	; (800546c <prvInitialiseTaskLists+0x6c>)
 800543a:	f7fe fcfc 	bl	8003e36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800543e:	480c      	ldr	r0, [pc, #48]	; (8005470 <prvInitialiseTaskLists+0x70>)
 8005440:	f7fe fcf9 	bl	8003e36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005444:	480b      	ldr	r0, [pc, #44]	; (8005474 <prvInitialiseTaskLists+0x74>)
 8005446:	f7fe fcf6 	bl	8003e36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <prvInitialiseTaskLists+0x78>)
 800544c:	4a05      	ldr	r2, [pc, #20]	; (8005464 <prvInitialiseTaskLists+0x64>)
 800544e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvInitialiseTaskLists+0x7c>)
 8005452:	4a05      	ldr	r2, [pc, #20]	; (8005468 <prvInitialiseTaskLists+0x68>)
 8005454:	601a      	str	r2, [r3, #0]
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000354 	.word	0x20000354
 8005464:	200003e0 	.word	0x200003e0
 8005468:	200003f4 	.word	0x200003f4
 800546c:	20000410 	.word	0x20000410
 8005470:	20000424 	.word	0x20000424
 8005474:	2000043c 	.word	0x2000043c
 8005478:	20000408 	.word	0x20000408
 800547c:	2000040c 	.word	0x2000040c

08005480 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005486:	e019      	b.n	80054bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005488:	f000 fab4 	bl	80059f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <prvCheckTasksWaitingTermination+0x50>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe fd56 	bl	8003f4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <prvCheckTasksWaitingTermination+0x54>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <prvCheckTasksWaitingTermination+0x54>)
 80054a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <prvCheckTasksWaitingTermination+0x58>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <prvCheckTasksWaitingTermination+0x58>)
 80054b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054b2:	f000 facf 	bl	8005a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f810 	bl	80054dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <prvCheckTasksWaitingTermination+0x58>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e1      	bne.n	8005488 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000424 	.word	0x20000424
 80054d4:	20000450 	.word	0x20000450
 80054d8:	20000438 	.word	0x20000438

080054dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3350      	adds	r3, #80	; 0x50
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fdd9 	bl	80060a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d108      	bne.n	800550a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fc67 	bl	8005dd0 <vPortFree>
				vPortFree( pxTCB );
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fc64 	bl	8005dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005508:	e018      	b.n	800553c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8005510:	2b01      	cmp	r3, #1
 8005512:	d103      	bne.n	800551c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fc5b 	bl	8005dd0 <vPortFree>
	}
 800551a:	e00f      	b.n	800553c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8005522:	2b02      	cmp	r3, #2
 8005524:	d00a      	beq.n	800553c <prvDeleteTCB+0x60>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60fb      	str	r3, [r7, #12]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <prvDeleteTCB+0x5e>
	}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <prvResetNextTaskUnblockTime+0x38>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <prvResetNextTaskUnblockTime+0x3c>)
 8005556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800555c:	e008      	b.n	8005570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <prvResetNextTaskUnblockTime+0x38>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <prvResetNextTaskUnblockTime+0x3c>)
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	20000408 	.word	0x20000408
 8005580:	20000470 	.word	0x20000470

08005584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800558a:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <xTaskGetSchedulerState+0x34>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005592:	2301      	movs	r3, #1
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	e008      	b.n	80055aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <xTaskGetSchedulerState+0x38>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055a0:	2302      	movs	r3, #2
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	e001      	b.n	80055aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055aa:	687b      	ldr	r3, [r7, #4]
	}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	2000045c 	.word	0x2000045c
 80055bc:	20000478 	.word	0x20000478

080055c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d06e      	beq.n	80056b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055d6:	4b3a      	ldr	r3, [pc, #232]	; (80056c0 <xTaskPriorityDisinherit+0x100>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d00a      	beq.n	80055f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60bb      	str	r3, [r7, #8]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005618:	1e5a      	subs	r2, r3, #1
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	429a      	cmp	r2, r3
 8005628:	d044      	beq.n	80056b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562e:	2b00      	cmp	r3, #0
 8005630:	d140      	bne.n	80056b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3304      	adds	r3, #4
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fc87 	bl	8003f4a <uxListRemove>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d115      	bne.n	800566e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	491f      	ldr	r1, [pc, #124]	; (80056c4 <xTaskPriorityDisinherit+0x104>)
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <xTaskPriorityDisinherit+0xae>
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	2201      	movs	r2, #1
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43da      	mvns	r2, r3
 8005664:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <xTaskPriorityDisinherit+0x108>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4013      	ands	r3, r2
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <xTaskPriorityDisinherit+0x108>)
 800566c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	f1c3 0207 	rsb	r2, r3, #7
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	2201      	movs	r2, #1
 8005688:	409a      	lsls	r2, r3
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <xTaskPriorityDisinherit+0x108>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	4a0d      	ldr	r2, [pc, #52]	; (80056c8 <xTaskPriorityDisinherit+0x108>)
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <xTaskPriorityDisinherit+0x104>)
 80056a2:	441a      	add	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe fbf0 	bl	8003e90 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056b4:	697b      	ldr	r3, [r7, #20]
	}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000350 	.word	0x20000350
 80056c4:	20000354 	.word	0x20000354
 80056c8:	20000458 	.word	0x20000458

080056cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056d6:	4b29      	ldr	r3, [pc, #164]	; (800577c <prvAddCurrentTaskToDelayedList+0xb0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056dc:	4b28      	ldr	r3, [pc, #160]	; (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe fc31 	bl	8003f4a <uxListRemove>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	2201      	movs	r2, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43da      	mvns	r2, r3
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4013      	ands	r3, r2
 8005702:	4a20      	ldr	r2, [pc, #128]	; (8005784 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005704:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800570c:	d10a      	bne.n	8005724 <prvAddCurrentTaskToDelayedList+0x58>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	481a      	ldr	r0, [pc, #104]	; (8005788 <prvAddCurrentTaskToDelayedList+0xbc>)
 800571e:	f7fe fbb7 	bl	8003e90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005722:	e026      	b.n	8005772 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d209      	bcs.n	8005750 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <prvAddCurrentTaskToDelayedList+0xc0>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7fe fbc5 	bl	8003ed8 <vListInsert>
}
 800574e:	e010      	b.n	8005772 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f7fe fbbb 	bl	8003ed8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005762:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d202      	bcs.n	8005772 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800576c:	4a09      	ldr	r2, [pc, #36]	; (8005794 <prvAddCurrentTaskToDelayedList+0xc8>)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6013      	str	r3, [r2, #0]
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000454 	.word	0x20000454
 8005780:	20000350 	.word	0x20000350
 8005784:	20000458 	.word	0x20000458
 8005788:	2000043c 	.word	0x2000043c
 800578c:	2000040c 	.word	0x2000040c
 8005790:	20000408 	.word	0x20000408
 8005794:	20000470 	.word	0x20000470

08005798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b04      	subs	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b04      	subs	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b04      	subs	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057c8:	4a0c      	ldr	r2, [pc, #48]	; (80057fc <pxPortInitialiseStack+0x64>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3b14      	subs	r3, #20
 80057d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3b04      	subs	r3, #4
 80057de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f06f 0202 	mvn.w	r2, #2
 80057e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3b20      	subs	r3, #32
 80057ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	08005801 	.word	0x08005801

08005800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <prvTaskExitError+0x54>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005812:	d00a      	beq.n	800582a <prvTaskExitError+0x2a>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60fb      	str	r3, [r7, #12]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <prvTaskExitError+0x28>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	60bb      	str	r3, [r7, #8]
}
 800583c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800583e:	bf00      	nop
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0fc      	beq.n	8005840 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	2000000c 	.word	0x2000000c
	...

08005860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005888:	4808      	ldr	r0, [pc, #32]	; (80058ac <prvPortStartFirstTask+0x24>)
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f380 8808 	msr	MSP, r0
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8814 	msr	CONTROL, r0
 800589a:	b662      	cpsie	i
 800589c:	b661      	cpsie	f
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	df00      	svc	0
 80058a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058aa:	bf00      	nop
 80058ac:	e000ed08 	.word	0xe000ed08

080058b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <xPortStartScheduler+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a46      	ldr	r2, [pc, #280]	; (80059d4 <xPortStartScheduler+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10a      	bne.n	80058d6 <xPortStartScheduler+0x26>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058d6:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <xPortStartScheduler+0x120>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3f      	ldr	r2, [pc, #252]	; (80059d8 <xPortStartScheduler+0x128>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10a      	bne.n	80058f6 <xPortStartScheduler+0x46>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <xPortStartScheduler+0x12c>)
 80058f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <xPortStartScheduler+0x130>)
 800591c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <xPortStartScheduler+0x134>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005924:	e009      	b.n	800593a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3b01      	subs	r3, #1
 800592c:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <xPortStartScheduler+0x134>)
 800592e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d0ef      	beq.n	8005926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005946:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <xPortStartScheduler+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1c3 0307 	rsb	r3, r3, #7
 800594e:	2b04      	cmp	r3, #4
 8005950:	d00a      	beq.n	8005968 <xPortStartScheduler+0xb8>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60bb      	str	r3, [r7, #8]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <xPortStartScheduler+0x134>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <xPortStartScheduler+0x134>)
 8005970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <xPortStartScheduler+0x134>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <xPortStartScheduler+0x134>)
 800597c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <xPortStartScheduler+0x138>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <xPortStartScheduler+0x138>)
 800598c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <xPortStartScheduler+0x138>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <xPortStartScheduler+0x138>)
 8005998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800599e:	f000 f8dd 	bl	8005b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <xPortStartScheduler+0x13c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059a8:	f000 f8fc 	bl	8005ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <xPortStartScheduler+0x140>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <xPortStartScheduler+0x140>)
 80059b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059b8:	f7ff ff66 	bl	8005888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059bc:	f7ff fb9c 	bl	80050f8 <vTaskSwitchContext>
	prvTaskExitError();
 80059c0:	f7ff ff1e 	bl	8005800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000ed00 	.word	0xe000ed00
 80059d4:	410fc271 	.word	0x410fc271
 80059d8:	410fc270 	.word	0x410fc270
 80059dc:	e000e400 	.word	0xe000e400
 80059e0:	2000047c 	.word	0x2000047c
 80059e4:	20000480 	.word	0x20000480
 80059e8:	e000ed20 	.word	0xe000ed20
 80059ec:	2000000c 	.word	0x2000000c
 80059f0:	e000ef34 	.word	0xe000ef34

080059f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
}
 8005a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10f      	bne.n	8005a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortEnterCritical+0x5c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	603b      	str	r3, [r7, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vPortEnterCritical+0x4a>
	}
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <vPortExitCritical+0x24>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <vPortExitCritical+0x42>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	f383 8811 	msr	BASEPRI, r3
}
 8005a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
	...

08005ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ab0:	f3ef 8009 	mrs	r0, PSP
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <pxCurrentTCBConst>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f01e 0f10 	tst.w	lr, #16
 8005ac0:	bf08      	it	eq
 8005ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ad4:	f380 8811 	msr	BASEPRI, r0
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f7ff fb0a 	bl	80050f8 <vTaskSwitchContext>
 8005ae4:	f04f 0000 	mov.w	r0, #0
 8005ae8:	f380 8811 	msr	BASEPRI, r0
 8005aec:	bc09      	pop	{r0, r3}
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af6:	f01e 0f10 	tst.w	lr, #16
 8005afa:	bf08      	it	eq
 8005afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b00:	f380 8809 	msr	PSP, r0
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst>:
 8005b10:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b32:	f7ff fa29 	bl	8004f88 <xTaskIncrementTick>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <SysTick_Handler+0x40>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
}
 8005b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <vPortSetupTimerInterrupt+0x38>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <vPortSetupTimerInterrupt+0x3c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <vPortSetupTimerInterrupt+0x40>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <vPortSetupTimerInterrupt+0x44>)
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b7e:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b80:	2207      	movs	r2, #7
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	e000e010 	.word	0xe000e010
 8005b94:	e000e018 	.word	0xe000e018
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	10624dd3 	.word	0x10624dd3
 8005ba0:	e000e014 	.word	0xe000e014

08005ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bb4 <vPortEnableVFP+0x10>
 8005ba8:	6801      	ldr	r1, [r0, #0]
 8005baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bae:	6001      	str	r1, [r0, #0]
 8005bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bb2:	bf00      	nop
 8005bb4:	e000ed88 	.word	0xe000ed88

08005bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bbe:	f3ef 8305 	mrs	r3, IPSR
 8005bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d914      	bls.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <vPortValidateInterruptPriority+0x70>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <vPortValidateInterruptPriority+0x74>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	7afa      	ldrb	r2, [r7, #11]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d20a      	bcs.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <vPortValidateInterruptPriority+0x78>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <vPortValidateInterruptPriority+0x7c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d90a      	bls.n	8005c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	603b      	str	r3, [r7, #0]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <vPortValidateInterruptPriority+0x60>
	}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	e000e3f0 	.word	0xe000e3f0
 8005c2c:	2000047c 	.word	0x2000047c
 8005c30:	e000ed0c 	.word	0xe000ed0c
 8005c34:	20000480 	.word	0x20000480

08005c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c44:	f7ff f8f6 	bl	8004e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c48:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <pvPortMalloc+0x180>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c50:	f000 f920 	bl	8005e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <pvPortMalloc+0x184>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8093 	bne.w	8005d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01d      	beq.n	8005ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c68:	2208      	movs	r2, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	617b      	str	r3, [r7, #20]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d06e      	beq.n	8005d88 <pvPortMalloc+0x150>
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <pvPortMalloc+0x188>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d869      	bhi.n	8005d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cbe:	e004      	b.n	8005cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d903      	bls.n	8005cdc <pvPortMalloc+0xa4>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f1      	bne.n	8005cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <pvPortMalloc+0x180>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d050      	beq.n	8005d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2208      	movs	r2, #8
 8005cec:	4413      	add	r3, r2
 8005cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	2308      	movs	r3, #8
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d91f      	bls.n	8005d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <pvPortMalloc+0xf8>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	613b      	str	r3, [r7, #16]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f000 f908 	bl	8005f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d203      	bcs.n	8005d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x184>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <pvPortMalloc+0x194>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <pvPortMalloc+0x194>)
 8005d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d88:	f7ff f862 	bl	8004e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <pvPortMalloc+0x174>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <pvPortMalloc+0x172>
	return pvReturn;
 8005dac:	69fb      	ldr	r3, [r7, #28]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20001044 	.word	0x20001044
 8005dbc:	20001058 	.word	0x20001058
 8005dc0:	20001048 	.word	0x20001048
 8005dc4:	2000103c 	.word	0x2000103c
 8005dc8:	2000104c 	.word	0x2000104c
 8005dcc:	20001050 	.word	0x20001050

08005dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d04d      	beq.n	8005e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005de2:	2308      	movs	r3, #8
 8005de4:	425b      	negs	r3, r3
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <vPortFree+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <vPortFree+0x44>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60fb      	str	r3, [r7, #12]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <vPortFree+0x62>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60bb      	str	r3, [r7, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <vPortFree+0xb8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11a      	bne.n	8005e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <vPortFree+0xb8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e58:	f7fe ffec 	bl	8004e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <vPortFree+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <vPortFree+0xbc>)
 8005e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 f874 	bl	8005f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <vPortFree+0xc0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <vPortFree+0xc0>)
 8005e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e7a:	f7fe ffe9 	bl	8004e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20001058 	.word	0x20001058
 8005e8c:	20001048 	.word	0x20001048
 8005e90:	20001054 	.word	0x20001054

08005e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <prvHeapInit+0xac>)
 8005ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3307      	adds	r3, #7
 8005eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <prvHeapInit+0xac>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <prvHeapInit+0xb0>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <prvHeapInit+0xb0>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <prvHeapInit+0xb4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvHeapInit+0xb4>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <prvHeapInit+0xb8>)
 8005f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <prvHeapInit+0xbc>)
 8005f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <prvHeapInit+0xc0>)
 8005f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000484 	.word	0x20000484
 8005f44:	2000103c 	.word	0x2000103c
 8005f48:	20001044 	.word	0x20001044
 8005f4c:	2000104c 	.word	0x2000104c
 8005f50:	20001048 	.word	0x20001048
 8005f54:	20001058 	.word	0x20001058

08005f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <prvInsertBlockIntoFreeList+0xac>)
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <prvInsertBlockIntoFreeList+0x14>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d8f7      	bhi.n	8005f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d108      	bne.n	8005f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d118      	bne.n	8005fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d00d      	beq.n	8005fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e008      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e003      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d002      	beq.n	8005ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	2000103c 	.word	0x2000103c
 8006008:	20001044 	.word	0x20001044

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	; (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	; (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	; (8006050 <__libc_init_array+0x44>)
 8006020:	f000 f8f6 	bl	8006210 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08006310 	.word	0x08006310
 8006048:	08006310 	.word	0x08006310
 800604c:	08006310 	.word	0x08006310
 8006050:	08006314 	.word	0x08006314

08006054 <__retarget_lock_acquire_recursive>:
 8006054:	4770      	bx	lr

08006056 <__retarget_lock_release_recursive>:
 8006056:	4770      	bx	lr

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606e:	4291      	cmp	r1, r2
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <memset>:
 8006074:	4402      	add	r2, r0
 8006076:	4603      	mov	r3, r0
 8006078:	4293      	cmp	r3, r2
 800607a:	d100      	bne.n	800607e <memset+0xa>
 800607c:	4770      	bx	lr
 800607e:	f803 1b01 	strb.w	r1, [r3], #1
 8006082:	e7f9      	b.n	8006078 <memset+0x4>

08006084 <cleanup_glue>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	460c      	mov	r4, r1
 8006088:	6809      	ldr	r1, [r1, #0]
 800608a:	4605      	mov	r5, r0
 800608c:	b109      	cbz	r1, 8006092 <cleanup_glue+0xe>
 800608e:	f7ff fff9 	bl	8006084 <cleanup_glue>
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609a:	f000 b869 	b.w	8006170 <_free_r>
	...

080060a0 <_reclaim_reent>:
 80060a0:	4b2c      	ldr	r3, [pc, #176]	; (8006154 <_reclaim_reent+0xb4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4283      	cmp	r3, r0
 80060a6:	b570      	push	{r4, r5, r6, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	d051      	beq.n	8006150 <_reclaim_reent+0xb0>
 80060ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060ae:	b143      	cbz	r3, 80060c2 <_reclaim_reent+0x22>
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d14a      	bne.n	800614c <_reclaim_reent+0xac>
 80060b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b8:	6819      	ldr	r1, [r3, #0]
 80060ba:	b111      	cbz	r1, 80060c2 <_reclaim_reent+0x22>
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 f857 	bl	8006170 <_free_r>
 80060c2:	6961      	ldr	r1, [r4, #20]
 80060c4:	b111      	cbz	r1, 80060cc <_reclaim_reent+0x2c>
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f852 	bl	8006170 <_free_r>
 80060cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060ce:	b111      	cbz	r1, 80060d6 <_reclaim_reent+0x36>
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f84d 	bl	8006170 <_free_r>
 80060d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80060d8:	b111      	cbz	r1, 80060e0 <_reclaim_reent+0x40>
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f848 	bl	8006170 <_free_r>
 80060e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80060e2:	b111      	cbz	r1, 80060ea <_reclaim_reent+0x4a>
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 f843 	bl	8006170 <_free_r>
 80060ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80060ec:	b111      	cbz	r1, 80060f4 <_reclaim_reent+0x54>
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f83e 	bl	8006170 <_free_r>
 80060f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80060f6:	b111      	cbz	r1, 80060fe <_reclaim_reent+0x5e>
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 f839 	bl	8006170 <_free_r>
 80060fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006100:	b111      	cbz	r1, 8006108 <_reclaim_reent+0x68>
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f834 	bl	8006170 <_free_r>
 8006108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800610a:	b111      	cbz	r1, 8006112 <_reclaim_reent+0x72>
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f82f 	bl	8006170 <_free_r>
 8006112:	69a3      	ldr	r3, [r4, #24]
 8006114:	b1e3      	cbz	r3, 8006150 <_reclaim_reent+0xb0>
 8006116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006118:	4620      	mov	r0, r4
 800611a:	4798      	blx	r3
 800611c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800611e:	b1b9      	cbz	r1, 8006150 <_reclaim_reent+0xb0>
 8006120:	4620      	mov	r0, r4
 8006122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006126:	f7ff bfad 	b.w	8006084 <cleanup_glue>
 800612a:	5949      	ldr	r1, [r1, r5]
 800612c:	b941      	cbnz	r1, 8006140 <_reclaim_reent+0xa0>
 800612e:	3504      	adds	r5, #4
 8006130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006132:	2d80      	cmp	r5, #128	; 0x80
 8006134:	68d9      	ldr	r1, [r3, #12]
 8006136:	d1f8      	bne.n	800612a <_reclaim_reent+0x8a>
 8006138:	4620      	mov	r0, r4
 800613a:	f000 f819 	bl	8006170 <_free_r>
 800613e:	e7ba      	b.n	80060b6 <_reclaim_reent+0x16>
 8006140:	680e      	ldr	r6, [r1, #0]
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f814 	bl	8006170 <_free_r>
 8006148:	4631      	mov	r1, r6
 800614a:	e7ef      	b.n	800612c <_reclaim_reent+0x8c>
 800614c:	2500      	movs	r5, #0
 800614e:	e7ef      	b.n	8006130 <_reclaim_reent+0x90>
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	bf00      	nop
 8006154:	20000010 	.word	0x20000010

08006158 <__malloc_lock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_lock+0x8>)
 800615a:	f7ff bf7b 	b.w	8006054 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	200010c8 	.word	0x200010c8

08006164 <__malloc_unlock>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__malloc_unlock+0x8>)
 8006166:	f7ff bf76 	b.w	8006056 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	200010c8 	.word	0x200010c8

08006170 <_free_r>:
 8006170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006172:	2900      	cmp	r1, #0
 8006174:	d048      	beq.n	8006208 <_free_r+0x98>
 8006176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800617a:	9001      	str	r0, [sp, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f1a1 0404 	sub.w	r4, r1, #4
 8006182:	bfb8      	it	lt
 8006184:	18e4      	addlt	r4, r4, r3
 8006186:	f7ff ffe7 	bl	8006158 <__malloc_lock>
 800618a:	4a20      	ldr	r2, [pc, #128]	; (800620c <_free_r+0x9c>)
 800618c:	9801      	ldr	r0, [sp, #4]
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	4615      	mov	r5, r2
 8006192:	b933      	cbnz	r3, 80061a2 <_free_r+0x32>
 8006194:	6063      	str	r3, [r4, #4]
 8006196:	6014      	str	r4, [r2, #0]
 8006198:	b003      	add	sp, #12
 800619a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800619e:	f7ff bfe1 	b.w	8006164 <__malloc_unlock>
 80061a2:	42a3      	cmp	r3, r4
 80061a4:	d90b      	bls.n	80061be <_free_r+0x4e>
 80061a6:	6821      	ldr	r1, [r4, #0]
 80061a8:	1862      	adds	r2, r4, r1
 80061aa:	4293      	cmp	r3, r2
 80061ac:	bf04      	itt	eq
 80061ae:	681a      	ldreq	r2, [r3, #0]
 80061b0:	685b      	ldreq	r3, [r3, #4]
 80061b2:	6063      	str	r3, [r4, #4]
 80061b4:	bf04      	itt	eq
 80061b6:	1852      	addeq	r2, r2, r1
 80061b8:	6022      	streq	r2, [r4, #0]
 80061ba:	602c      	str	r4, [r5, #0]
 80061bc:	e7ec      	b.n	8006198 <_free_r+0x28>
 80061be:	461a      	mov	r2, r3
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	b10b      	cbz	r3, 80061c8 <_free_r+0x58>
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d9fa      	bls.n	80061be <_free_r+0x4e>
 80061c8:	6811      	ldr	r1, [r2, #0]
 80061ca:	1855      	adds	r5, r2, r1
 80061cc:	42a5      	cmp	r5, r4
 80061ce:	d10b      	bne.n	80061e8 <_free_r+0x78>
 80061d0:	6824      	ldr	r4, [r4, #0]
 80061d2:	4421      	add	r1, r4
 80061d4:	1854      	adds	r4, r2, r1
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	6011      	str	r1, [r2, #0]
 80061da:	d1dd      	bne.n	8006198 <_free_r+0x28>
 80061dc:	681c      	ldr	r4, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	6053      	str	r3, [r2, #4]
 80061e2:	4421      	add	r1, r4
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	e7d7      	b.n	8006198 <_free_r+0x28>
 80061e8:	d902      	bls.n	80061f0 <_free_r+0x80>
 80061ea:	230c      	movs	r3, #12
 80061ec:	6003      	str	r3, [r0, #0]
 80061ee:	e7d3      	b.n	8006198 <_free_r+0x28>
 80061f0:	6825      	ldr	r5, [r4, #0]
 80061f2:	1961      	adds	r1, r4, r5
 80061f4:	428b      	cmp	r3, r1
 80061f6:	bf04      	itt	eq
 80061f8:	6819      	ldreq	r1, [r3, #0]
 80061fa:	685b      	ldreq	r3, [r3, #4]
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	bf04      	itt	eq
 8006200:	1949      	addeq	r1, r1, r5
 8006202:	6021      	streq	r1, [r4, #0]
 8006204:	6054      	str	r4, [r2, #4]
 8006206:	e7c7      	b.n	8006198 <_free_r+0x28>
 8006208:	b003      	add	sp, #12
 800620a:	bd30      	pop	{r4, r5, pc}
 800620c:	2000105c 	.word	0x2000105c

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
