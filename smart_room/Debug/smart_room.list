
smart_room.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009570  08009570  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009570  08009570  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009570  08009570  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  20000074  080095ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011d4  080095ec  000211d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020552  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f21  00000000  00000000  000405f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00044518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  00045f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca74  00000000  00000000  00047770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b081  00000000  00000000  000741e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011638d  00000000  00000000  0008f265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a55f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b8  00000000  00000000  001a5648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009440 	.word	0x08009440

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009440 	.word	0x08009440

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	20000144 	.word	0x20000144

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b20      	cmp	r3, #32
 8000414:	d101      	bne.n	800041a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000416:	2301      	movs	r3, #1
 8000418:	e000      	b.n	800041c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d101      	bne.n	8000440 <LL_USART_IsActiveFlag_TXE+0x18>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 0220 	orr.w	r2, r3, #32
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	460b      	mov	r3, r1
 80004d4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	4907      	ldr	r1, [pc, #28]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000526:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <sendchar>:
QueueHandle_t tx_queue_2;
QueueHandle_t rx_queue_2;
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

void sendchar(char c, char usart){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10b      	bne.n	80005aa <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <sendchar+0x54>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	2300      	movs	r3, #0
 800059a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800059e:	f006 fb45 	bl	8006c2c <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <sendchar+0x58>)
 80005a4:	f7ff ff63 	bl	800046e <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 80005a8:	e00d      	b.n	80005c6 <sendchar+0x4a>
	else if( usart == USART_2){
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d10a      	bne.n	80005c6 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <sendchar+0x5c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	2300      	movs	r3, #0
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005bc:	f006 fb36 	bl	8006c2c <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <sendchar+0x60>)
 80005c2:	f7ff ff54 	bl	800046e <LL_USART_EnableIT_TXE>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20001170 	.word	0x20001170
 80005d4:	40013800 	.word	0x40013800
 80005d8:	2000111c 	.word	0x2000111c
 80005dc:	40004400 	.word	0x40004400

080005e0 <sendString>:

void sendString(char * str, char usart){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 80005ec:	e009      	b.n	8000602 <sendString+0x22>
		sendchar(*str, usart);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffc0 	bl	800057c <sendchar>
		str++;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f1      	bne.n	80005ee <sendString+0xe>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <readchar>:

char readchar(char usart){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d109      	bne.n	800063c <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <readchar+0x4c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 010f 	add.w	r1, r7, #15
 8000630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000634:	4618      	mov	r0, r3
 8000636:	f006 fc93 	bl	8006f60 <xQueueReceive>
 800063a:	e00b      	b.n	8000654 <readchar+0x40>
	else if(usart == USART_2)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d108      	bne.n	8000654 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <readchar+0x50>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f107 010f 	add.w	r1, r7, #15
 800064a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fc86 	bl	8006f60 <xQueueReceive>
	return caracter;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20001068 	.word	0x20001068
 8000664:	20001120 	.word	0x20001120

08000668 <cli>:

void cli(void * vParam)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	while(1)
	{
		caracter = readchar(USART_1);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ffcf 	bl	8000614 <readchar>
 8000676:	4603      	mov	r3, r0
 8000678:	75fb      	strb	r3, [r7, #23]

		char buff[8];
		uint8_t temp = readVoltage();
 800067a:	f000 f86f 	bl	800075c <readVoltage>
 800067e:	4603      	mov	r3, r0
 8000680:	75bb      	strb	r3, [r7, #22]
		sprintf(buff,"\n%d\r\n", temp);
 8000682:	7dba      	ldrb	r2, [r7, #22]
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	492b      	ldr	r1, [pc, #172]	; (8000738 <cli+0xd0>)
 800068a:	4618      	mov	r0, r3
 800068c:	f008 fb24 	bl	8008cd8 <siprintf>
		sendString(buff, USART_1);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffa2 	bl	80005e0 <sendString>

		switch(caracter){
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3b41      	subs	r3, #65	; 0x41
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	d8e5      	bhi.n	8000670 <cli+0x8>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <cli+0x44>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	08000671 	.word	0x08000671
 80006b0:	08000671 	.word	0x08000671
 80006b4:	0800072d 	.word	0x0800072d
 80006b8:	0800071d 	.word	0x0800071d
 80006bc:	08000671 	.word	0x08000671
 80006c0:	08000671 	.word	0x08000671
 80006c4:	08000671 	.word	0x08000671
 80006c8:	08000671 	.word	0x08000671
 80006cc:	08000671 	.word	0x08000671
 80006d0:	08000671 	.word	0x08000671
 80006d4:	08000671 	.word	0x08000671
 80006d8:	08000715 	.word	0x08000715
 80006dc:	08000671 	.word	0x08000671
 80006e0:	08000671 	.word	0x08000671
 80006e4:	08000725 	.word	0x08000725
 80006e8:	08000671 	.word	0x08000671
 80006ec:	08000671 	.word	0x08000671
 80006f0:	08000671 	.word	0x08000671
 80006f4:	08000671 	.word	0x08000671
 80006f8:	08000671 	.word	0x08000671
 80006fc:	08000671 	.word	0x08000671
 8000700:	08000671 	.word	0x08000671
 8000704:	08000671 	.word	0x08000671
 8000708:	08000671 	.word	0x08000671
 800070c:	08000671 	.word	0x08000671
 8000710:	08000671 	.word	0x08000671
					case 'L':
						changeLedState(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f811 	bl	800073c <changeLedState>
						break;
 800071a:	e00b      	b.n	8000734 <cli+0xcc>
					case 'D':
						changeLedState(0);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f80d 	bl	800073c <changeLedState>
						break;
 8000722:	e007      	b.n	8000734 <cli+0xcc>
					case 'O':
						changeDoorState(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 f833 	bl	8000790 <changeDoorState>
						break;
 800072a:	e003      	b.n	8000734 <cli+0xcc>
					case 'C':
						changeDoorState(0);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f82f 	bl	8000790 <changeDoorState>
						break;
 8000732:	bf00      	nop
	{
 8000734:	e79c      	b.n	8000670 <cli+0x8>
 8000736:	bf00      	nop
 8000738:	08009464 	.word	0x08009464

0800073c <changeLedState>:
				}
	}

}

void changeLedState(uint8_t mode){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, mode);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	461a      	mov	r2, r3
 800074a:	2120      	movs	r1, #32
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f002 fb78 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <readVoltage>:

int8_t readVoltage(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <readVoltage+0x2c>)
 8000762:	f001 fa1b 	bl	8001b9c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <readVoltage+0x2c>)
 800076c:	f001 fad0 	bl	8001d10 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1) / 25;
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <readVoltage+0x2c>)
 8000772:	f001 fba5 	bl	8001ec0 <HAL_ADC_GetValue>
 8000776:	4603      	mov	r3, r0
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <readVoltage+0x30>)
 800077a:	fba2 2303 	umull	r2, r3, r2, r3
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	b25b      	sxtb	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200010b8 	.word	0x200010b8
 800078c:	51eb851f 	.word	0x51eb851f

08000790 <changeDoorState>:

void changeDoorState(uint8_t mode){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	if(mode == 1){
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d104      	bne.n	80007aa <changeDoorState+0x1a>
		//2ms Pwm - Servo motor arm rotates to 180 degree
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80007a0:	2104      	movs	r1, #4
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <changeDoorState+0x30>)
 80007a4:	f004 f820 	bl	80047e8 <HAL_TIM_PWM_Start>
		//1ms Pwm - Servo motor arm rotates to 0 degree
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 50);

		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	}
}
 80007a8:	e006      	b.n	80007b8 <changeDoorState+0x28>
	} else if(mode == 0){
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d103      	bne.n	80007b8 <changeDoorState+0x28>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80007b0:	2104      	movs	r1, #4
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <changeDoorState+0x30>)
 80007b4:	f004 f91e 	bl	80049f4 <HAL_TIM_PWM_Stop>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000106c 	.word	0x2000106c

080007c4 <USART_2_IRQHandler>:

//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <USART_2_IRQHandler+0xb0>)
 80007cc:	f7ff fe2c 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d026      	beq.n	8000824 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007d6:	e014      	b.n	8000802 <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <USART_2_IRQHandler+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f107 020c 	add.w	r2, r7, #12
 80007e0:	f107 010b 	add.w	r1, r7, #11
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 fc9b 	bl	8007120 <xQueueReceiveFromISR>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d103      	bne.n	80007f8 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 80007f0:	4820      	ldr	r0, [pc, #128]	; (8000874 <USART_2_IRQHandler+0xb0>)
 80007f2:	f7ff fe4c 	bl	800048e <LL_USART_DisableIT_TXE>
 80007f6:	e00a      	b.n	800080e <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	4619      	mov	r1, r3
 80007fc:	481d      	ldr	r0, [pc, #116]	; (8000874 <USART_2_IRQHandler+0xb0>)
 80007fe:	f7ff fe64 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <USART_2_IRQHandler+0xb0>)
 8000804:	f7ff fe10 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1e4      	bne.n	80007d8 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d007      	beq.n	8000824 <USART_2_IRQHandler+0x60>
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <USART_2_IRQHandler+0xb8>)
 8000816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <USART_2_IRQHandler+0xb0>)
 8000826:	f7ff fdec 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d01d      	beq.n	800086c <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000830:	e00b      	b.n	800084a <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <USART_2_IRQHandler+0xb0>)
 8000834:	f7ff fe3b 	bl	80004ae <LL_USART_ReceiveData8>
 8000838:	4603      	mov	r3, r0
        	uint8_t byte =
 800083a:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <USART_2_IRQHandler+0xbc>)
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	1d3a      	adds	r2, r7, #4
 8000842:	1cf9      	adds	r1, r7, #3
 8000844:	2300      	movs	r3, #0
 8000846:	f006 faef 	bl	8006e28 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <USART_2_IRQHandler+0xb0>)
 800084c:	f7ff fdd9 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ed      	bne.n	8000832 <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d007      	beq.n	800086c <USART_2_IRQHandler+0xa8>
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <USART_2_IRQHandler+0xb8>)
 800085e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	f3bf 8f4f 	dsb	sy
 8000868:	f3bf 8f6f 	isb	sy
    }
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	2000111c 	.word	0x2000111c
 800087c:	e000ed04 	.word	0xe000ed04
 8000880:	20001120 	.word	0x20001120

08000884 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 800088a:	482a      	ldr	r0, [pc, #168]	; (8000934 <USART_1_IRQHandler+0xb0>)
 800088c:	f7ff fdcc 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d026      	beq.n	80008e4 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000896:	e014      	b.n	80008c2 <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <USART_1_IRQHandler+0xb4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	f107 010b 	add.w	r1, r7, #11
 80008a4:	4618      	mov	r0, r3
 80008a6:	f006 fc3b 	bl	8007120 <xQueueReceiveFromISR>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d103      	bne.n	80008b8 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 80008b0:	4820      	ldr	r0, [pc, #128]	; (8000934 <USART_1_IRQHandler+0xb0>)
 80008b2:	f7ff fdec 	bl	800048e <LL_USART_DisableIT_TXE>
 80008b6:	e00a      	b.n	80008ce <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	4619      	mov	r1, r3
 80008bc:	481d      	ldr	r0, [pc, #116]	; (8000934 <USART_1_IRQHandler+0xb0>)
 80008be:	f7ff fe04 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008c2:	481c      	ldr	r0, [pc, #112]	; (8000934 <USART_1_IRQHandler+0xb0>)
 80008c4:	f7ff fdb0 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1e4      	bne.n	8000898 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d007      	beq.n	80008e4 <USART_1_IRQHandler+0x60>
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <USART_1_IRQHandler+0xb8>)
 80008d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	f3bf 8f4f 	dsb	sy
 80008e0:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <USART_1_IRQHandler+0xb0>)
 80008e6:	f7ff fd8c 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01d      	beq.n	800092c <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80008f0:	e00b      	b.n	800090a <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <USART_1_IRQHandler+0xb0>)
 80008f4:	f7ff fddb 	bl	80004ae <LL_USART_ReceiveData8>
 80008f8:	4603      	mov	r3, r0
        	uint8_t byte =
 80008fa:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <USART_1_IRQHandler+0xbc>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	1d3a      	adds	r2, r7, #4
 8000902:	1cf9      	adds	r1, r7, #3
 8000904:	2300      	movs	r3, #0
 8000906:	f006 fa8f 	bl	8006e28 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <USART_1_IRQHandler+0xb0>)
 800090c:	f7ff fd79 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1ed      	bne.n	80008f2 <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d007      	beq.n	800092c <USART_1_IRQHandler+0xa8>
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <USART_1_IRQHandler+0xb8>)
 800091e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	f3bf 8f4f 	dsb	sy
 8000928:	f3bf 8f6f 	isb	sy
    }
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013800 	.word	0x40013800
 8000938:	20001170 	.word	0x20001170
 800093c:	e000ed04 	.word	0xe000ed04
 8000940:	20001068 	.word	0x20001068

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f000 fdad 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f847 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f000 fb05 	bl	8000f60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000956:	f000 fa6b 	bl	8000e30 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800095a:	f000 f893 	bl	8000a84 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800095e:	f000 f9cd 	bl	8000cfc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000962:	f000 f953 	bl	8000c0c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000966:	f000 f903 	bl	8000b70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 800096a:	2001      	movs	r0, #1
 800096c:	f006 f945 	bl	8006bfa <xQueueCreateMutex>
 8000970:	4603      	mov	r3, r0
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <main+0x80>)
 8000974:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 8000976:	2001      	movs	r0, #1
 8000978:	f006 f93f 	bl	8006bfa <xQueueCreateMutex>
 800097c:	4603      	mov	r3, r0
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <main+0x84>)
 8000980:	6013      	str	r3, [r2, #0]


	HAL_TIM_Base_Start(&htim3);
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <main+0x88>)
 8000984:	f003 fdf6 	bl	8004574 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <main+0x8c>)
 800098a:	1d3c      	adds	r4, r7, #4
 800098c:	461d      	mov	r5, r3
 800098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000992:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000996:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f005 ff3b 	bl	800681a <osThreadCreate>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <main+0x90>)
 80009a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 80009aa:	2300      	movs	r3, #0
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	2301      	movs	r3, #1
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <main+0x94>)
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <main+0x98>)
 80009ba:	f006 fd9e 	bl	80074fa <xTaskCreate>
			  NULL);      /* ponteiro para o handle da task */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009be:	f005 ff25 	bl	800680c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <main+0x7e>
 80009c4:	20000344 	.word	0x20000344
 80009c8:	20000348 	.word	0x20000348
 80009cc:	2000106c 	.word	0x2000106c
 80009d0:	08009470 	.word	0x08009470
 80009d4:	20001064 	.word	0x20001064
 80009d8:	0800946c 	.word	0x0800946c
 80009dc:	08000669 	.word	0x08000669

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b096      	sub	sp, #88	; 0x58
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2244      	movs	r2, #68	; 0x44
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 f896 	bl	8008b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a06:	f002 fa43 	bl	8002e90 <HAL_PWREx_ControlVoltageScaling>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a10:	f000 fb28 	bl	8001064 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a26:	2302      	movs	r3, #2
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fa7a 	bl	8002f3c <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a4e:	f000 fb09 	bl	8001064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2303      	movs	r3, #3
 8000a58:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fe4c 	bl	8003708 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a76:	f000 faf5 	bl	8001064 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3758      	adds	r7, #88	; 0x58
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000aa8:	4a2f      	ldr	r2, [pc, #188]	; (8000b68 <MX_ADC1_Init+0xe4>)
 8000aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aac:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b06:	4817      	ldr	r0, [pc, #92]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000b08:	f000 fef2 	bl	80018f0 <HAL_ADC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b12:	f000 faa7 	bl	8001064 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4810      	ldr	r0, [pc, #64]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000b22:	f001 fe53 	bl	80027cc <HAL_ADCEx_MultiModeConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b2c:	f000 fa9a 	bl	8001064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_ADC1_Init+0xe8>)
 8000b32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b34:	2306      	movs	r3, #6
 8000b36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b3c:	237f      	movs	r3, #127	; 0x7f
 8000b3e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b40:	2304      	movs	r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_ADC1_Init+0xe0>)
 8000b4e:	f001 f9c5 	bl	8001edc <HAL_ADC_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b58:	f000 fa84 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200010b8 	.word	0x200010b8
 8000b68:	50040000 	.word	0x50040000
 8000b6c:	14f00020 	.word	0x14f00020

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000b98:	220f      	movs	r2, #15
 8000b9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000ba4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ba8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb6:	4814      	ldr	r0, [pc, #80]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bb8:	f003 fc84 	bl	80044c4 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bc2:	f000 fa4f 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bd4:	f004 f9d4 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bde:	f000 fa41 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bf0:	f004 fee4 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f000 fa33 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20001124 	.word	0x20001124

08000c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c40:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <MX_TIM3_Init+0xec>)
 8000c42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c46:	2213      	movs	r2, #19
 8000c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c64:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c66:	f003 fc2d 	bl	80044c4 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c70:	f000 f9f8 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c82:	f004 f97d 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c8c:	f000 f9ea 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000c92:	f003 fd47 	bl	8004724 <HAL_TIM_PWM_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c9c:	f000 f9e2 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000cb0:	f004 fe84 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000cba:	f000 f9d3 	bl	8001064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000cc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000cd8:	f004 f842 	bl	8004d60 <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000ce2:	f000 f9bf 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce6:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_TIM3_Init+0xe8>)
 8000ce8:	f000 fa8a 	bl	8001200 <HAL_TIM_MspPostInit>

}
 8000cec:	bf00      	nop
 8000cee:	3738      	adds	r7, #56	; 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000106c 	.word	0x2000106c
 8000cf8:	40000400 	.word	0x40000400

08000cfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0b0      	sub	sp, #192	; 0xc0
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2288      	movs	r2, #136	; 0x88
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f007 fef6 	bl	8008b20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 ff04 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f000 f98b 	bl	8001064 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000d4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d52:	f7ff fbfb 	bl	800054c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fbc8 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000d5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f005 f807 	bl	8005d9e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000d90:	f7ff fa88 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2105      	movs	r1, #5
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fad8 	bl	8000350 <NVIC_EncodePriority>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4619      	mov	r1, r3
 8000da4:	2025      	movs	r0, #37	; 0x25
 8000da6:	f7ff faa9 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000daa:	2025      	movs	r0, #37	; 0x25
 8000dac:	f7ff fa88 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000db0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 8000ddc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <MX_USART1_UART_Init+0x128>)
 8000de4:	f005 fc7e 	bl	80066e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000de8:	480e      	ldr	r0, [pc, #56]	; (8000e24 <MX_USART1_UART_Init+0x128>)
 8000dea:	f7ff faf4 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_USART1_UART_Init+0x128>)
 8000df0:	f7ff fae1 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000df4:	2200      	movs	r2, #0
 8000df6:	2101      	movs	r1, #1
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	f005 fe8b 	bl	8006b14 <xQueueGenericCreate>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <MX_USART1_UART_Init+0x12c>)
 8000e02:	6013      	str	r3, [r2, #0]
   rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	2005      	movs	r0, #5
 8000e0a:	f005 fe83 	bl	8006b14 <xQueueGenericCreate>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0x130>)
 8000e12:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART1);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_USART1_UART_Init+0x128>)
 8000e16:	f7ff fb1a 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	37c0      	adds	r7, #192	; 0xc0
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40013800 	.word	0x40013800
 8000e28:	20001170 	.word	0x20001170
 8000e2c:	20001068 	.word	0x20001068

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0b0      	sub	sp, #192	; 0xc0
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2288      	movs	r2, #136	; 0x88
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 fe5c 	bl	8008b20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fe6a 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f8f1 	bl	8001064 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e86:	f7ff fb49 	bl	800051c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fb2e 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f004 ff6e 	bl	8005d9e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000ec2:	f7ff f9ef 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2105      	movs	r1, #5
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa3f 	bl	8000350 <NVIC_EncodePriority>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2026      	movs	r0, #38	; 0x26
 8000ed8:	f7ff fa10 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000edc:	2026      	movs	r0, #38	; 0x26
 8000ede:	f7ff f9ef 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ee2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000efc:	230c      	movs	r3, #12
 8000efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f12:	4619      	mov	r1, r3
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <MX_USART2_UART_Init+0x124>)
 8000f16:	f005 fbe5 	bl	80066e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_USART2_UART_Init+0x124>)
 8000f1c:	f7ff fa5b 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_USART2_UART_Init+0x124>)
 8000f22:	f7ff fa48 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000f26:	2200      	movs	r2, #0
 8000f28:	2101      	movs	r1, #1
 8000f2a:	2080      	movs	r0, #128	; 0x80
 8000f2c:	f005 fdf2 	bl	8006b14 <xQueueGenericCreate>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <MX_USART2_UART_Init+0x128>)
 8000f34:	6013      	str	r3, [r2, #0]
   rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000f36:	2200      	movs	r2, #0
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f005 fdea 	bl	8006b14 <xQueueGenericCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <MX_USART2_UART_Init+0x12c>)
 8000f44:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART2);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_USART2_UART_Init+0x124>)
 8000f48:	f7ff fa81 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	37c0      	adds	r7, #192	; 0xc0
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	2000111c 	.word	0x2000111c
 8000f5c:	20001120 	.word	0x20001120

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a24      	ldr	r2, [pc, #144]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a18      	ldr	r2, [pc, #96]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2132      	movs	r1, #50	; 0x32
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f001 ff31 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_GPIO_Init+0xc8>)
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_GPIO_Init+0xcc>)
 8000ff8:	f001 fd7a 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8000ffc:	2332      	movs	r3, #50	; 0x32
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f001 fd6b 	bl	8002af0 <HAL_GPIO_Init>

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	10210000 	.word	0x10210000
 800102c:	48000800 	.word	0x48000800

08001030 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f005 fc3a 	bl	80068b2 <osDelay>
 800103e:	e7fb      	b.n	8001038 <StartDefaultTask+0x8>

08001040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001052:	f000 fa49 	bl	80014e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40012c00 	.word	0x40012c00

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_MspInit+0x4c>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_MspInit+0x4c>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_MspInit+0x4c>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6593      	str	r3, [r2, #88]	; 0x58
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210f      	movs	r1, #15
 80010aa:	f06f 0001 	mvn.w	r0, #1
 80010ae:	f001 fcf5 	bl	8002a9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0ac      	sub	sp, #176	; 0xb0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2288      	movs	r2, #136	; 0x88
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 fd1d 	bl	8008b20 <memset>
  if(hadc->Instance==ADC1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_ADC_MspInit+0xc8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d147      	bne.n	8001180 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001106:	2308      	movs	r3, #8
 8001108:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800110a:	2307      	movs	r3, #7
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fd13 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800112c:	f7ff ff9a 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_ADC_MspInit+0xcc>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <HAL_ADC_MspInit+0xcc>)
 8001136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_ADC_MspInit+0xcc>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_ADC_MspInit+0xcc>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_ADC_MspInit+0xcc>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_ADC_MspInit+0xcc>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001160:	2301      	movs	r3, #1
 8001162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001166:	230b      	movs	r3, #11
 8001168:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f001 fcb8 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	37b0      	adds	r7, #176	; 0xb0
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	50040000 	.word	0x50040000
 800118c:	40021000 	.word	0x40021000

08001190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a0:	d10c      	bne.n	80011bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6593      	str	r3, [r2, #88]	; 0x58
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011ba:	e018      	b.n	80011ee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d113      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2105      	movs	r1, #5
 80011e2:	201d      	movs	r0, #29
 80011e4:	f001 fc5a 	bl	8002a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011e8:	201d      	movs	r0, #29
 80011ea:	f001 fc73 	bl	8002ad4 <HAL_NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40000400 	.word	0x40000400

08001200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a11      	ldr	r2, [pc, #68]	; (8001264 <HAL_TIM_MspPostInit+0x64>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d11c      	bne.n	800125c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_TIM_MspPostInit+0x68>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_TIM_MspPostInit+0x68>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_TIM_MspPostInit+0x68>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800124a:	2302      	movs	r3, #2
 800124c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f001 fc4a 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40000400 	.word	0x40000400
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	; 0x30
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	2019      	movs	r0, #25
 8001282:	f001 fc0b 	bl	8002a9c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001286:	2019      	movs	r0, #25
 8001288:	f001 fc24 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <HAL_InitTick+0x9c>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_InitTick+0x9c>)
 8001292:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001296:	6613      	str	r3, [r2, #96]	; 0x60
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_InitTick+0x9c>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012a4:	f107 0210 	add.w	r2, r7, #16
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fbba 	bl	8003a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012b4:	f002 fba2 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 80012b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012bc:	4a13      	ldr	r2, [pc, #76]	; (800130c <HAL_InitTick+0xa0>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0c9b      	lsrs	r3, r3, #18
 80012c4:	3b01      	subs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_InitTick+0xa4>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_InitTick+0xa8>)
 80012cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_InitTick+0xa4>)
 80012d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_InitTick+0xa4>)
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_InitTick+0xa4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_InitTick+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <HAL_InitTick+0xa4>)
 80012ea:	f003 f8eb 	bl	80044c4 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d104      	bne.n	80012fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <HAL_InitTick+0xa4>)
 80012f6:	f003 f9a5 	bl	8004644 <HAL_TIM_Base_Start_IT>
 80012fa:	4603      	mov	r3, r0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	431bde83 	.word	0x431bde83
 8001310:	20001174 	.word	0x20001174
 8001314:	40012c00 	.word	0x40012c00

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800134a:	f003 fbe9 	bl	8004b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20001174 	.word	0x20001174

08001358 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM3_IRQHandler+0x10>)
 800135e:	f003 fbdf 	bl	8004b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000106c 	.word	0x2000106c

0800136c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8001370:	f7ff fa88 	bl	8000884 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 800137c:	f7ff fa22 	bl	80007c4 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f007 fb7a 	bl	8008aac <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20018000 	.word	0x20018000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	2000034c 	.word	0x2000034c
 80013ec:	200011d8 	.word	0x200011d8

080013f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <SystemInit+0x5c>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <SystemInit+0x5c>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <SystemInit+0x60>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a11      	ldr	r2, [pc, #68]	; (8001450 <SystemInit+0x60>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <SystemInit+0x60>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <SystemInit+0x60>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <SystemInit+0x60>)
 800141c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001420:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001424:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <SystemInit+0x60>)
 8001428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800142c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <SystemInit+0x60>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <SystemInit+0x60>)
 8001434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SystemInit+0x60>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	40021000 	.word	0x40021000

08001454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800148c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff ffca 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800145c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800145e:	e003      	b.n	8001468 <LoopCopyDataInit>

08001460 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001462:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001464:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001466:	3104      	adds	r1, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <LoopForever+0xa>)
	ldr	r3, =_edata
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <LoopForever+0xe>)
	adds	r2, r0, r1
 800146c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800146e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001470:	d3f6      	bcc.n	8001460 <CopyDataInit>
	ldr	r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001474:	e002      	b.n	800147c <LoopFillZerobss>

08001476 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001476:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001478:	f842 3b04 	str.w	r3, [r2], #4

0800147c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <LoopForever+0x16>)
	cmp	r2, r3
 800147e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001480:	d3f9      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f007 fb19 	bl	8008ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001486:	f7ff fa5d 	bl	8000944 <main>

0800148a <LoopForever>:

LoopForever:
    b LoopForever
 800148a:	e7fe      	b.n	800148a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800148c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001490:	08009578 	.word	0x08009578
	ldr	r0, =_sdata
 8001494:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001498:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800149c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80014a0:	200011d4 	.word	0x200011d4

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_Init+0x3c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_Init+0x3c>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014be:	2003      	movs	r0, #3
 80014c0:	f001 fae1 	bl	8002a86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c4:	200f      	movs	r0, #15
 80014c6:	f7ff fed1 	bl	800126c <HAL_InitTick>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	e001      	b.n	80014da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d6:	f7ff fdcb 	bl	8001070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014da:	79fb      	ldrb	r3, [r7, #7]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	200011c0 	.word	0x200011c0

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200011c0 	.word	0x200011c0

08001528 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	609a      	str	r2, [r3, #8]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3360      	adds	r3, #96	; 0x60
 80015a2:	461a      	mov	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <LL_ADC_SetOffset+0x44>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	4313      	orrs	r3, r2
 80015c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	03fff000 	.word	0x03fff000

080015d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3360      	adds	r3, #96	; 0x60
 80015e6:	461a      	mov	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3360      	adds	r3, #96	; 0x60
 8001614:	461a      	mov	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3330      	adds	r3, #48	; 0x30
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	211f      	movs	r1, #31
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0e9b      	lsrs	r3, r3, #26
 8001698:	f003 011f 	and.w	r1, r3, #31
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	431a      	orrs	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3314      	adds	r3, #20
 80016c8:	461a      	mov	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0e5b      	lsrs	r3, r3, #25
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	0d1b      	lsrs	r3, r3, #20
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	2107      	movs	r1, #7
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	401a      	ands	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	0d1b      	lsrs	r3, r3, #20
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0318 	and.w	r3, r3, #24
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001734:	40d9      	lsrs	r1, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	400b      	ands	r3, r1
 800173a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173e:	431a      	orrs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	0007ffff 	.word	0x0007ffff

08001758 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 031f 	and.w	r3, r3, #31
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6093      	str	r3, [r2, #8]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017c8:	d101      	bne.n	80017ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001818:	d101      	bne.n	800181e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <LL_ADC_IsEnabled+0x18>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <LL_ADC_IsEnabled+0x1a>
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800188a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800188e:	f043 0204 	orr.w	r2, r3, #4
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d101      	bne.n	80018ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d101      	bne.n	80018e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e136      	b.n	8001b78 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fbd1 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff3f 	bl	80017b4 <LL_ADC_IsDeepPowerDownEnabled>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff25 	bl	8001790 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff5a 	bl	8001804 <LL_ADC_IsInternalRegulatorEnabled>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d115      	bne.n	8001982 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff3e 	bl	80017dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001960:	4b87      	ldr	r3, [pc, #540]	; (8001b80 <HAL_ADC_Init+0x290>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_ADC_Init+0x294>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	099b      	lsrs	r3, r3, #6
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001974:	e002      	b.n	800197c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff3c 	bl	8001804 <LL_ADC_IsInternalRegulatorEnabled>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10d      	bne.n	80019ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff75 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 80019b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 80cf 	bne.w	8001b66 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 80cb 	bne.w	8001b66 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019d8:	f043 0202 	orr.w	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff35 	bl	8001854 <LL_ADC_IsEnabled>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d115      	bne.n	8001a1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019f0:	4865      	ldr	r0, [pc, #404]	; (8001b88 <HAL_ADC_Init+0x298>)
 80019f2:	f7ff ff2f 	bl	8001854 <LL_ADC_IsEnabled>
 80019f6:	4604      	mov	r4, r0
 80019f8:	4864      	ldr	r0, [pc, #400]	; (8001b8c <HAL_ADC_Init+0x29c>)
 80019fa:	f7ff ff2b 	bl	8001854 <LL_ADC_IsEnabled>
 80019fe:	4603      	mov	r3, r0
 8001a00:	431c      	orrs	r4, r3
 8001a02:	4863      	ldr	r0, [pc, #396]	; (8001b90 <HAL_ADC_Init+0x2a0>)
 8001a04:	f7ff ff26 	bl	8001854 <LL_ADC_IsEnabled>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4619      	mov	r1, r3
 8001a16:	485f      	ldr	r0, [pc, #380]	; (8001b94 <HAL_ADC_Init+0x2a4>)
 8001a18:	f7ff fd86 	bl	8001528 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e5b      	ldrb	r3, [r3, #25]
 8001a20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d106      	bne.n	8001a58 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	045b      	lsls	r3, r3, #17
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d009      	beq.n	8001a74 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_ADC_Init+0x2a8>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff08 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff15 	bl	80018c8 <LL_ADC_INJ_IsConversionOngoing>
 8001a9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d13d      	bne.n	8001b22 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d13a      	bne.n	8001b22 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ab0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ab8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac8:	f023 0302 	bic.w	r3, r3, #2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	69b9      	ldr	r1, [r7, #24]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d118      	bne.n	8001b12 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001af6:	4311      	orrs	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001afc:	4311      	orrs	r1, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b02:	430a      	orrs	r2, r1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	e007      	b.n	8001b22 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10c      	bne.n	8001b44 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	f023 010f 	bic.w	r1, r3, #15
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
 8001b42:	e007      	b.n	8001b54 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 020f 	bic.w	r2, r2, #15
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	f023 0303 	bic.w	r3, r3, #3
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
 8001b64:	e007      	b.n	8001b76 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f043 0210 	orr.w	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	20000000 	.word	0x20000000
 8001b84:	053e2d63 	.word	0x053e2d63
 8001b88:	50040000 	.word	0x50040000
 8001b8c:	50040100 	.word	0x50040100
 8001b90:	50040200 	.word	0x50040200
 8001b94:	50040300 	.word	0x50040300
 8001b98:	fff0c007 	.word	0xfff0c007

08001b9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ba4:	4857      	ldr	r0, [pc, #348]	; (8001d04 <HAL_ADC_Start+0x168>)
 8001ba6:	f7ff fdd7 	bl	8001758 <LL_ADC_GetMultimode>
 8001baa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fe76 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 809c 	bne.w	8001cf6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_Start+0x30>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e097      	b.n	8001cfc <HAL_ADC_Start+0x160>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fd71 	bl	80026bc <ADC_Enable>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 8083 	bne.w	8001cec <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a42      	ldr	r2, [pc, #264]	; (8001d08 <HAL_ADC_Start+0x16c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d002      	beq.n	8001c0a <HAL_ADC_Start+0x6e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	e000      	b.n	8001c0c <HAL_ADC_Start+0x70>
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <HAL_ADC_Start+0x170>)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d002      	beq.n	8001c1a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c32:	d106      	bne.n	8001c42 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	f023 0206 	bic.w	r2, r3, #6
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	221c      	movs	r2, #28
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2a      	ldr	r2, [pc, #168]	; (8001d08 <HAL_ADC_Start+0x16c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d002      	beq.n	8001c68 <HAL_ADC_Start+0xcc>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_Start+0xce>
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_ADC_Start+0x170>)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d008      	beq.n	8001c84 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d114      	bne.n	8001cae <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fde7 	bl	800187a <LL_ADC_REG_StartConversion>
 8001cac:	e025      	b.n	8001cfa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_ADC_Start+0x16c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d002      	beq.n	8001cca <HAL_ADC_Start+0x12e>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e000      	b.n	8001ccc <HAL_ADC_Start+0x130>
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_ADC_Start+0x170>)
 8001ccc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00f      	beq.n	8001cfa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ce2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
 8001cea:	e006      	b.n	8001cfa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001cf4:	e001      	b.n	8001cfa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	50040300 	.word	0x50040300
 8001d08:	50040100 	.word	0x50040100
 8001d0c:	50040000 	.word	0x50040000

08001d10 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d1a:	4866      	ldr	r0, [pc, #408]	; (8001eb4 <HAL_ADC_PollForConversion+0x1a4>)
 8001d1c:	f7ff fd1c 	bl	8001758 <LL_ADC_GetMultimode>
 8001d20:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d102      	bne.n	8001d30 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e02a      	b.n	8001d86 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b09      	cmp	r3, #9
 8001d40:	d111      	bne.n	8001d66 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0a4      	b.n	8001eaa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d60:	2304      	movs	r3, #4
 8001d62:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d64:	e00f      	b.n	8001d86 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d66:	4853      	ldr	r0, [pc, #332]	; (8001eb4 <HAL_ADC_PollForConversion+0x1a4>)
 8001d68:	f7ff fd04 	bl	8001774 <LL_ADC_GetMultiDMATransfer>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e093      	b.n	8001eaa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d82:	2304      	movs	r3, #4
 8001d84:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d86:	f7ff fbc3 	bl	8001510 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d8c:	e021      	b.n	8001dd2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d94:	d01d      	beq.n	8001dd2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d96:	f7ff fbbb 	bl	8001510 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <HAL_ADC_PollForConversion+0x9c>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d112      	bne.n	8001dd2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10b      	bne.n	8001dd2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f043 0204 	orr.w	r2, r3, #4
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e06b      	b.n	8001eaa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0d6      	beq.n	8001d8e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fc22 	bl	800163a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01c      	beq.n	8001e36 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7e5b      	ldrb	r3, [r3, #25]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d118      	bne.n	8001e36 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d111      	bne.n	8001e36 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <HAL_ADC_PollForConversion+0x1a8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_PollForConversion+0x136>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	e000      	b.n	8001e48 <HAL_ADC_PollForConversion+0x138>
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_ADC_PollForConversion+0x1ac>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d008      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d002      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b09      	cmp	r3, #9
 8001e60:	d104      	bne.n	8001e6c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	e00c      	b.n	8001e86 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_ADC_PollForConversion+0x1a8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d002      	beq.n	8001e7c <HAL_ADC_PollForConversion+0x16c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_PollForConversion+0x16e>
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_ADC_PollForConversion+0x1ac>)
 8001e7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d104      	bne.n	8001e96 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2208      	movs	r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e008      	b.n	8001ea8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d103      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	50040300 	.word	0x50040300
 8001eb8:	50040100 	.word	0x50040100
 8001ebc:	50040000 	.word	0x50040000

08001ec0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0b6      	sub	sp, #216	; 0xd8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x22>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e3c7      	b.n	800268e <HAL_ADC_ConfigChannel+0x7b2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fcc9 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 83a8 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d824      	bhi.n	8001f6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	3b02      	subs	r3, #2
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d81b      	bhi.n	8001f62 <HAL_ADC_ConfigChannel+0x86>
 8001f2a:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <HAL_ADC_ConfigChannel+0x54>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	08001f41 	.word	0x08001f41
 8001f34:	08001f49 	.word	0x08001f49
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f59 	.word	0x08001f59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	220c      	movs	r2, #12
 8001f44:	605a      	str	r2, [r3, #4]
          break;
 8001f46:	e011      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2212      	movs	r2, #18
 8001f4c:	605a      	str	r2, [r3, #4]
          break;
 8001f4e:	e00d      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2218      	movs	r2, #24
 8001f54:	605a      	str	r2, [r3, #4]
          break;
 8001f56:	e009      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5e:	605a      	str	r2, [r3, #4]
          break;
 8001f60:	e004      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2206      	movs	r2, #6
 8001f66:	605a      	str	r2, [r3, #4]
          break;
 8001f68:	e000      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f7ff fb71 	bl	8001660 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fc8d 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001f88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc99 	bl	80018c8 <LL_ADC_INJ_IsConversionOngoing>
 8001f96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 81a6 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 81a1 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f7ff fb7c 	bl	80016b8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	08db      	lsrs	r3, r3, #3
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ff2:	f7ff facd 	bl	8001590 <LL_ADC_SetOffset>
 8001ff6:	e17b      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff faea 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x148>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fadf 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 021f 	and.w	r2, r3, #31
 8002022:	e01e      	b.n	8002062 <HAL_ADC_ConfigChannel+0x186>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fad4 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800204a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e004      	b.n	8002060 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_ADC_ConfigChannel+0x19e>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	e018      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1d0>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800208e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800209e:	2320      	movs	r3, #32
 80020a0:	e004      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80020a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff faa3 	bl	8001604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fa87 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x20e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fa7c 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	e01e      	b.n	8002128 <HAL_ADC_ConfigChannel+0x24c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fa71 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800210c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e004      	b.n	8002126 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800211c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x264>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	e018      	b.n	8002172 <HAL_ADC_ConfigChannel+0x296>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800215c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e004      	b.n	8002172 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002172:	429a      	cmp	r2, r3
 8002174:	d106      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	2101      	movs	r1, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fa40 	bl	8001604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fa24 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x2d4>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2102      	movs	r1, #2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fa19 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	f003 021f 	and.w	r2, r3, #31
 80021ae:	e01e      	b.n	80021ee <HAL_ADC_ConfigChannel+0x312>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fa0e 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e004      	b.n	80021ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80021e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x32a>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	e016      	b.n	8002234 <HAL_ADC_ConfigChannel+0x358>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800221a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800221e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e004      	b.n	8002234 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800222a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002234:	429a      	cmp	r2, r3
 8002236:	d106      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	2102      	movs	r1, #2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f9df 	bl	8001604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2103      	movs	r1, #3
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f9c3 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x396>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2103      	movs	r1, #3
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f9b8 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	0e9b      	lsrs	r3, r3, #26
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	e017      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x3c6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2103      	movs	r1, #3
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f9ad 	bl	80015d8 <LL_ADC_GetOffsetChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800228a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800228c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800228e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x3de>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e9b      	lsrs	r3, r3, #26
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	e011      	b.n	80022de <HAL_ADC_ConfigChannel+0x402>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e003      	b.n	80022de <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022de:	429a      	cmp	r2, r3
 80022e0:	d106      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2103      	movs	r1, #3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f98a 	bl	8001604 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff faad 	bl	8001854 <LL_ADC_IsEnabled>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 813f 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	461a      	mov	r2, r3
 8002310:	f7ff f9fe 	bl	8001710 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a8e      	ldr	r2, [pc, #568]	; (8002554 <HAL_ADC_ConfigChannel+0x678>)
 800231a:	4293      	cmp	r3, r2
 800231c:	f040 8130 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x46c>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2b09      	cmp	r3, #9
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e019      	b.n	800237c <HAL_ADC_ConfigChannel+0x4a0>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002358:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800235a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e003      	b.n	800236c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2b09      	cmp	r3, #9
 8002374:	bf94      	ite	ls
 8002376:	2301      	movls	r3, #1
 8002378:	2300      	movhi	r3, #0
 800237a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237c:	2b00      	cmp	r3, #0
 800237e:	d079      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_ADC_ConfigChannel+0x4c0>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	3301      	adds	r3, #1
 8002394:	069b      	lsls	r3, r3, #26
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	e015      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x4ec>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e003      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x50c>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	e017      	b.n	8002418 <HAL_ADC_ConfigChannel+0x53c>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	ea42 0103 	orr.w	r1, r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <HAL_ADC_ConfigChannel+0x562>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	3301      	adds	r3, #1
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	051b      	lsls	r3, r3, #20
 800243c:	e018      	b.n	8002470 <HAL_ADC_ConfigChannel+0x594>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e003      	b.n	8002462 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	430b      	orrs	r3, r1
 8002472:	e080      	b.n	8002576 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x5b4>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	069b      	lsls	r3, r3, #26
 800248a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248e:	e015      	b.n	80024bc <HAL_ADC_ConfigChannel+0x5e0>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x600>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	e017      	b.n	800250c <HAL_ADC_ConfigChannel+0x630>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	61fb      	str	r3, [r7, #28]
  return result;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	ea42 0103 	orr.w	r1, r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10d      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x65c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	3b1e      	subs	r3, #30
 8002530:	051b      	lsls	r3, r3, #20
 8002532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002536:	e01d      	b.n	8002574 <HAL_ADC_ConfigChannel+0x698>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	613b      	str	r3, [r7, #16]
  return result;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e005      	b.n	8002560 <HAL_ADC_ConfigChannel+0x684>
 8002554:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	051b      	lsls	r3, r3, #20
 8002570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002574:	430b      	orrs	r3, r1
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	4619      	mov	r1, r3
 800257c:	f7ff f89c 	bl	80016b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_ADC_ConfigChannel+0x7bc>)
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d07a      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800258c:	4843      	ldr	r0, [pc, #268]	; (800269c <HAL_ADC_ConfigChannel+0x7c0>)
 800258e:	f7fe fff1 	bl	8001574 <LL_ADC_GetCommonPathInternalCh>
 8002592:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a41      	ldr	r2, [pc, #260]	; (80026a0 <HAL_ADC_ConfigChannel+0x7c4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d12c      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d126      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a3c      	ldr	r2, [pc, #240]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0x6e4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d15d      	bne.n	800267c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025c8:	4619      	mov	r1, r3
 80025ca:	4834      	ldr	r0, [pc, #208]	; (800269c <HAL_ADC_ConfigChannel+0x7c0>)
 80025cc:	f7fe ffbf 	bl	800154e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_ADC_ConfigChannel+0x7d0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	4a36      	ldr	r2, [pc, #216]	; (80026b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ea:	e002      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f9      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f8:	e040      	b.n	800267c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d118      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x75a>
 8002604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d112      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d004      	beq.n	8002624 <HAL_ADC_ConfigChannel+0x748>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d12d      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262c:	4619      	mov	r1, r3
 800262e:	481b      	ldr	r0, [pc, #108]	; (800269c <HAL_ADC_ConfigChannel+0x7c0>)
 8002630:	f7fe ff8d 	bl	800154e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002634:	e024      	b.n	8002680 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_ADC_ConfigChannel+0x7dc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d120      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11a      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d115      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800265e:	4619      	mov	r1, r3
 8002660:	480e      	ldr	r0, [pc, #56]	; (800269c <HAL_ADC_ConfigChannel+0x7c0>)
 8002662:	f7fe ff74 	bl	800154e <LL_ADC_SetCommonPathInternalCh>
 8002666:	e00c      	b.n	8002682 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800267a:	e002      	b.n	8002682 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002680:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800268a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800268e:	4618      	mov	r0, r3
 8002690:	37d8      	adds	r7, #216	; 0xd8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	80080000 	.word	0x80080000
 800269c:	50040300 	.word	0x50040300
 80026a0:	c7520000 	.word	0xc7520000
 80026a4:	50040000 	.word	0x50040000
 80026a8:	50040200 	.word	0x50040200
 80026ac:	20000000 	.word	0x20000000
 80026b0:	053e2d63 	.word	0x053e2d63
 80026b4:	cb840000 	.word	0xcb840000
 80026b8:	80000001 	.word	0x80000001

080026bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff f8c3 	bl	8001854 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d14d      	bne.n	8002770 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	4b28      	ldr	r3, [pc, #160]	; (800277c <ADC_Enable+0xc0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e039      	b.n	8002772 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f892 	bl	800182c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002708:	f7fe ff02 	bl	8001510 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800270e:	e028      	b.n	8002762 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f89d 	bl	8001854 <LL_ADC_IsEnabled>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff f881 	bl	800182c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800272a:	f7fe fef1 	bl	8001510 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d914      	bls.n	8002762 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d00d      	beq.n	8002762 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e007      	b.n	8002772 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d1cf      	bne.n	8002710 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	8000003f 	.word	0x8000003f

08002780 <LL_ADC_IsEnabled>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <LL_ADC_IsEnabled+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_IsEnabled+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d101      	bne.n	80027be <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b09f      	sub	sp, #124	; 0x7c
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e093      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80027f2:	2300      	movs	r3, #0
 80027f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80027f6:	2300      	movs	r3, #0
 80027f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a47      	ldr	r2, [pc, #284]	; (800291c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002804:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	e001      	b.n	800280e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e072      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ffb9 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002834:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ffb3 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d154      	bne.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002848:	2b00      	cmp	r3, #0
 800284a:	d151      	bne.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800284c:	4b35      	ldr	r3, [pc, #212]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800284e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02c      	beq.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800286a:	035b      	lsls	r3, r3, #13
 800286c:	430b      	orrs	r3, r1
 800286e:	431a      	orrs	r2, r3
 8002870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002872:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002874:	4829      	ldr	r0, [pc, #164]	; (800291c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002876:	f7ff ff83 	bl	8002780 <LL_ADC_IsEnabled>
 800287a:	4604      	mov	r4, r0
 800287c:	4828      	ldr	r0, [pc, #160]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800287e:	f7ff ff7f 	bl	8002780 <LL_ADC_IsEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	431c      	orrs	r4, r3
 8002886:	4828      	ldr	r0, [pc, #160]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002888:	f7ff ff7a 	bl	8002780 <LL_ADC_IsEnabled>
 800288c:	4603      	mov	r3, r0
 800288e:	4323      	orrs	r3, r4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d137      	bne.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800289c:	f023 030f 	bic.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	6892      	ldr	r2, [r2, #8]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	431a      	orrs	r2, r3
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028b0:	e028      	b.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028be:	4817      	ldr	r0, [pc, #92]	; (800291c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028c0:	f7ff ff5e 	bl	8002780 <LL_ADC_IsEnabled>
 80028c4:	4604      	mov	r4, r0
 80028c6:	4816      	ldr	r0, [pc, #88]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028c8:	f7ff ff5a 	bl	8002780 <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	431c      	orrs	r4, r3
 80028d0:	4815      	ldr	r0, [pc, #84]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028d2:	f7ff ff55 	bl	8002780 <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4323      	orrs	r3, r4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d112      	bne.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028e6:	f023 030f 	bic.w	r3, r3, #15
 80028ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028ee:	e009      	b.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002902:	e000      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002904:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800290e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002912:	4618      	mov	r0, r3
 8002914:	377c      	adds	r7, #124	; 0x7c
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	50040000 	.word	0x50040000
 8002920:	50040100 	.word	0x50040100
 8002924:	50040300 	.word	0x50040300
 8002928:	50040200 	.word	0x50040200

0800292c <__NVIC_SetPriorityGrouping>:
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ff4c 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aae:	f7ff ff61 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002ab2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	6978      	ldr	r0, [r7, #20]
 8002aba:	f7ff ffb1 	bl	8002a20 <NVIC_EncodePriority>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff80 	bl	80029cc <__NVIC_SetPriority>
}
 8002acc:	bf00      	nop
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff54 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afe:	e17f      	b.n	8002e00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8171 	beq.w	8002dfa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d00b      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d007      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b2c:	2b11      	cmp	r3, #17
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b12      	cmp	r3, #18
 8002b36:	d130      	bne.n	8002b9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6e:	2201      	movs	r2, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 0201 	and.w	r2, r3, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d118      	bne.n	8002bd8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x128>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b12      	cmp	r3, #18
 8002c16:	d123      	bne.n	8002c60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	220f      	movs	r2, #15
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	6939      	ldr	r1, [r7, #16]
 8002c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80ac 	beq.w	8002dfa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	4b5f      	ldr	r3, [pc, #380]	; (8002e20 <HAL_GPIO_Init+0x330>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	4a5e      	ldr	r2, [pc, #376]	; (8002e20 <HAL_GPIO_Init+0x330>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6613      	str	r3, [r2, #96]	; 0x60
 8002cae:	4b5c      	ldr	r3, [pc, #368]	; (8002e20 <HAL_GPIO_Init+0x330>)
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cba:	4a5a      	ldr	r2, [pc, #360]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ce4:	d025      	beq.n	8002d32 <HAL_GPIO_Init+0x242>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	; (8002e28 <HAL_GPIO_Init+0x338>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <HAL_GPIO_Init+0x23e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4e      	ldr	r2, [pc, #312]	; (8002e2c <HAL_GPIO_Init+0x33c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_GPIO_Init+0x23a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4d      	ldr	r2, [pc, #308]	; (8002e30 <HAL_GPIO_Init+0x340>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x236>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_GPIO_Init+0x344>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x232>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4b      	ldr	r2, [pc, #300]	; (8002e38 <HAL_GPIO_Init+0x348>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x22e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4a      	ldr	r2, [pc, #296]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x22a>
 8002d16:	2306      	movs	r3, #6
 8002d18:	e00c      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e00a      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d1e:	2305      	movs	r3, #5
 8002d20:	e008      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d22:	2304      	movs	r3, #4
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d26:	2303      	movs	r3, #3
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d32:	2300      	movs	r3, #0
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	f002 0203 	and.w	r2, r2, #3
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d44:	4937      	ldr	r1, [pc, #220]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d76:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d7c:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002df4:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <HAL_GPIO_Init+0x350>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f47f ae78 	bne.w	8002b00 <HAL_GPIO_Init+0x10>
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010000 	.word	0x40010000
 8002e28:	48000400 	.word	0x48000400
 8002e2c:	48000800 	.word	0x48000800
 8002e30:	48000c00 	.word	0x48000c00
 8002e34:	48001000 	.word	0x48001000
 8002e38:	48001400 	.word	0x48001400
 8002e3c:	48001800 	.word	0x48001800
 8002e40:	40010400 	.word	0x40010400

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40007000 	.word	0x40007000

08002e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9e:	d130      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d038      	beq.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2232      	movs	r2, #50	; 0x32
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed4:	e002      	b.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d102      	bne.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f2      	bne.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d110      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e00f      	b.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d007      	beq.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f18:	4a05      	ldr	r2, [pc, #20]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40007000 	.word	0x40007000
 8002f34:	20000000 	.word	0x20000000
 8002f38:	431bde83 	.word	0x431bde83

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e3d4      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4ba1      	ldr	r3, [pc, #644]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	4b9e      	ldr	r3, [pc, #632]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80e4 	beq.w	8003138 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4a>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	f040 808b 	bne.w	8003094 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 8087 	bne.w	8003094 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f86:	4b93      	ldr	r3, [pc, #588]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x62>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e3ac      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	4b8c      	ldr	r3, [pc, #560]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x7c>
 8002fae:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCC_OscConfig+0x88>
 8002fb8:	4b86      	ldr	r3, [pc, #536]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d223      	bcs.n	8003010 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fd5d 	bl	8003a8c <RCC_SetFlashLatencyFromMSIRange>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e38d      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fdc:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a7c      	ldr	r2, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b7a      	ldr	r3, [pc, #488]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4977      	ldr	r1, [pc, #476]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffa:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	4972      	ldr	r1, [pc, #456]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
 800300e:	e025      	b.n	800305c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003010:	4b70      	ldr	r3, [pc, #448]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6f      	ldr	r2, [pc, #444]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	496a      	ldr	r1, [pc, #424]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800302e:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	4965      	ldr	r1, [pc, #404]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fd1d 	bl	8003a8c <RCC_SetFlashLatencyFromMSIRange>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e34d      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800305c:	f000 fc36 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	495a      	ldr	r1, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x29c>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_RCC_OscConfig+0x2a0>)
 800307a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800307c:	4b58      	ldr	r3, [pc, #352]	; (80031e0 <HAL_RCC_OscConfig+0x2a4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe f8f3 	bl	800126c <HAL_InitTick>
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d052      	beq.n	8003136 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	e331      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d032      	beq.n	8003102 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800309c:	4b4d      	ldr	r3, [pc, #308]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a4c      	ldr	r2, [pc, #304]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fa32 	bl	8001510 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b0:	f7fe fa2e 	bl	8001510 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e31a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c2:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	493b      	ldr	r1, [pc, #236]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	4936      	ldr	r1, [pc, #216]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	e01a      	b.n	8003138 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800310e:	f7fe f9ff 	bl	8001510 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003116:	f7fe f9fb 	bl	8001510 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e2e7      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x1da>
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003136:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d074      	beq.n	800322e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x21a>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d10e      	bne.n	800316e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d10b      	bne.n	800316e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d064      	beq.n	800322c <HAL_RCC_OscConfig+0x2f0>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d160      	bne.n	800322c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e2c4      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x24a>
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e01d      	b.n	80031c2 <HAL_RCC_OscConfig+0x286>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800318e:	d10c      	bne.n	80031aa <HAL_RCC_OscConfig+0x26e>
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 8003196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e00b      	b.n	80031c2 <HAL_RCC_OscConfig+0x286>
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a06      	ldr	r2, [pc, #24]	; (80031d4 <HAL_RCC_OscConfig+0x298>)
 80031bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01c      	beq.n	8003204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe f9a1 	bl	8001510 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d0:	e011      	b.n	80031f6 <HAL_RCC_OscConfig+0x2ba>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08009494 	.word	0x08009494
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe f994 	bl	8001510 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e280      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	4baf      	ldr	r3, [pc, #700]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x2a8>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe f984 	bl	8001510 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe f980 	bl	8001510 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e26c      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	4ba5      	ldr	r3, [pc, #660]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x2d0>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d060      	beq.n	80032fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x310>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d119      	bne.n	800327a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d116      	bne.n	800327a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324c:	4b99      	ldr	r3, [pc, #612]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_OscConfig+0x328>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e249      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b93      	ldr	r3, [pc, #588]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	4990      	ldr	r1, [pc, #576]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	e040      	b.n	80032fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d023      	beq.n	80032ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003282:	4b8c      	ldr	r3, [pc, #560]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a8b      	ldr	r2, [pc, #556]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe f93f 	bl	8001510 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003296:	f7fe f93b 	bl	8001510 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e227      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	4b82      	ldr	r3, [pc, #520]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b7f      	ldr	r3, [pc, #508]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	497c      	ldr	r1, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	e018      	b.n	80032fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ca:	4b7a      	ldr	r3, [pc, #488]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a79      	ldr	r2, [pc, #484]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80032d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe f91b 	bl	8001510 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe f917 	bl	8001510 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e203      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d03c      	beq.n	8003382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01c      	beq.n	800334a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003310:	4b68      	ldr	r3, [pc, #416]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	4a67      	ldr	r2, [pc, #412]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe f8f6 	bl	8001510 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003328:	f7fe f8f2 	bl	8001510 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1de      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333a:	4b5e      	ldr	r3, [pc, #376]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 800333c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ef      	beq.n	8003328 <HAL_RCC_OscConfig+0x3ec>
 8003348:	e01b      	b.n	8003382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334a:	4b5a      	ldr	r3, [pc, #360]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 800334c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003350:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fe f8d9 	bl	8001510 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7fe f8d5 	bl	8001510 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1c1      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ef      	bne.n	8003362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80a6 	beq.w	80034dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003394:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a43      	ldr	r2, [pc, #268]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
 80033ac:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033bc:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <HAL_RCC_OscConfig+0x57c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d118      	bne.n	80033fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCC_OscConfig+0x57c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a3a      	ldr	r2, [pc, #232]	; (80034b8 <HAL_RCC_OscConfig+0x57c>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d4:	f7fe f89c 	bl	8001510 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7fe f898 	bl	8001510 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e184      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ee:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <HAL_RCC_OscConfig+0x57c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <HAL_RCC_OscConfig+0x4d8>
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003412:	e024      	b.n	800345e <HAL_RCC_OscConfig+0x522>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d110      	bne.n	800343e <HAL_RCC_OscConfig+0x502>
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342c:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	4a20      	ldr	r2, [pc, #128]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343c:	e00f      	b.n	800345e <HAL_RCC_OscConfig+0x522>
 800343e:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe f853 	bl	8001510 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe f84f 	bl	8001510 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e139      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_OscConfig+0x578>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ed      	beq.n	800346e <HAL_RCC_OscConfig+0x532>
 8003492:	e01a      	b.n	80034ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe f83c 	bl	8001510 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349a:	e00f      	b.n	80034bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fe f838 	bl	8001510 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d906      	bls.n	80034bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e122      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034bc:	4b90      	ldr	r3, [pc, #576]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e8      	bne.n	800349c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ca:	7ffb      	ldrb	r3, [r7, #31]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b8b      	ldr	r3, [pc, #556]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	4a8a      	ldr	r2, [pc, #552]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8108 	beq.w	80036f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	f040 80d0 	bne.w	8003690 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034f0:	4b83      	ldr	r3, [pc, #524]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d130      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	3b01      	subs	r3, #1
 8003510:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d127      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003520:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d11f      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003530:	2a07      	cmp	r2, #7
 8003532:	bf14      	ite	ne
 8003534:	2201      	movne	r2, #1
 8003536:	2200      	moveq	r2, #0
 8003538:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353a:	4293      	cmp	r3, r2
 800353c:	d113      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	3b01      	subs	r3, #1
 800354c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d109      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d06e      	beq.n	8003644 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d069      	beq.n	8003640 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800356c:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b7      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003588:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5c      	ldr	r2, [pc, #368]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003594:	f7fd ffbc 	bl	8001510 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7fd ffb8 	bl	8001510 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e0a4      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ae:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ba:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	4b51      	ldr	r3, [pc, #324]	; (8003704 <HAL_RCC_OscConfig+0x7c8>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d4:	0212      	lsls	r2, r2, #8
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035dc:	0852      	lsrs	r2, r2, #1
 80035de:	3a01      	subs	r2, #1
 80035e0:	0552      	lsls	r2, r2, #21
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035e8:	0852      	lsrs	r2, r2, #1
 80035ea:	3a01      	subs	r2, #1
 80035ec:	0652      	lsls	r2, r2, #25
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f4:	0912      	lsrs	r2, r2, #4
 80035f6:	0452      	lsls	r2, r2, #17
 80035f8:	430a      	orrs	r2, r1
 80035fa:	4941      	ldr	r1, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3e      	ldr	r2, [pc, #248]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800360c:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003618:	f7fd ff7a 	bl	8001510 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd ff76 	bl	8001510 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e062      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	4b33      	ldr	r3, [pc, #204]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800363e:	e05a      	b.n	80036f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e059      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003644:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d152      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003668:	f7fd ff52 	bl	8001510 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd ff4e 	bl	8001510 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e03a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x734>
 800368e:	e032      	b.n	80036f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d02d      	beq.n	80036f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 800369c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80036b4:	f023 0303 	bic.w	r3, r3, #3
 80036b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80036c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fd ff21 	bl	8001510 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fd ff1d 	bl	8001510 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e009      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_OscConfig+0x7c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x796>
 80036f0:	e001      	b.n	80036f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	f99d808c 	.word	0xf99d808c

08003708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0c8      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b66      	ldr	r3, [pc, #408]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d910      	bls.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4961      	ldr	r1, [pc, #388]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0b0      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d04c      	beq.n	80037f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003760:	4b56      	ldr	r3, [pc, #344]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d121      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e09e      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e092      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e086      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e07e      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b0:	4b42      	ldr	r3, [pc, #264]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 0203 	bic.w	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	493f      	ldr	r1, [pc, #252]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c2:	f7fd fea5 	bl	8001510 <HAL_GetTick>
 80037c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ca:	f7fd fea1 	bl	8001510 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e066      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 020c 	and.w	r2, r3, #12
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d1eb      	bne.n	80037ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fe:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	492c      	ldr	r1, [pc, #176]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003810:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d210      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 0207 	bic.w	r2, r3, #7
 8003826:	4924      	ldr	r1, [pc, #144]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e036      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4918      	ldr	r1, [pc, #96]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4910      	ldr	r1, [pc, #64]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800387e:	f000 f825 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_RCC_ClockConfig+0x1b4>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	490c      	ldr	r1, [pc, #48]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fce2 	bl	800126c <HAL_InitTick>
 80038a8:	4603      	mov	r3, r0
 80038aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ac:	7afb      	ldrb	r3, [r7, #11]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40022000 	.word	0x40022000
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08009494 	.word	0x08009494
 80038c4:	20000000 	.word	0x20000000
 80038c8:	20000004 	.word	0x20000004

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038da:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e4:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x34>
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d121      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d11e      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800390c:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e005      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003928:	4a2b      	ldr	r2, [pc, #172]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d102      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003944:	4b25      	ldr	r3, [pc, #148]	; (80039dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e004      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d101      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003950:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d134      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d003      	beq.n	8003972 <HAL_RCC_GetSysClockFreq+0xa6>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d003      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0xac>
 8003970:	e005      	b.n	800397e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003972:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003974:	617b      	str	r3, [r7, #20]
      break;
 8003976:	e005      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800397a:	617b      	str	r3, [r7, #20]
      break;
 800397c:	e002      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	617b      	str	r3, [r7, #20]
      break;
 8003982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	3301      	adds	r3, #1
 8003990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	fb02 f203 	mul.w	r2, r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	0e5b      	lsrs	r3, r3, #25
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	3301      	adds	r3, #1
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039c4:	69bb      	ldr	r3, [r7, #24]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	080094ac 	.word	0x080094ac
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	007a1200 	.word	0x007a1200

080039e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a00:	f7ff fff0 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0adb      	lsrs	r3, r3, #11
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4904      	ldr	r1, [pc, #16]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	080094a4 	.word	0x080094a4

08003a28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	220f      	movs	r2, #15
 8003a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_GetClockConfig+0x5c>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0203 	and.w	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <HAL_RCC_GetClockConfig+0x5c>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCC_GetClockConfig+0x5c>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_GetClockConfig+0x5c>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_RCC_GetClockConfig+0x60>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0207 	and.w	r2, r3, #7
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	601a      	str	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40022000 	.word	0x40022000

08003a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aa4:	f7ff f9e6 	bl	8002e74 <HAL_PWREx_GetVoltageRange>
 8003aa8:	6178      	str	r0, [r7, #20]
 8003aaa:	e014      	b.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab8:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ac4:	f7ff f9d6 	bl	8002e74 <HAL_PWREx_GetVoltageRange>
 8003ac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003adc:	d10b      	bne.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d919      	bls.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ae8:	d902      	bls.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aea:	2302      	movs	r3, #2
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e013      	b.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af0:	2301      	movs	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e010      	b.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d902      	bls.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003afc:	2303      	movs	r3, #3
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e00a      	b.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d102      	bne.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b08:	2302      	movs	r3, #2
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	e004      	b.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d101      	bne.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b14:	2301      	movs	r3, #1
 8003b16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 0207 	bic.w	r2, r3, #7
 8003b20:	4909      	ldr	r1, [pc, #36]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d001      	beq.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40022000 	.word	0x40022000

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b54:	2300      	movs	r3, #0
 8003b56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d041      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b70:	d02a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b76:	d824      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b82:	d81e      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8c:	d010      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b8e:	e018      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b90:	4b86      	ldr	r3, [pc, #536]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a85      	ldr	r2, [pc, #532]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9c:	e015      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fabb 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bae:	e00c      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3320      	adds	r3, #32
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fba6 	bl	8004308 <RCCEx_PLLSAI2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc0:	e003      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd0:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bde:	4973      	ldr	r1, [pc, #460]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003be6:	e001      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d041      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c00:	d02a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c06:	d824      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c0c:	d008      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c12:	d81e      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c1e:	e018      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c20:	4b62      	ldr	r3, [pc, #392]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4a61      	ldr	r2, [pc, #388]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c2c:	e015      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fa73 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c3e:	e00c      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3320      	adds	r3, #32
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fb5e 	bl	8004308 <RCCEx_PLLSAI2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c50:	e003      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	74fb      	strb	r3, [r7, #19]
      break;
 8003c56:	e000      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c60:	4b52      	ldr	r3, [pc, #328]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6e:	494f      	ldr	r1, [pc, #316]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c76:	e001      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	7cfb      	ldrb	r3, [r7, #19]
 8003c7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a0 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	4a40      	ldr	r2, [pc, #256]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb0:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ccc:	f7fd fc20 	bl	8001510 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd2:	e009      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd4:	f7fd fc1c 	bl	8001510 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d902      	bls.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ce6:	e005      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ce8:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ef      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d15c      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01f      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d019      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d18:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d24:	4b21      	ldr	r3, [pc, #132]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	4a20      	ldr	r2, [pc, #128]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd fbdb 	bl	8001510 <HAL_GetTick>
 8003d5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fd fbd7 	bl	8001510 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d902      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	74fb      	strb	r3, [r7, #19]
            break;
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ec      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8a:	4b08      	ldr	r3, [pc, #32]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9a:	4904      	ldr	r1, [pc, #16]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003da2:	e009      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	74bb      	strb	r3, [r7, #18]
 8003da8:	e006      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db8:	7c7b      	ldrb	r3, [r7, #17]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbe:	4b9e      	ldr	r3, [pc, #632]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	4a9d      	ldr	r2, [pc, #628]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd6:	4b98      	ldr	r3, [pc, #608]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f023 0203 	bic.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	4994      	ldr	r1, [pc, #592]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 020c 	bic.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	498c      	ldr	r1, [pc, #560]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1a:	4b87      	ldr	r3, [pc, #540]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	4983      	ldr	r1, [pc, #524]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e3c:	4b7e      	ldr	r3, [pc, #504]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	497b      	ldr	r1, [pc, #492]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e5e:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	4972      	ldr	r1, [pc, #456]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e80:	4b6d      	ldr	r3, [pc, #436]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	496a      	ldr	r1, [pc, #424]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	4961      	ldr	r1, [pc, #388]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ec4:	4b5c      	ldr	r3, [pc, #368]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	4959      	ldr	r1, [pc, #356]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee6:	4b54      	ldr	r3, [pc, #336]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	4950      	ldr	r1, [pc, #320]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	4948      	ldr	r1, [pc, #288]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f2a:	4b43      	ldr	r3, [pc, #268]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	493f      	ldr	r1, [pc, #252]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d028      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f4c:	4b3a      	ldr	r3, [pc, #232]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5a:	4937      	ldr	r1, [pc, #220]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6c:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a31      	ldr	r2, [pc, #196]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f76:	60d3      	str	r3, [r2, #12]
 8003f78:	e011      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f82:	d10c      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f8c8 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d028      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	491f      	ldr	r1, [pc, #124]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd4:	60d3      	str	r3, [r2, #12]
 8003fd6:	e011      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f899 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d02b      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	4908      	ldr	r1, [pc, #32]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004026:	d109      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4a02      	ldr	r2, [pc, #8]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004032:	60d3      	str	r3, [r2, #12]
 8004034:	e014      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004044:	d10c      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f000 f867 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004056:	7cfb      	ldrb	r3, [r7, #19]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02f      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800406c:	4b2b      	ldr	r3, [pc, #172]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800407a:	4928      	ldr	r1, [pc, #160]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408a:	d10d      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f844 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d014      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
 80040a6:	e011      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3320      	adds	r3, #32
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f925 	bl	8004308 <RCCEx_PLLSAI2_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e6:	490d      	ldr	r1, [pc, #52]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410a:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004112:	7cbb      	ldrb	r3, [r7, #18]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000

08004120 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800412e:	4b75      	ldr	r3, [pc, #468]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d018      	beq.n	800416c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800413a:	4b72      	ldr	r3, [pc, #456]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0203 	and.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d10d      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
       ||
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004152:	4b6c      	ldr	r3, [pc, #432]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	091b      	lsrs	r3, r3, #4
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
       ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d047      	beq.n	80041f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	e044      	b.n	80041f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d018      	beq.n	80041a6 <RCCEx_PLLSAI1_Config+0x86>
 8004174:	2b03      	cmp	r3, #3
 8004176:	d825      	bhi.n	80041c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004178:	2b01      	cmp	r3, #1
 800417a:	d002      	beq.n	8004182 <RCCEx_PLLSAI1_Config+0x62>
 800417c:	2b02      	cmp	r3, #2
 800417e:	d009      	beq.n	8004194 <RCCEx_PLLSAI1_Config+0x74>
 8004180:	e020      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004182:	4b60      	ldr	r3, [pc, #384]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11d      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004192:	e01a      	b.n	80041ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004194:	4b5b      	ldr	r3, [pc, #364]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a4:	e013      	b.n	80041ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041a6:	4b57      	ldr	r3, [pc, #348]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b2:	4b54      	ldr	r3, [pc, #336]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c2:	e006      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	e004      	b.n	80041d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ca:	bf00      	nop
 80041cc:	e002      	b.n	80041d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041da:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	430b      	orrs	r3, r1
 80041f0:	4944      	ldr	r1, [pc, #272]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d17d      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041fc:	4b41      	ldr	r3, [pc, #260]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a40      	ldr	r2, [pc, #256]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004208:	f7fd f982 	bl	8001510 <HAL_GetTick>
 800420c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800420e:	e009      	b.n	8004224 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004210:	f7fd f97e 	bl	8001510 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d902      	bls.n	8004224 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	73fb      	strb	r3, [r7, #15]
        break;
 8004222:	e005      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ef      	bne.n	8004210 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d160      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d111      	bne.n	8004260 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800423c:	4b31      	ldr	r3, [pc, #196]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6892      	ldr	r2, [r2, #8]
 800424c:	0211      	lsls	r1, r2, #8
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68d2      	ldr	r2, [r2, #12]
 8004252:	0912      	lsrs	r2, r2, #4
 8004254:	0452      	lsls	r2, r2, #17
 8004256:	430a      	orrs	r2, r1
 8004258:	492a      	ldr	r1, [pc, #168]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	610b      	str	r3, [r1, #16]
 800425e:	e027      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d112      	bne.n	800428c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800426e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6892      	ldr	r2, [r2, #8]
 8004276:	0211      	lsls	r1, r2, #8
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6912      	ldr	r2, [r2, #16]
 800427c:	0852      	lsrs	r2, r2, #1
 800427e:	3a01      	subs	r2, #1
 8004280:	0552      	lsls	r2, r2, #21
 8004282:	430a      	orrs	r2, r1
 8004284:	491f      	ldr	r1, [pc, #124]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	610b      	str	r3, [r1, #16]
 800428a:	e011      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004294:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	0211      	lsls	r1, r2, #8
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6952      	ldr	r2, [r2, #20]
 80042a2:	0852      	lsrs	r2, r2, #1
 80042a4:	3a01      	subs	r2, #1
 80042a6:	0652      	lsls	r2, r2, #25
 80042a8:	430a      	orrs	r2, r1
 80042aa:	4916      	ldr	r1, [pc, #88]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042b0:	4b14      	ldr	r3, [pc, #80]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a13      	ldr	r2, [pc, #76]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fd f928 	bl	8001510 <HAL_GetTick>
 80042c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c2:	e009      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c4:	f7fd f924 	bl	8001510 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d902      	bls.n	80042d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	73fb      	strb	r3, [r7, #15]
          break;
 80042d6:	e005      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ef      	beq.n	80042c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	4904      	ldr	r1, [pc, #16]	; (8004304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000

08004308 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004316:	4b6a      	ldr	r3, [pc, #424]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004322:	4b67      	ldr	r3, [pc, #412]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0203 	and.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d10d      	bne.n	800434e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
       ||
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800433a:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
       ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d047      	beq.n	80043de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	e044      	b.n	80043de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d018      	beq.n	800438e <RCCEx_PLLSAI2_Config+0x86>
 800435c:	2b03      	cmp	r3, #3
 800435e:	d825      	bhi.n	80043ac <RCCEx_PLLSAI2_Config+0xa4>
 8004360:	2b01      	cmp	r3, #1
 8004362:	d002      	beq.n	800436a <RCCEx_PLLSAI2_Config+0x62>
 8004364:	2b02      	cmp	r3, #2
 8004366:	d009      	beq.n	800437c <RCCEx_PLLSAI2_Config+0x74>
 8004368:	e020      	b.n	80043ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800436a:	4b55      	ldr	r3, [pc, #340]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11d      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437a:	e01a      	b.n	80043b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800437c:	4b50      	ldr	r3, [pc, #320]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438c:	e013      	b.n	80043b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800438e:	4b4c      	ldr	r3, [pc, #304]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800439a:	4b49      	ldr	r3, [pc, #292]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043aa:	e006      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      break;
 80043b0:	e004      	b.n	80043bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10d      	bne.n	80043de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043c2:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	430b      	orrs	r3, r1
 80043d8:	4939      	ldr	r1, [pc, #228]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d167      	bne.n	80044b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043e4:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a35      	ldr	r2, [pc, #212]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f0:	f7fd f88e 	bl	8001510 <HAL_GetTick>
 80043f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043f6:	e009      	b.n	800440c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043f8:	f7fd f88a 	bl	8001510 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d902      	bls.n	800440c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	73fb      	strb	r3, [r7, #15]
        break;
 800440a:	e005      	b.n	8004418 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800440c:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ef      	bne.n	80043f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d14a      	bne.n	80044b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d111      	bne.n	8004448 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004424:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800442c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6892      	ldr	r2, [r2, #8]
 8004434:	0211      	lsls	r1, r2, #8
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68d2      	ldr	r2, [r2, #12]
 800443a:	0912      	lsrs	r2, r2, #4
 800443c:	0452      	lsls	r2, r2, #17
 800443e:	430a      	orrs	r2, r1
 8004440:	491f      	ldr	r1, [pc, #124]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	614b      	str	r3, [r1, #20]
 8004446:	e011      	b.n	800446c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6892      	ldr	r2, [r2, #8]
 8004458:	0211      	lsls	r1, r2, #8
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6912      	ldr	r2, [r2, #16]
 800445e:	0852      	lsrs	r2, r2, #1
 8004460:	3a01      	subs	r2, #1
 8004462:	0652      	lsls	r2, r2, #25
 8004464:	430a      	orrs	r2, r1
 8004466:	4916      	ldr	r1, [pc, #88]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800446c:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a13      	ldr	r2, [pc, #76]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004476:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fd f84a 	bl	8001510 <HAL_GetTick>
 800447c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800447e:	e009      	b.n	8004494 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004480:	f7fd f846 	bl	8001510 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d902      	bls.n	8004494 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	73fb      	strb	r3, [r7, #15]
          break;
 8004492:	e005      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ef      	beq.n	8004480 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4904      	ldr	r1, [pc, #16]	; (80044c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e049      	b.n	800456a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fe50 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 fe2a 	bl	800515c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d001      	beq.n	800458c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e047      	b.n	800461c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_TIM_Base_Start+0xb4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_TIM_Base_Start+0x66>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d018      	beq.n	80045da <HAL_TIM_Base_Start+0x66>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <HAL_TIM_Base_Start+0xb8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_TIM_Base_Start+0x66>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1e      	ldr	r2, [pc, #120]	; (8004630 <HAL_TIM_Base_Start+0xbc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIM_Base_Start+0x66>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <HAL_TIM_Base_Start+0xc0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_TIM_Base_Start+0x66>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <HAL_TIM_Base_Start+0xc4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_Base_Start+0x66>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_TIM_Base_Start+0xc8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d115      	bne.n	8004606 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <HAL_TIM_Base_Start+0xcc>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d015      	beq.n	8004618 <HAL_TIM_Base_Start+0xa4>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f2:	d011      	beq.n	8004618 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	e008      	b.n	8004618 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e000      	b.n	800461a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40013400 	.word	0x40013400
 800463c:	40014000 	.word	0x40014000
 8004640:	00010007 	.word	0x00010007

08004644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d001      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e04f      	b.n	80046fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_TIM_Base_Start_IT+0xc4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01d      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d018      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_TIM_Base_Start_IT+0xc8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <HAL_TIM_Base_Start_IT+0xcc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00e      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_TIM_Base_Start_IT+0xd0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_TIM_Base_Start_IT+0xd4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_TIM_Base_Start_IT+0xd8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d115      	bne.n	80046e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_TIM_Base_Start_IT+0xdc>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b06      	cmp	r3, #6
 80046ca:	d015      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0xb4>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d2:	d011      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	e008      	b.n	80046f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e000      	b.n	80046fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40013400 	.word	0x40013400
 800471c:	40014000 	.word	0x40014000
 8004720:	00010007 	.word	0x00010007

08004724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e049      	b.n	80047ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f841 	bl	80047d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 fcfa 	bl	800515c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_TIM_PWM_Start+0x24>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	bf14      	ite	ne
 8004804:	2301      	movne	r3, #1
 8004806:	2300      	moveq	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e03c      	b.n	8004886 <HAL_TIM_PWM_Start+0x9e>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b04      	cmp	r3, #4
 8004810:	d109      	bne.n	8004826 <HAL_TIM_PWM_Start+0x3e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	e02f      	b.n	8004886 <HAL_TIM_PWM_Start+0x9e>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d109      	bne.n	8004840 <HAL_TIM_PWM_Start+0x58>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e022      	b.n	8004886 <HAL_TIM_PWM_Start+0x9e>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b0c      	cmp	r3, #12
 8004844:	d109      	bne.n	800485a <HAL_TIM_PWM_Start+0x72>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b01      	cmp	r3, #1
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e015      	b.n	8004886 <HAL_TIM_PWM_Start+0x9e>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b10      	cmp	r3, #16
 800485e:	d109      	bne.n	8004874 <HAL_TIM_PWM_Start+0x8c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e008      	b.n	8004886 <HAL_TIM_PWM_Start+0x9e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e09c      	b.n	80049c8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start+0xb6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	e023      	b.n	80048e6 <HAL_TIM_PWM_Start+0xfe>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start+0xc6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ac:	e01b      	b.n	80048e6 <HAL_TIM_PWM_Start+0xfe>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0xd6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_PWM_Start+0xfe>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0xe6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_PWM_Start+0xfe>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0xf6>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_PWM_Start+0xfe>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 f83e 	bl	8005970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a35      	ldr	r2, [pc, #212]	; (80049d0 <HAL_TIM_PWM_Start+0x1e8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_TIM_PWM_Start+0x13e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a34      	ldr	r2, [pc, #208]	; (80049d4 <HAL_TIM_PWM_Start+0x1ec>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_TIM_PWM_Start+0x13e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a32      	ldr	r2, [pc, #200]	; (80049d8 <HAL_TIM_PWM_Start+0x1f0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_TIM_PWM_Start+0x13e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a31      	ldr	r2, [pc, #196]	; (80049dc <HAL_TIM_PWM_Start+0x1f4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_TIM_PWM_Start+0x13e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2f      	ldr	r2, [pc, #188]	; (80049e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_Start+0x142>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_TIM_PWM_Start+0x144>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <HAL_TIM_PWM_Start+0x1e8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01d      	beq.n	8004986 <HAL_TIM_PWM_Start+0x19e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004952:	d018      	beq.n	8004986 <HAL_TIM_PWM_Start+0x19e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <HAL_TIM_PWM_Start+0x1fc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_TIM_PWM_Start+0x19e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <HAL_TIM_PWM_Start+0x200>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_TIM_PWM_Start+0x19e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_TIM_PWM_Start+0x204>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_TIM_PWM_Start+0x19e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_TIM_PWM_Start+0x1ec>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIM_PWM_Start+0x19e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <HAL_TIM_PWM_Start+0x1f0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d115      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_TIM_PWM_Start+0x208>)
 800498e:	4013      	ands	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b06      	cmp	r3, #6
 8004996:	d015      	beq.n	80049c4 <HAL_TIM_PWM_Start+0x1dc>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499e:	d011      	beq.n	80049c4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	e008      	b.n	80049c4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e000      	b.n	80049c6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	00010007 	.word	0x00010007

080049f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ffb2 	bl	8005970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3e      	ldr	r2, [pc, #248]	; (8004b0c <HAL_TIM_PWM_Stop+0x118>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <HAL_TIM_PWM_Stop+0x4a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3d      	ldr	r2, [pc, #244]	; (8004b10 <HAL_TIM_PWM_Stop+0x11c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIM_PWM_Stop+0x4a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3b      	ldr	r2, [pc, #236]	; (8004b14 <HAL_TIM_PWM_Stop+0x120>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_TIM_PWM_Stop+0x4a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3a      	ldr	r2, [pc, #232]	; (8004b18 <HAL_TIM_PWM_Stop+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIM_PWM_Stop+0x4a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a38      	ldr	r2, [pc, #224]	; (8004b1c <HAL_TIM_PWM_Stop+0x128>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PWM_Stop+0x4e>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <HAL_TIM_PWM_Stop+0x50>
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d017      	beq.n	8004a78 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10f      	bne.n	8004a78 <HAL_TIM_PWM_Stop+0x84>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_PWM_Stop+0x84>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10f      	bne.n	8004aa8 <HAL_TIM_PWM_Stop+0xb4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_PWM_Stop+0xb4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <HAL_TIM_PWM_Stop+0xc4>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab6:	e023      	b.n	8004b00 <HAL_TIM_PWM_Stop+0x10c>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d104      	bne.n	8004ac8 <HAL_TIM_PWM_Stop+0xd4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac6:	e01b      	b.n	8004b00 <HAL_TIM_PWM_Stop+0x10c>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d104      	bne.n	8004ad8 <HAL_TIM_PWM_Stop+0xe4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad6:	e013      	b.n	8004b00 <HAL_TIM_PWM_Stop+0x10c>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d104      	bne.n	8004ae8 <HAL_TIM_PWM_Stop+0xf4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae6:	e00b      	b.n	8004b00 <HAL_TIM_PWM_Stop+0x10c>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d104      	bne.n	8004af8 <HAL_TIM_PWM_Stop+0x104>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af6:	e003      	b.n	8004b00 <HAL_TIM_PWM_Stop+0x10c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40013400 	.word	0x40013400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800

08004b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0202 	mvn.w	r2, #2
 8004b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fadc 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 face 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fadf 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0204 	mvn.w	r2, #4
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fab2 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 faa4 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fab5 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0208 	mvn.w	r2, #8
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa88 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa7a 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa8b 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0210 	mvn.w	r2, #16
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa5e 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa50 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa61 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0201 	mvn.w	r2, #1
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc f9ce 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 ff08 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d10e      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d107      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fefb 	bl	8005af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d10e      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa0f 	bl	8005148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d10e      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d107      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0220 	mvn.w	r2, #32
 8004d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 febb 	bl	8005acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e0fd      	b.n	8004f76 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b14      	cmp	r3, #20
 8004d86:	f200 80f0 	bhi.w	8004f6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004f6b 	.word	0x08004f6b
 8004d98:	08004f6b 	.word	0x08004f6b
 8004d9c:	08004f6b 	.word	0x08004f6b
 8004da0:	08004e25 	.word	0x08004e25
 8004da4:	08004f6b 	.word	0x08004f6b
 8004da8:	08004f6b 	.word	0x08004f6b
 8004dac:	08004f6b 	.word	0x08004f6b
 8004db0:	08004e67 	.word	0x08004e67
 8004db4:	08004f6b 	.word	0x08004f6b
 8004db8:	08004f6b 	.word	0x08004f6b
 8004dbc:	08004f6b 	.word	0x08004f6b
 8004dc0:	08004ea7 	.word	0x08004ea7
 8004dc4:	08004f6b 	.word	0x08004f6b
 8004dc8:	08004f6b 	.word	0x08004f6b
 8004dcc:	08004f6b 	.word	0x08004f6b
 8004dd0:	08004ee9 	.word	0x08004ee9
 8004dd4:	08004f6b 	.word	0x08004f6b
 8004dd8:	08004f6b 	.word	0x08004f6b
 8004ddc:	08004f6b 	.word	0x08004f6b
 8004de0:	08004f29 	.word	0x08004f29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa50 	bl	8005290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0208 	orr.w	r2, r2, #8
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0204 	bic.w	r2, r2, #4
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	619a      	str	r2, [r3, #24]
      break;
 8004e22:	e0a3      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fac0 	bl	80053b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]
      break;
 8004e64:	e082      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fb29 	bl	80054c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0208 	orr.w	r2, r2, #8
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0204 	bic.w	r2, r2, #4
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
      break;
 8004ea4:	e062      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fb91 	bl	80055d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69d9      	ldr	r1, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	021a      	lsls	r2, r3, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	61da      	str	r2, [r3, #28]
      break;
 8004ee6:	e041      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fbda 	bl	80056a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0208 	orr.w	r2, r2, #8
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0204 	bic.w	r2, r2, #4
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f26:	e021      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fc1e 	bl	8005770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f68:	e000      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004f6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop

08004f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIM_ConfigClockSource+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e0b5      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x184>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd4:	d03e      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0xd4>
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fda:	f200 8087 	bhi.w	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe2:	f000 8085 	beq.w	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fea:	d87f      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	2b70      	cmp	r3, #112	; 0x70
 8004fee:	d01a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xa6>
 8004ff0:	2b70      	cmp	r3, #112	; 0x70
 8004ff2:	d87b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004ff4:	2b60      	cmp	r3, #96	; 0x60
 8004ff6:	d050      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x11a>
 8004ff8:	2b60      	cmp	r3, #96	; 0x60
 8004ffa:	d877      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004ffc:	2b50      	cmp	r3, #80	; 0x50
 8004ffe:	d03c      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xfa>
 8005000:	2b50      	cmp	r3, #80	; 0x50
 8005002:	d873      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d058      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x13a>
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d86f      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 800500c:	2b30      	cmp	r3, #48	; 0x30
 800500e:	d064      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	2b30      	cmp	r3, #48	; 0x30
 8005012:	d86b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d060      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d867      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05c      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005020:	2b10      	cmp	r3, #16
 8005022:	d05a      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005024:	e062      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6899      	ldr	r1, [r3, #8]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f000 fc7b 	bl	8005930 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005048:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	609a      	str	r2, [r3, #8]
      break;
 8005052:	e04e      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6899      	ldr	r1, [r3, #8]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f000 fc64 	bl	8005930 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005076:	609a      	str	r2, [r3, #8]
      break;
 8005078:	e03b      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	461a      	mov	r2, r3
 8005088:	f000 fbd8 	bl	800583c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2150      	movs	r1, #80	; 0x50
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fc31 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005098:	e02b      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 fbf7 	bl	800589a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2160      	movs	r1, #96	; 0x60
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fc21 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 80050b8:	e01b      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 fbb8 	bl	800583c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2140      	movs	r1, #64	; 0x40
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fc11 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 80050d8:	e00b      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 fc08 	bl	80058fa <TIM_ITRx_SetConfig>
        break;
 80050ea:	e002      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80050ec:	bf00      	nop
 80050ee:	e000      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80050f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a40      	ldr	r2, [pc, #256]	; (8005270 <TIM_Base_SetConfig+0x114>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <TIM_Base_SetConfig+0x40>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517a:	d00f      	beq.n	800519c <TIM_Base_SetConfig+0x40>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a3d      	ldr	r2, [pc, #244]	; (8005274 <TIM_Base_SetConfig+0x118>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00b      	beq.n	800519c <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a3c      	ldr	r2, [pc, #240]	; (8005278 <TIM_Base_SetConfig+0x11c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d007      	beq.n	800519c <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a3b      	ldr	r2, [pc, #236]	; (800527c <TIM_Base_SetConfig+0x120>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3a      	ldr	r2, [pc, #232]	; (8005280 <TIM_Base_SetConfig+0x124>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d108      	bne.n	80051ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2f      	ldr	r2, [pc, #188]	; (8005270 <TIM_Base_SetConfig+0x114>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01f      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d01b      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2c      	ldr	r2, [pc, #176]	; (8005274 <TIM_Base_SetConfig+0x118>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d017      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2b      	ldr	r2, [pc, #172]	; (8005278 <TIM_Base_SetConfig+0x11c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <TIM_Base_SetConfig+0x120>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00f      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a29      	ldr	r2, [pc, #164]	; (8005280 <TIM_Base_SetConfig+0x124>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <TIM_Base_SetConfig+0x128>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a27      	ldr	r2, [pc, #156]	; (8005288 <TIM_Base_SetConfig+0x12c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_Base_SetConfig+0x9a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a26      	ldr	r2, [pc, #152]	; (800528c <TIM_Base_SetConfig+0x130>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d108      	bne.n	8005208 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a10      	ldr	r2, [pc, #64]	; (8005270 <TIM_Base_SetConfig+0x114>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00f      	beq.n	8005254 <TIM_Base_SetConfig+0xf8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a12      	ldr	r2, [pc, #72]	; (8005280 <TIM_Base_SetConfig+0x124>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00b      	beq.n	8005254 <TIM_Base_SetConfig+0xf8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a11      	ldr	r2, [pc, #68]	; (8005284 <TIM_Base_SetConfig+0x128>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_Base_SetConfig+0xf8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a10      	ldr	r2, [pc, #64]	; (8005288 <TIM_Base_SetConfig+0x12c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_Base_SetConfig+0xf8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a0f      	ldr	r2, [pc, #60]	; (800528c <TIM_Base_SetConfig+0x130>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d103      	bne.n	800525c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	615a      	str	r2, [r3, #20]
}
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800
 800527c:	40000c00 	.word	0x40000c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f023 0201 	bic.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 0302 	bic.w	r3, r3, #2
 80052dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a2c      	ldr	r2, [pc, #176]	; (800539c <TIM_OC1_SetConfig+0x10c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00f      	beq.n	8005310 <TIM_OC1_SetConfig+0x80>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a2b      	ldr	r2, [pc, #172]	; (80053a0 <TIM_OC1_SetConfig+0x110>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00b      	beq.n	8005310 <TIM_OC1_SetConfig+0x80>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <TIM_OC1_SetConfig+0x114>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_OC1_SetConfig+0x80>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a29      	ldr	r2, [pc, #164]	; (80053a8 <TIM_OC1_SetConfig+0x118>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC1_SetConfig+0x80>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a28      	ldr	r2, [pc, #160]	; (80053ac <TIM_OC1_SetConfig+0x11c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10c      	bne.n	800532a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0308 	bic.w	r3, r3, #8
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1b      	ldr	r2, [pc, #108]	; (800539c <TIM_OC1_SetConfig+0x10c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00f      	beq.n	8005352 <TIM_OC1_SetConfig+0xc2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1a      	ldr	r2, [pc, #104]	; (80053a0 <TIM_OC1_SetConfig+0x110>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00b      	beq.n	8005352 <TIM_OC1_SetConfig+0xc2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <TIM_OC1_SetConfig+0x114>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d007      	beq.n	8005352 <TIM_OC1_SetConfig+0xc2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <TIM_OC1_SetConfig+0x118>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <TIM_OC1_SetConfig+0xc2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a17      	ldr	r2, [pc, #92]	; (80053ac <TIM_OC1_SetConfig+0x11c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d111      	bne.n	8005376 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40012c00 	.word	0x40012c00
 80053a0:	40013400 	.word	0x40013400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800

080053b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0210 	bic.w	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f023 0320 	bic.w	r3, r3, #32
 80053fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a28      	ldr	r2, [pc, #160]	; (80054b0 <TIM_OC2_SetConfig+0x100>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_OC2_SetConfig+0x6c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a27      	ldr	r2, [pc, #156]	; (80054b4 <TIM_OC2_SetConfig+0x104>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10d      	bne.n	8005438 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <TIM_OC2_SetConfig+0x100>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00f      	beq.n	8005460 <TIM_OC2_SetConfig+0xb0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <TIM_OC2_SetConfig+0x104>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00b      	beq.n	8005460 <TIM_OC2_SetConfig+0xb0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <TIM_OC2_SetConfig+0x108>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d007      	beq.n	8005460 <TIM_OC2_SetConfig+0xb0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <TIM_OC2_SetConfig+0x10c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC2_SetConfig+0xb0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <TIM_OC2_SetConfig+0x110>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d113      	bne.n	8005488 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40013400 	.word	0x40013400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <TIM_OC3_SetConfig+0xfc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_OC3_SetConfig+0x6a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a26      	ldr	r2, [pc, #152]	; (80055c4 <TIM_OC3_SetConfig+0x100>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10d      	bne.n	800554a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <TIM_OC3_SetConfig+0xfc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00f      	beq.n	8005572 <TIM_OC3_SetConfig+0xae>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <TIM_OC3_SetConfig+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <TIM_OC3_SetConfig+0xae>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1a      	ldr	r2, [pc, #104]	; (80055c8 <TIM_OC3_SetConfig+0x104>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d007      	beq.n	8005572 <TIM_OC3_SetConfig+0xae>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a19      	ldr	r2, [pc, #100]	; (80055cc <TIM_OC3_SetConfig+0x108>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_OC3_SetConfig+0xae>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <TIM_OC3_SetConfig+0x10c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d113      	bne.n	800559a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40013400 	.word	0x40013400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	031b      	lsls	r3, r3, #12
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a18      	ldr	r2, [pc, #96]	; (8005694 <TIM_OC4_SetConfig+0xc0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_OC4_SetConfig+0x84>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <TIM_OC4_SetConfig+0xc4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_OC4_SetConfig+0x84>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a16      	ldr	r2, [pc, #88]	; (800569c <TIM_OC4_SetConfig+0xc8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_OC4_SetConfig+0x84>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <TIM_OC4_SetConfig+0xcc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC4_SetConfig+0x84>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <TIM_OC4_SetConfig+0xd0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d109      	bne.n	800566c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800565e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800

080056a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a17      	ldr	r2, [pc, #92]	; (800575c <TIM_OC5_SetConfig+0xb4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00f      	beq.n	8005722 <TIM_OC5_SetConfig+0x7a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a16      	ldr	r2, [pc, #88]	; (8005760 <TIM_OC5_SetConfig+0xb8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00b      	beq.n	8005722 <TIM_OC5_SetConfig+0x7a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <TIM_OC5_SetConfig+0xbc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d007      	beq.n	8005722 <TIM_OC5_SetConfig+0x7a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <TIM_OC5_SetConfig+0xc0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_OC5_SetConfig+0x7a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <TIM_OC5_SetConfig+0xc4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d109      	bne.n	8005736 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	621a      	str	r2, [r3, #32]
}
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40013400 	.word	0x40013400
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800

08005770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	051b      	lsls	r3, r3, #20
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a18      	ldr	r2, [pc, #96]	; (8005828 <TIM_OC6_SetConfig+0xb8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_OC6_SetConfig+0x7c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <TIM_OC6_SetConfig+0xbc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_OC6_SetConfig+0x7c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <TIM_OC6_SetConfig+0xc0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_OC6_SetConfig+0x7c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <TIM_OC6_SetConfig+0xc4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC6_SetConfig+0x7c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a14      	ldr	r2, [pc, #80]	; (8005838 <TIM_OC6_SetConfig+0xc8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d109      	bne.n	8005800 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40013400 	.word	0x40013400
 8005830:	40014000 	.word	0x40014000
 8005834:	40014400 	.word	0x40014400
 8005838:	40014800 	.word	0x40014800

0800583c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0201 	bic.w	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 030a 	bic.w	r3, r3, #10
 8005878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800589a:	b480      	push	{r7}
 800589c:	b087      	sub	sp, #28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0210 	bic.w	r2, r3, #16
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	f043 0307 	orr.w	r3, r3, #7
 800591c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	021a      	lsls	r2, r3, #8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	431a      	orrs	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4313      	orrs	r3, r2
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	609a      	str	r2, [r3, #8]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e068      	b.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2e      	ldr	r2, [pc, #184]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d108      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01d      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a46:	d018      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1a      	ldr	r2, [pc, #104]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10c      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000

08005acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b08b      	sub	sp, #44	; 0x2c
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	fa93 f3a3 	rbit	r3, r3
 8005b22:	613b      	str	r3, [r7, #16]
  return result;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005b2e:	2320      	movs	r3, #32
 8005b30:	e003      	b.n	8005b3a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	fab3 f383 	clz	r3, r3
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	2103      	movs	r1, #3
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	401a      	ands	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	fa93 f3a3 	rbit	r3, r3
 8005b50:	61fb      	str	r3, [r7, #28]
  return result;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	e003      	b.n	8005b68 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	fab3 f383 	clz	r3, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	601a      	str	r2, [r3, #0]
}
 8005b76:	bf00      	nop
 8005b78:	372c      	adds	r7, #44	; 0x2c
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	401a      	ands	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b08b      	sub	sp, #44	; 0x2c
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	fa93 f3a3 	rbit	r3, r3
 8005bcc:	613b      	str	r3, [r7, #16]
  return result;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005bd8:	2320      	movs	r3, #32
 8005bda:	e003      	b.n	8005be4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	fab3 f383 	clz	r3, r3
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	2103      	movs	r1, #3
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	401a      	ands	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	fa93 f3a3 	rbit	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
  return result;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005c06:	2320      	movs	r3, #32
 8005c08:	e003      	b.n	8005c12 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	fab3 f383 	clz	r3, r3
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005c20:	bf00      	nop
 8005c22:	372c      	adds	r7, #44	; 0x2c
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b08b      	sub	sp, #44	; 0x2c
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	fa93 f3a3 	rbit	r3, r3
 8005c46:	613b      	str	r3, [r7, #16]
  return result;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005c52:	2320      	movs	r3, #32
 8005c54:	e003      	b.n	8005c5e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	fab3 f383 	clz	r3, r3
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	2103      	movs	r1, #3
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	401a      	ands	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	fa93 f3a3 	rbit	r3, r3
 8005c74:	61fb      	str	r3, [r7, #28]
  return result;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005c80:	2320      	movs	r3, #32
 8005c82:	e003      	b.n	8005c8c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	60da      	str	r2, [r3, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	372c      	adds	r7, #44	; 0x2c
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b08b      	sub	sp, #44	; 0x2c
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	fa93 f3a3 	rbit	r3, r3
 8005cc0:	613b      	str	r3, [r7, #16]
  return result;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005ccc:	2320      	movs	r3, #32
 8005cce:	e003      	b.n	8005cd8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	fab3 f383 	clz	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	210f      	movs	r1, #15
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	fa93 f3a3 	rbit	r3, r3
 8005cee:	61fb      	str	r3, [r7, #28]
  return result;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005cfa:	2320      	movs	r3, #32
 8005cfc:	e003      	b.n	8005d06 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	fab3 f383 	clz	r3, r3
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005d14:	bf00      	nop
 8005d16:	372c      	adds	r7, #44	; 0x2c
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b08b      	sub	sp, #44	; 0x2c
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	fa93 f3a3 	rbit	r3, r3
 8005d3c:	613b      	str	r3, [r7, #16]
  return result;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005d48:	2320      	movs	r3, #32
 8005d4a:	e003      	b.n	8005d54 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	fab3 f383 	clz	r3, r3
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	210f      	movs	r1, #15
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	401a      	ands	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	61fb      	str	r3, [r7, #28]
  return result;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005d78:	2320      	movs	r3, #32
 8005d7a:	e003      	b.n	8005d84 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	fab3 f383 	clz	r3, r3
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005d92:	bf00      	nop
 8005d94:	372c      	adds	r7, #44	; 0x2c
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b088      	sub	sp, #32
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	fa93 f3a3 	rbit	r3, r3
 8005db4:	60fb      	str	r3, [r7, #12]
  return result;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <LL_GPIO_Init+0x26>
    return 32U;
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	e003      	b.n	8005dcc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	fab3 f383 	clz	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005dce:	e048      	b.n	8005e62 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d03a      	beq.n	8005e5c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d003      	beq.n	8005df6 <LL_GPIO_Init+0x58>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d10e      	bne.n	8005e14 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fed7 	bl	8005bb2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6819      	ldr	r1, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff feb7 	bl	8005b82 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	69b9      	ldr	r1, [r7, #24]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ff05 	bl	8005c2c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d111      	bne.n	8005e4e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2bff      	cmp	r3, #255	; 0xff
 8005e2e:	d807      	bhi.n	8005e40 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	461a      	mov	r2, r3
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff ff34 	bl	8005ca6 <LL_GPIO_SetAFPin_0_7>
 8005e3e:	e006      	b.n	8005e4e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	461a      	mov	r2, r3
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff69 	bl	8005d20 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	461a      	mov	r2, r3
 8005e54:	69b9      	ldr	r1, [r7, #24]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fe56 	bl	8005b08 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1af      	bne.n	8005dd0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <LL_RCC_HSI_IsReady+0x24>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8c:	d101      	bne.n	8005e92 <LL_RCC_HSI_IsReady+0x16>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <LL_RCC_HSI_IsReady+0x18>
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000

08005ea4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005ea8:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <LL_RCC_LSE_IsReady+0x24>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d101      	bne.n	8005eba <LL_RCC_LSE_IsReady+0x16>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <LL_RCC_LSE_IsReady+0x18>
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40021000 	.word	0x40021000

08005ecc <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d101      	bne.n	8005ee0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40021000 	.word	0x40021000

08005ef0 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <LL_RCC_MSI_GetRange+0x18>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40021000 	.word	0x40021000

08005f0c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005f10:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40021000 	.word	0x40021000

08005f28 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <LL_RCC_GetSysClkSource+0x18>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000

08005f44 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005f48:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <LL_RCC_GetAHBPrescaler+0x18>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40021000 	.word	0x40021000

08005f60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000

08005f7c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005f80:	4b04      	ldr	r3, [pc, #16]	; (8005f94 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000

08005f98 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <LL_RCC_GetUSARTClockSource+0x24>)
 8005fa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	401a      	ands	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	4313      	orrs	r3, r2
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40021000 	.word	0x40021000

08005fc0 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <LL_RCC_GetUARTClockSource+0x24>)
 8005fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	401a      	ands	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	4313      	orrs	r3, r2
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	40021000 	.word	0x40021000

08005fe8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005fec:	4b04      	ldr	r3, [pc, #16]	; (8006000 <LL_RCC_PLL_GetMainSource+0x18>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000

08006004 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <LL_RCC_PLL_GetN+0x18>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006012:	4618      	mov	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40021000 	.word	0x40021000

08006020 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <LL_RCC_PLL_GetR+0x18>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800602c:	4618      	mov	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000

0800603c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <LL_RCC_PLL_GetDivider+0x18>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000

08006058 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d137      	bne.n	80060da <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff ff94 	bl	8005f98 <LL_RCC_GetUSARTClockSource>
 8006070:	4603      	mov	r3, r0
 8006072:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006076:	2b03      	cmp	r3, #3
 8006078:	f200 80b3 	bhi.w	80061e2 <LL_RCC_GetUSARTClockFreq+0x18a>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060c3 	.word	0x080060c3
 8006088:	08006095 	.word	0x08006095
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060af 	.word	0x080060af
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006094:	f000 f95c 	bl	8006350 <RCC_GetSystemClockFreq>
 8006098:	60f8      	str	r0, [r7, #12]
        break;
 800609a:	e0b5      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800609c:	f7ff feee 	bl	8005e7c <LL_RCC_HSI_IsReady>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 809f 	beq.w	80061e6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80060a8:	4b5a      	ldr	r3, [pc, #360]	; (8006214 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80060aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060ac:	e09b      	b.n	80061e6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80060ae:	f7ff fef9 	bl	8005ea4 <LL_RCC_LSE_IsReady>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8098 	beq.w	80061ea <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060c0:	e093      	b.n	80061ea <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80060c2:	f000 f945 	bl	8006350 <RCC_GetSystemClockFreq>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f9d1 	bl	8006470 <RCC_GetHCLKClockFreq>
 80060ce:	4603      	mov	r3, r0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 f9f7 	bl	80064c4 <RCC_GetPCLK2ClockFreq>
 80060d6:	60f8      	str	r0, [r7, #12]
        break;
 80060d8:	e096      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b0c      	cmp	r3, #12
 80060de:	d146      	bne.n	800616e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ff59 	bl	8005f98 <LL_RCC_GetUSARTClockSource>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d87e      	bhi.n	80061ee <LL_RCC_GetUSARTClockFreq+0x196>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	08006157 	.word	0x08006157
 80060fc:	080061ef 	.word	0x080061ef
 8006100:	080061ef 	.word	0x080061ef
 8006104:	080061ef 	.word	0x080061ef
 8006108:	0800612d 	.word	0x0800612d
 800610c:	080061ef 	.word	0x080061ef
 8006110:	080061ef 	.word	0x080061ef
 8006114:	080061ef 	.word	0x080061ef
 8006118:	08006135 	.word	0x08006135
 800611c:	080061ef 	.word	0x080061ef
 8006120:	080061ef 	.word	0x080061ef
 8006124:	080061ef 	.word	0x080061ef
 8006128:	08006145 	.word	0x08006145
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800612c:	f000 f910 	bl	8006350 <RCC_GetSystemClockFreq>
 8006130:	60f8      	str	r0, [r7, #12]
        break;
 8006132:	e069      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006134:	f7ff fea2 	bl	8005e7c <LL_RCC_HSI_IsReady>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d059      	beq.n	80061f2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800613e:	4b35      	ldr	r3, [pc, #212]	; (8006214 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006140:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006142:	e056      	b.n	80061f2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006144:	f7ff feae 	bl	8005ea4 <LL_RCC_LSE_IsReady>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d053      	beq.n	80061f6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800614e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006152:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006154:	e04f      	b.n	80061f6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006156:	f000 f8fb 	bl	8006350 <RCC_GetSystemClockFreq>
 800615a:	4603      	mov	r3, r0
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f987 	bl	8006470 <RCC_GetHCLKClockFreq>
 8006162:	4603      	mov	r3, r0
 8006164:	4618      	mov	r0, r3
 8006166:	f000 f999 	bl	800649c <RCC_GetPCLK1ClockFreq>
 800616a:	60f8      	str	r0, [r7, #12]
        break;
 800616c:	e04c      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b30      	cmp	r3, #48	; 0x30
 8006172:	d142      	bne.n	80061fa <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ff0f 	bl	8005f98 <LL_RCC_GetUSARTClockSource>
 800617a:	4603      	mov	r3, r0
 800617c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006180:	d01a      	beq.n	80061b8 <LL_RCC_GetUSARTClockFreq+0x160>
 8006182:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006186:	d83a      	bhi.n	80061fe <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006188:	4a23      	ldr	r2, [pc, #140]	; (8006218 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00c      	beq.n	80061a8 <LL_RCC_GetUSARTClockFreq+0x150>
 800618e:	4a22      	ldr	r2, [pc, #136]	; (8006218 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d834      	bhi.n	80061fe <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006194:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006198:	d017      	beq.n	80061ca <LL_RCC_GetUSARTClockFreq+0x172>
 800619a:	4a20      	ldr	r2, [pc, #128]	; (800621c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d12e      	bne.n	80061fe <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80061a0:	f000 f8d6 	bl	8006350 <RCC_GetSystemClockFreq>
 80061a4:	60f8      	str	r0, [r7, #12]
          break;
 80061a6:	e02f      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80061a8:	f7ff fe68 	bl	8005e7c <LL_RCC_HSI_IsReady>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d027      	beq.n	8006202 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 80061b2:	4b18      	ldr	r3, [pc, #96]	; (8006214 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80061b4:	60fb      	str	r3, [r7, #12]
          }
          break;
 80061b6:	e024      	b.n	8006202 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80061b8:	f7ff fe74 	bl	8005ea4 <LL_RCC_LSE_IsReady>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d021      	beq.n	8006206 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 80061c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c6:	60fb      	str	r3, [r7, #12]
          }
          break;
 80061c8:	e01d      	b.n	8006206 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80061ca:	f000 f8c1 	bl	8006350 <RCC_GetSystemClockFreq>
 80061ce:	4603      	mov	r3, r0
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 f94d 	bl	8006470 <RCC_GetHCLKClockFreq>
 80061d6:	4603      	mov	r3, r0
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f95f 	bl	800649c <RCC_GetPCLK1ClockFreq>
 80061de:	60f8      	str	r0, [r7, #12]
          break;
 80061e0:	e012      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80061e2:	bf00      	nop
 80061e4:	e010      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80061e6:	bf00      	nop
 80061e8:	e00e      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80061ea:	bf00      	nop
 80061ec:	e00c      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80061ee:	bf00      	nop
 80061f0:	e00a      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80061f2:	bf00      	nop
 80061f4:	e008      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80061f6:	bf00      	nop
 80061f8:	e006      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80061fa:	bf00      	nop
 80061fc:	e004      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006206:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006208:	68fb      	ldr	r3, [r7, #12]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	00f42400 	.word	0x00f42400
 8006218:	00300020 	.word	0x00300020
 800621c:	00300010 	.word	0x00300010

08006220 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2bc0      	cmp	r3, #192	; 0xc0
 8006230:	d136      	bne.n	80062a0 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fec4 	bl	8005fc0 <LL_RCC_GetUARTClockSource>
 8006238:	4603      	mov	r3, r0
 800623a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800623e:	d01a      	beq.n	8006276 <LL_RCC_GetUARTClockFreq+0x56>
 8006240:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006244:	d82e      	bhi.n	80062a4 <LL_RCC_GetUARTClockFreq+0x84>
 8006246:	4a3d      	ldr	r2, [pc, #244]	; (800633c <LL_RCC_GetUARTClockFreq+0x11c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00c      	beq.n	8006266 <LL_RCC_GetUARTClockFreq+0x46>
 800624c:	4a3b      	ldr	r2, [pc, #236]	; (800633c <LL_RCC_GetUARTClockFreq+0x11c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d828      	bhi.n	80062a4 <LL_RCC_GetUARTClockFreq+0x84>
 8006252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006256:	d017      	beq.n	8006288 <LL_RCC_GetUARTClockFreq+0x68>
 8006258:	4a39      	ldr	r2, [pc, #228]	; (8006340 <LL_RCC_GetUARTClockFreq+0x120>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d122      	bne.n	80062a4 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800625e:	f000 f877 	bl	8006350 <RCC_GetSystemClockFreq>
 8006262:	60f8      	str	r0, [r7, #12]
        break;
 8006264:	e023      	b.n	80062ae <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006266:	f7ff fe09 	bl	8005e7c <LL_RCC_HSI_IsReady>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01b      	beq.n	80062a8 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006270:	4b34      	ldr	r3, [pc, #208]	; (8006344 <LL_RCC_GetUARTClockFreq+0x124>)
 8006272:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006274:	e018      	b.n	80062a8 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006276:	f7ff fe15 	bl	8005ea4 <LL_RCC_LSE_IsReady>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d015      	beq.n	80062ac <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006284:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006286:	e011      	b.n	80062ac <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006288:	f000 f862 	bl	8006350 <RCC_GetSystemClockFreq>
 800628c:	4603      	mov	r3, r0
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f8ee 	bl	8006470 <RCC_GetHCLKClockFreq>
 8006294:	4603      	mov	r3, r0
 8006296:	4618      	mov	r0, r3
 8006298:	f000 f900 	bl	800649c <RCC_GetPCLK1ClockFreq>
 800629c:	60f8      	str	r0, [r7, #12]
        break;
 800629e:	e006      	b.n	80062ae <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80062a0:	bf00      	nop
 80062a2:	e004      	b.n	80062ae <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80062a4:	bf00      	nop
 80062a6:	e002      	b.n	80062ae <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80062ac:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b4:	d136      	bne.n	8006324 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fe82 	bl	8005fc0 <LL_RCC_GetUARTClockSource>
 80062bc:	4603      	mov	r3, r0
 80062be:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80062c2:	d01a      	beq.n	80062fa <LL_RCC_GetUARTClockFreq+0xda>
 80062c4:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80062c8:	d82e      	bhi.n	8006328 <LL_RCC_GetUARTClockFreq+0x108>
 80062ca:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <LL_RCC_GetUARTClockFreq+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00c      	beq.n	80062ea <LL_RCC_GetUARTClockFreq+0xca>
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <LL_RCC_GetUARTClockFreq+0x128>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d828      	bhi.n	8006328 <LL_RCC_GetUARTClockFreq+0x108>
 80062d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062da:	d017      	beq.n	800630c <LL_RCC_GetUARTClockFreq+0xec>
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <LL_RCC_GetUARTClockFreq+0x12c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d122      	bne.n	8006328 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80062e2:	f000 f835 	bl	8006350 <RCC_GetSystemClockFreq>
 80062e6:	60f8      	str	r0, [r7, #12]
        break;
 80062e8:	e023      	b.n	8006332 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80062ea:	f7ff fdc7 	bl	8005e7c <LL_RCC_HSI_IsReady>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01b      	beq.n	800632c <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80062f4:	4b13      	ldr	r3, [pc, #76]	; (8006344 <LL_RCC_GetUARTClockFreq+0x124>)
 80062f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80062f8:	e018      	b.n	800632c <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80062fa:	f7ff fdd3 	bl	8005ea4 <LL_RCC_LSE_IsReady>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d015      	beq.n	8006330 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006308:	60fb      	str	r3, [r7, #12]
        }
        break;
 800630a:	e011      	b.n	8006330 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800630c:	f000 f820 	bl	8006350 <RCC_GetSystemClockFreq>
 8006310:	4603      	mov	r3, r0
 8006312:	4618      	mov	r0, r3
 8006314:	f000 f8ac 	bl	8006470 <RCC_GetHCLKClockFreq>
 8006318:	4603      	mov	r3, r0
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f8be 	bl	800649c <RCC_GetPCLK1ClockFreq>
 8006320:	60f8      	str	r0, [r7, #12]
        break;
 8006322:	e006      	b.n	8006332 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006324:	bf00      	nop
 8006326:	e004      	b.n	8006332 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006330:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006332:	68fb      	ldr	r3, [r7, #12]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	00c00080 	.word	0x00c00080
 8006340:	00c00040 	.word	0x00c00040
 8006344:	00f42400 	.word	0x00f42400
 8006348:	03000200 	.word	0x03000200
 800634c:	03000100 	.word	0x03000100

08006350 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006356:	f7ff fde7 	bl	8005f28 <LL_RCC_GetSysClkSource>
 800635a:	4603      	mov	r3, r0
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d851      	bhi.n	8006404 <RCC_GetSystemClockFreq+0xb4>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <RCC_GetSystemClockFreq+0x18>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	0800639d 	.word	0x0800639d
 800636c:	08006405 	.word	0x08006405
 8006370:	08006405 	.word	0x08006405
 8006374:	08006405 	.word	0x08006405
 8006378:	080063f1 	.word	0x080063f1
 800637c:	08006405 	.word	0x08006405
 8006380:	08006405 	.word	0x08006405
 8006384:	08006405 	.word	0x08006405
 8006388:	080063f7 	.word	0x080063f7
 800638c:	08006405 	.word	0x08006405
 8006390:	08006405 	.word	0x08006405
 8006394:	08006405 	.word	0x08006405
 8006398:	080063fd 	.word	0x080063fd
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800639c:	f7ff fd96 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d111      	bne.n	80063ca <RCC_GetSystemClockFreq+0x7a>
 80063a6:	f7ff fd91 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <RCC_GetSystemClockFreq+0x6a>
 80063b0:	f7ff fd9e 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 80063b4:	4603      	mov	r3, r0
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	e003      	b.n	80063c2 <RCC_GetSystemClockFreq+0x72>
 80063ba:	f7ff fda7 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 80063be:	4603      	mov	r3, r0
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	4a28      	ldr	r2, [pc, #160]	; (8006464 <RCC_GetSystemClockFreq+0x114>)
 80063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c8:	e010      	b.n	80063ec <RCC_GetSystemClockFreq+0x9c>
 80063ca:	f7ff fd7f 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <RCC_GetSystemClockFreq+0x8e>
 80063d4:	f7ff fd8c 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 80063d8:	4603      	mov	r3, r0
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	e003      	b.n	80063e6 <RCC_GetSystemClockFreq+0x96>
 80063de:	f7ff fd95 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 80063e2:	4603      	mov	r3, r0
 80063e4:	091b      	lsrs	r3, r3, #4
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <RCC_GetSystemClockFreq+0x114>)
 80063e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ec:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80063ee:	e033      	b.n	8006458 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80063f0:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <RCC_GetSystemClockFreq+0x118>)
 80063f2:	607b      	str	r3, [r7, #4]
      break;
 80063f4:	e030      	b.n	8006458 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80063f6:	4b1d      	ldr	r3, [pc, #116]	; (800646c <RCC_GetSystemClockFreq+0x11c>)
 80063f8:	607b      	str	r3, [r7, #4]
      break;
 80063fa:	e02d      	b.n	8006458 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80063fc:	f000 f876 	bl	80064ec <RCC_PLL_GetFreqDomain_SYS>
 8006400:	6078      	str	r0, [r7, #4]
      break;
 8006402:	e029      	b.n	8006458 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006404:	f7ff fd62 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d111      	bne.n	8006432 <RCC_GetSystemClockFreq+0xe2>
 800640e:	f7ff fd5d 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <RCC_GetSystemClockFreq+0xd2>
 8006418:	f7ff fd6a 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 800641c:	4603      	mov	r3, r0
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	e003      	b.n	800642a <RCC_GetSystemClockFreq+0xda>
 8006422:	f7ff fd73 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 8006426:	4603      	mov	r3, r0
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	4a0e      	ldr	r2, [pc, #56]	; (8006464 <RCC_GetSystemClockFreq+0x114>)
 800642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006430:	e010      	b.n	8006454 <RCC_GetSystemClockFreq+0x104>
 8006432:	f7ff fd4b 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <RCC_GetSystemClockFreq+0xf6>
 800643c:	f7ff fd58 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 8006440:	4603      	mov	r3, r0
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	e003      	b.n	800644e <RCC_GetSystemClockFreq+0xfe>
 8006446:	f7ff fd61 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 800644a:	4603      	mov	r3, r0
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	4a05      	ldr	r2, [pc, #20]	; (8006464 <RCC_GetSystemClockFreq+0x114>)
 8006450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006454:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006456:	bf00      	nop
  }

  return frequency;
 8006458:	687b      	ldr	r3, [r7, #4]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	080094ac 	.word	0x080094ac
 8006468:	00f42400 	.word	0x00f42400
 800646c:	007a1200 	.word	0x007a1200

08006470 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006478:	f7ff fd64 	bl	8005f44 <LL_RCC_GetAHBPrescaler>
 800647c:	4603      	mov	r3, r0
 800647e:	091b      	lsrs	r3, r3, #4
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <RCC_GetHCLKClockFreq+0x28>)
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	461a      	mov	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	40d3      	lsrs	r3, r2
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	08009494 	.word	0x08009494

0800649c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80064a4:	f7ff fd5c 	bl	8005f60 <LL_RCC_GetAPB1Prescaler>
 80064a8:	4603      	mov	r3, r0
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80064ae:	5cd3      	ldrb	r3, [r2, r3]
 80064b0:	461a      	mov	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	40d3      	lsrs	r3, r2
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	080094a4 	.word	0x080094a4

080064c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80064cc:	f7ff fd56 	bl	8005f7c <LL_RCC_GetAPB2Prescaler>
 80064d0:	4603      	mov	r3, r0
 80064d2:	0adb      	lsrs	r3, r3, #11
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80064d6:	5cd3      	ldrb	r3, [r2, r3]
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	40d3      	lsrs	r3, r2
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	080094a4 	.word	0x080094a4

080064ec <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80064f2:	f7ff fd79 	bl	8005fe8 <LL_RCC_PLL_GetMainSource>
 80064f6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d036      	beq.n	800656c <RCC_PLL_GetFreqDomain_SYS+0x80>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d836      	bhi.n	8006572 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d003      	beq.n	8006512 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d02a      	beq.n	8006566 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006510:	e02f      	b.n	8006572 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006512:	f7ff fcdb 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d111      	bne.n	8006540 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800651c:	f7ff fcd6 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006526:	f7ff fce3 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 800652a:	4603      	mov	r3, r0
 800652c:	0a1b      	lsrs	r3, r3, #8
 800652e:	e003      	b.n	8006538 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006530:	f7ff fcec 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 8006534:	4603      	mov	r3, r0
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800653a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653e:	e010      	b.n	8006562 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006540:	f7ff fcc4 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800654a:	f7ff fcd1 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 800654e:	4603      	mov	r3, r0
 8006550:	091b      	lsrs	r3, r3, #4
 8006552:	e003      	b.n	800655c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006554:	f7ff fcda 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 8006558:	4603      	mov	r3, r0
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800655e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006562:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006564:	e02f      	b.n	80065c6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006566:	4b25      	ldr	r3, [pc, #148]	; (80065fc <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006568:	607b      	str	r3, [r7, #4]
      break;
 800656a:	e02c      	b.n	80065c6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800656c:	4b24      	ldr	r3, [pc, #144]	; (8006600 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800656e:	607b      	str	r3, [r7, #4]
      break;
 8006570:	e029      	b.n	80065c6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006572:	f7ff fcab 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d111      	bne.n	80065a0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800657c:	f7ff fca6 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006586:	f7ff fcb3 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 800658a:	4603      	mov	r3, r0
 800658c:	0a1b      	lsrs	r3, r3, #8
 800658e:	e003      	b.n	8006598 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006590:	f7ff fcbc 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 8006594:	4603      	mov	r3, r0
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800659a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659e:	e010      	b.n	80065c2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80065a0:	f7ff fc94 	bl	8005ecc <LL_RCC_MSI_IsEnabledRangeSelect>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80065aa:	f7ff fca1 	bl	8005ef0 <LL_RCC_MSI_GetRange>
 80065ae:	4603      	mov	r3, r0
 80065b0:	091b      	lsrs	r3, r3, #4
 80065b2:	e003      	b.n	80065bc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80065b4:	f7ff fcaa 	bl	8005f0c <LL_RCC_MSI_GetRangeAfterStandby>
 80065b8:	4603      	mov	r3, r0
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	4a0e      	ldr	r2, [pc, #56]	; (80065f8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80065be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80065c4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80065c6:	f7ff fd39 	bl	800603c <LL_RCC_PLL_GetDivider>
 80065ca:	4603      	mov	r3, r0
 80065cc:	091b      	lsrs	r3, r3, #4
 80065ce:	3301      	adds	r3, #1
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	fbb2 f4f3 	udiv	r4, r2, r3
 80065d6:	f7ff fd15 	bl	8006004 <LL_RCC_PLL_GetN>
 80065da:	4603      	mov	r3, r0
 80065dc:	fb03 f404 	mul.w	r4, r3, r4
 80065e0:	f7ff fd1e 	bl	8006020 <LL_RCC_PLL_GetR>
 80065e4:	4603      	mov	r3, r0
 80065e6:	0e5b      	lsrs	r3, r3, #25
 80065e8:	3301      	adds	r3, #1
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd90      	pop	{r4, r7, pc}
 80065f8:	080094ac 	.word	0x080094ac
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	007a1200 	.word	0x007a1200

08006604 <LL_USART_IsEnabled>:
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <LL_USART_IsEnabled+0x18>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <LL_USART_IsEnabled+0x1a>
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <LL_USART_SetStopBitsLength>:
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <LL_USART_SetHWFlowCtrl>:
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	609a      	str	r2, [r3, #8]
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <LL_USART_SetBaudRate>:
{
 8006676:	b480      	push	{r7}
 8006678:	b087      	sub	sp, #28
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d11a      	bne.n	80066c2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	005a      	lsls	r2, r3, #1
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	441a      	add	r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	b29b      	uxth	r3, r3
 800669e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	60da      	str	r2, [r3, #12]
}
 80066c0:	e00a      	b.n	80066d8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	085a      	lsrs	r2, r3, #1
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	441a      	add	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	60da      	str	r2, [r3, #12]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff ff84 	bl	8006604 <LL_USART_IsEnabled>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d15b      	bne.n	80067ba <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4b2f      	ldr	r3, [pc, #188]	; (80067c4 <LL_USART_Init+0xe0>)
 8006708:	4013      	ands	r3, r2
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	6851      	ldr	r1, [r2, #4]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	68d2      	ldr	r2, [r2, #12]
 8006712:	4311      	orrs	r1, r2
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	6912      	ldr	r2, [r2, #16]
 8006718:	4311      	orrs	r1, r2
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	6992      	ldr	r2, [r2, #24]
 800671e:	430a      	orrs	r2, r1
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ff7c 	bl	800662a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff89 	bl	8006650 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <LL_USART_Init+0xe4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d104      	bne.n	8006750 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006746:	2003      	movs	r0, #3
 8006748:	f7ff fc86 	bl	8006058 <LL_RCC_GetUSARTClockFreq>
 800674c:	60b8      	str	r0, [r7, #8]
 800674e:	e023      	b.n	8006798 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a1e      	ldr	r2, [pc, #120]	; (80067cc <LL_USART_Init+0xe8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d104      	bne.n	8006762 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006758:	200c      	movs	r0, #12
 800675a:	f7ff fc7d 	bl	8006058 <LL_RCC_GetUSARTClockFreq>
 800675e:	60b8      	str	r0, [r7, #8]
 8006760:	e01a      	b.n	8006798 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1a      	ldr	r2, [pc, #104]	; (80067d0 <LL_USART_Init+0xec>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d104      	bne.n	8006774 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800676a:	2030      	movs	r0, #48	; 0x30
 800676c:	f7ff fc74 	bl	8006058 <LL_RCC_GetUSARTClockFreq>
 8006770:	60b8      	str	r0, [r7, #8]
 8006772:	e011      	b.n	8006798 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a17      	ldr	r2, [pc, #92]	; (80067d4 <LL_USART_Init+0xf0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d104      	bne.n	8006786 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800677c:	20c0      	movs	r0, #192	; 0xc0
 800677e:	f7ff fd4f 	bl	8006220 <LL_RCC_GetUARTClockFreq>
 8006782:	60b8      	str	r0, [r7, #8]
 8006784:	e008      	b.n	8006798 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <LL_USART_Init+0xf4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d104      	bne.n	8006798 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800678e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006792:	f7ff fd45 	bl	8006220 <LL_RCC_GetUARTClockFreq>
 8006796:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00d      	beq.n	80067ba <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff ff5e 	bl	8006676 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	efff69f3 	.word	0xefff69f3
 80067c8:	40013800 	.word	0x40013800
 80067cc:	40004400 	.word	0x40004400
 80067d0:	40004800 	.word	0x40004800
 80067d4:	40004c00 	.word	0x40004c00
 80067d8:	40005000 	.word	0x40005000

080067dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067ee:	2b84      	cmp	r3, #132	; 0x84
 80067f0:	d005      	beq.n	80067fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	3303      	adds	r3, #3
 80067fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067fe:	68fb      	ldr	r3, [r7, #12]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006810:	f000 fff4 	bl	80077fc <vTaskStartScheduler>
  
  return osOK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	bd80      	pop	{r7, pc}

0800681a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800681a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681c:	b089      	sub	sp, #36	; 0x24
 800681e:	af04      	add	r7, sp, #16
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <osThreadCreate+0x54>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685c      	ldr	r4, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681d      	ldr	r5, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691e      	ldr	r6, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff ffc8 	bl	80067dc <makeFreeRtosPriority>
 800684c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006856:	9202      	str	r2, [sp, #8]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	9100      	str	r1, [sp, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	4632      	mov	r2, r6
 8006860:	4629      	mov	r1, r5
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fdec 	bl	8007440 <xTaskCreateStatic>
 8006868:	4603      	mov	r3, r0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e01c      	b.n	80068a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685c      	ldr	r4, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800687a:	b29e      	uxth	r6, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff ffaa 	bl	80067dc <makeFreeRtosPriority>
 8006888:	4602      	mov	r2, r0
 800688a:	f107 030c 	add.w	r3, r7, #12
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	9200      	str	r2, [sp, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	4632      	mov	r2, r6
 8006896:	4629      	mov	r1, r5
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fe2e 	bl	80074fa <xTaskCreate>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d001      	beq.n	80068a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e000      	b.n	80068aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <osDelay+0x16>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	e000      	b.n	80068ca <osDelay+0x18>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 ff62 	bl	8007794 <vTaskDelay>
  
  return osOK;
 80068d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f103 0208 	add.w	r2, r3, #8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f103 0208 	add.w	r2, r3, #8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f103 0208 	add.w	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006992:	d103      	bne.n	800699c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e00c      	b.n	80069b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3308      	adds	r3, #8
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e002      	b.n	80069aa <vListInsert+0x2e>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d2f6      	bcs.n	80069a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6892      	ldr	r2, [r2, #8]
 8006a04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6852      	ldr	r2, [r2, #4]
 8006a0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d103      	bne.n	8006a22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	1e5a      	subs	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a6e:	f001 fd11 	bl	8008494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a7e:	fb01 f303 	mul.w	r3, r1, r3
 8006a82:	441a      	add	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	441a      	add	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	22ff      	movs	r2, #255	; 0xff
 8006ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d114      	bne.n	8006aee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01a      	beq.n	8006b02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3310      	adds	r3, #16
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f8e5 	bl	8007ca0 <xTaskRemoveFromEventList>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <xQueueGenericReset+0xcc>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e009      	b.n	8006b02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3310      	adds	r3, #16
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fef1 	bl	80068da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff feec 	bl	80068da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b02:	f001 fcf7 	bl	80084f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b06:	2301      	movs	r3, #1
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	613b      	str	r3, [r7, #16]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	fb02 f303 	mul.w	r3, r2, r3
 8006b46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	3348      	adds	r3, #72	; 0x48
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 fdc3 	bl	80086d8 <pvPortMalloc>
 8006b52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d011      	beq.n	8006b7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	3348      	adds	r3, #72	; 0x48
 8006b62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b6c:	79fa      	ldrb	r2, [r7, #7]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	4613      	mov	r3, r2
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f805 	bl	8006b88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e002      	b.n	8006baa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	69b8      	ldr	r0, [r7, #24]
 8006bba:	f7ff ff43 	bl	8006a44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00e      	beq.n	8006bf2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006be6:	2300      	movs	r3, #0
 8006be8:	2200      	movs	r2, #0
 8006bea:	2100      	movs	r1, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f81d 	bl	8006c2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	4603      	mov	r3, r0
 8006c02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c04:	2301      	movs	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6939      	ldr	r1, [r7, #16]
 8006c12:	6978      	ldr	r0, [r7, #20]
 8006c14:	f7ff ff7e 	bl	8006b14 <xQueueGenericCreate>
 8006c18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff ffd3 	bl	8006bc6 <prvInitialiseMutex>

		return xNewQueue;
 8006c20:	68fb      	ldr	r3, [r7, #12]
	}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08e      	sub	sp, #56	; 0x38
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xQueueGenericSend+0x32>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <xQueueGenericSend+0x40>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <xQueueGenericSend+0x44>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <xQueueGenericSend+0x46>
 8006c70:	2300      	movs	r3, #0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <xQueueGenericSend+0x60>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d103      	bne.n	8006c9a <xQueueGenericSend+0x6e>
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <xQueueGenericSend+0x72>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <xQueueGenericSend+0x74>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <xQueueGenericSend+0x8e>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	623b      	str	r3, [r7, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cba:	f001 f9b1 	bl	8008020 <xTaskGetSchedulerState>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <xQueueGenericSend+0x9e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <xQueueGenericSend+0xa2>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <xQueueGenericSend+0xa4>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <xQueueGenericSend+0xbe>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	61fb      	str	r3, [r7, #28]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cea:	f001 fbd3 	bl	8008494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d302      	bcc.n	8006d00 <xQueueGenericSend+0xd4>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d129      	bne.n	8006d54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d06:	f000 fa8b 	bl	8007220 <prvCopyDataToQueue>
 8006d0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d010      	beq.n	8006d36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	3324      	adds	r3, #36	; 0x24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 ffc1 	bl	8007ca0 <xTaskRemoveFromEventList>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d013      	beq.n	8006d4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d24:	4b3f      	ldr	r3, [pc, #252]	; (8006e24 <xQueueGenericSend+0x1f8>)
 8006d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	e00a      	b.n	8006d4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d3c:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <xQueueGenericSend+0x1f8>)
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d4c:	f001 fbd2 	bl	80084f4 <vPortExitCritical>
				return pdPASS;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e063      	b.n	8006e1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d103      	bne.n	8006d62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d5a:	f001 fbcb 	bl	80084f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e05c      	b.n	8006e1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d68:	f107 0314 	add.w	r3, r7, #20
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fff9 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d72:	2301      	movs	r3, #1
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d76:	f001 fbbd 	bl	80084f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d7a:	f000 fda9 	bl	80078d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d7e:	f001 fb89 	bl	8008494 <vPortEnterCritical>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d8e:	d103      	bne.n	8006d98 <xQueueGenericSend+0x16c>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da4:	d103      	bne.n	8006dae <xQueueGenericSend+0x182>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dae:	f001 fba1 	bl	80084f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006db2:	1d3a      	adds	r2, r7, #4
 8006db4:	f107 0314 	add.w	r3, r7, #20
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ffe8 	bl	8007d90 <xTaskCheckForTimeOut>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d124      	bne.n	8006e10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc8:	f000 fb22 	bl	8007410 <prvIsQueueFull>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d018      	beq.n	8006e04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	3310      	adds	r3, #16
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 ff3c 	bl	8007c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de2:	f000 faad 	bl	8007340 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006de6:	f000 fd81 	bl	80078ec <xTaskResumeAll>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f af7c 	bne.w	8006cea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <xQueueGenericSend+0x1f8>)
 8006df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	e772      	b.n	8006cea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e06:	f000 fa9b 	bl	8007340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e0a:	f000 fd6f 	bl	80078ec <xTaskResumeAll>
 8006e0e:	e76c      	b.n	8006cea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e12:	f000 fa95 	bl	8007340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e16:	f000 fd69 	bl	80078ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3738      	adds	r7, #56	; 0x38
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b090      	sub	sp, #64	; 0x40
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d103      	bne.n	8006e64 <xQueueGenericSendFromISR+0x3c>
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <xQueueGenericSendFromISR+0x40>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <xQueueGenericSendFromISR+0x42>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d103      	bne.n	8006e92 <xQueueGenericSendFromISR+0x6a>
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <xQueueGenericSendFromISR+0x6e>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <xQueueGenericSendFromISR+0x70>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	623b      	str	r3, [r7, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eb2:	f001 fbd1 	bl	8008658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	61fa      	str	r2, [r7, #28]
 8006ecc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ece:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d302      	bcc.n	8006ee4 <xQueueGenericSendFromISR+0xbc>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d12f      	bne.n	8006f44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006efa:	f000 f991 	bl	8007220 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006efe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f06:	d112      	bne.n	8006f2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d016      	beq.n	8006f3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fec3 	bl	8007ca0 <xTaskRemoveFromEventList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00e      	beq.n	8006f3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	e007      	b.n	8006f3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f32:	3301      	adds	r3, #1
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	b25a      	sxtb	r2, r3
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f42:	e001      	b.n	8006f48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3740      	adds	r7, #64	; 0x40
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08c      	sub	sp, #48	; 0x30
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <xQueueReceive+0x30>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	623b      	str	r3, [r7, #32]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d103      	bne.n	8006f9e <xQueueReceive+0x3e>
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <xQueueReceive+0x42>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <xQueueReceive+0x44>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xQueueReceive+0x5e>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	61fb      	str	r3, [r7, #28]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fbe:	f001 f82f 	bl	8008020 <xTaskGetSchedulerState>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <xQueueReceive+0x6e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <xQueueReceive+0x72>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <xQueueReceive+0x74>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <xQueueReceive+0x8e>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	61bb      	str	r3, [r7, #24]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fee:	f001 fa51 	bl	8008494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d01f      	beq.n	800703e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007002:	f000 f977 	bl	80072f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	1e5a      	subs	r2, r3, #1
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00f      	beq.n	8007036 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	3310      	adds	r3, #16
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fe40 	bl	8007ca0 <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007026:	4b3d      	ldr	r3, [pc, #244]	; (800711c <xQueueReceive+0x1bc>)
 8007028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007036:	f001 fa5d 	bl	80084f4 <vPortExitCritical>
				return pdPASS;
 800703a:	2301      	movs	r3, #1
 800703c:	e069      	b.n	8007112 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007044:	f001 fa56 	bl	80084f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007048:	2300      	movs	r3, #0
 800704a:	e062      	b.n	8007112 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007052:	f107 0310 	add.w	r3, r7, #16
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fe84 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007060:	f001 fa48 	bl	80084f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007064:	f000 fc34 	bl	80078d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007068:	f001 fa14 	bl	8008494 <vPortEnterCritical>
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007072:	b25b      	sxtb	r3, r3
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007078:	d103      	bne.n	8007082 <xQueueReceive+0x122>
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007088:	b25b      	sxtb	r3, r3
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800708e:	d103      	bne.n	8007098 <xQueueReceive+0x138>
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007098:	f001 fa2c 	bl	80084f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800709c:	1d3a      	adds	r2, r7, #4
 800709e:	f107 0310 	add.w	r3, r7, #16
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fe73 	bl	8007d90 <xTaskCheckForTimeOut>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d123      	bne.n	80070f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b2:	f000 f997 	bl	80073e4 <prvIsQueueEmpty>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d017      	beq.n	80070ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fdc7 	bl	8007c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070cc:	f000 f938 	bl	8007340 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070d0:	f000 fc0c 	bl	80078ec <xTaskResumeAll>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d189      	bne.n	8006fee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070da:	4b10      	ldr	r3, [pc, #64]	; (800711c <xQueueReceive+0x1bc>)
 80070dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	e780      	b.n	8006fee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ee:	f000 f927 	bl	8007340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070f2:	f000 fbfb 	bl	80078ec <xTaskResumeAll>
 80070f6:	e77a      	b.n	8006fee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fa:	f000 f921 	bl	8007340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070fe:	f000 fbf5 	bl	80078ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007104:	f000 f96e 	bl	80073e4 <prvIsQueueEmpty>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	f43f af6f 	beq.w	8006fee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007112:	4618      	mov	r0, r3
 8007114:	3730      	adds	r7, #48	; 0x30
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	e000ed04 	.word	0xe000ed04

08007120 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08e      	sub	sp, #56	; 0x38
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	623b      	str	r3, [r7, #32]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <xQueueReceiveFromISR+0x3a>
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <xQueueReceiveFromISR+0x3e>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <xQueueReceiveFromISR+0x40>
 800715e:	2300      	movs	r3, #0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	61fb      	str	r3, [r7, #28]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800717a:	f001 fa6d 	bl	8008658 <vPortValidateInterruptPriority>
	__asm volatile
 800717e:	f3ef 8211 	mrs	r2, BASEPRI
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	61ba      	str	r2, [r7, #24]
 8007194:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007196:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d02f      	beq.n	8007206 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b4:	f000 f89e 	bl	80072f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	1e5a      	subs	r2, r3, #1
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c8:	d112      	bne.n	80071f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d016      	beq.n	8007200 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	3310      	adds	r3, #16
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fd62 	bl	8007ca0 <xTaskRemoveFromEventList>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00e      	beq.n	8007200 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e007      	b.n	8007200 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f4:	3301      	adds	r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	b25a      	sxtb	r2, r3
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007200:	2301      	movs	r3, #1
 8007202:	637b      	str	r3, [r7, #52]	; 0x34
 8007204:	e001      	b.n	800720a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007206:	2300      	movs	r3, #0
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f383 8811 	msr	BASEPRI, r3
}
 8007214:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007218:	4618      	mov	r0, r3
 800721a:	3738      	adds	r7, #56	; 0x38
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10d      	bne.n	800725a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d14d      	bne.n	80072e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 ff06 	bl	800805c <xTaskPriorityDisinherit>
 8007250:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	609a      	str	r2, [r3, #8]
 8007258:	e043      	b.n	80072e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d119      	bne.n	8007294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6858      	ldr	r0, [r3, #4]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	461a      	mov	r2, r3
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	f001 fc4a 	bl	8008b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	441a      	add	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	429a      	cmp	r2, r3
 8007288:	d32b      	bcc.n	80072e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	605a      	str	r2, [r3, #4]
 8007292:	e026      	b.n	80072e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68d8      	ldr	r0, [r3, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	461a      	mov	r2, r3
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	f001 fc30 	bl	8008b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	425b      	negs	r3, r3
 80072ae:	441a      	add	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d207      	bcs.n	80072d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	425b      	negs	r3, r3
 80072ca:	441a      	add	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d105      	bne.n	80072e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3b01      	subs	r3, #1
 80072e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072ea:	697b      	ldr	r3, [r7, #20]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d018      	beq.n	8007338 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	441a      	add	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	429a      	cmp	r2, r3
 800731e:	d303      	bcc.n	8007328 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68d9      	ldr	r1, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	461a      	mov	r2, r3
 8007332:	6838      	ldr	r0, [r7, #0]
 8007334:	f001 fbe6 	bl	8008b04 <memcpy>
	}
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007348:	f001 f8a4 	bl	8008494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007352:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007354:	e011      	b.n	800737a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d012      	beq.n	8007384 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3324      	adds	r3, #36	; 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fc9c 	bl	8007ca0 <xTaskRemoveFromEventList>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800736e:	f000 fd71 	bl	8007e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	3b01      	subs	r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800737a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dce9      	bgt.n	8007356 <prvUnlockQueue+0x16>
 8007382:	e000      	b.n	8007386 <prvUnlockQueue+0x46>
					break;
 8007384:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	22ff      	movs	r2, #255	; 0xff
 800738a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800738e:	f001 f8b1 	bl	80084f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007392:	f001 f87f 	bl	8008494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800739c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800739e:	e011      	b.n	80073c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d012      	beq.n	80073ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3310      	adds	r3, #16
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fc77 	bl	8007ca0 <xTaskRemoveFromEventList>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073b8:	f000 fd4c 	bl	8007e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	3b01      	subs	r3, #1
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dce9      	bgt.n	80073a0 <prvUnlockQueue+0x60>
 80073cc:	e000      	b.n	80073d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	22ff      	movs	r2, #255	; 0xff
 80073d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073d8:	f001 f88c 	bl	80084f4 <vPortExitCritical>
}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073ec:	f001 f852 	bl	8008494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073f8:	2301      	movs	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e001      	b.n	8007402 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007402:	f001 f877 	bl	80084f4 <vPortExitCritical>

	return xReturn;
 8007406:	68fb      	ldr	r3, [r7, #12]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007418:	f001 f83c 	bl	8008494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	429a      	cmp	r2, r3
 8007426:	d102      	bne.n	800742e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007428:	2301      	movs	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e001      	b.n	8007432 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007432:	f001 f85f 	bl	80084f4 <vPortExitCritical>

	return xReturn;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	; 0x38
 8007444:	af04      	add	r7, sp, #16
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	623b      	str	r3, [r7, #32]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xTaskCreateStatic+0x46>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	61fb      	str	r3, [r7, #28]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007486:	23b4      	movs	r3, #180	; 0xb4
 8007488:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2bb4      	cmp	r3, #180	; 0xb4
 800748e:	d00a      	beq.n	80074a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	61bb      	str	r3, [r7, #24]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01e      	beq.n	80074ec <xTaskCreateStatic+0xac>
 80074ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01b      	beq.n	80074ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074c6:	2300      	movs	r3, #0
 80074c8:	9303      	str	r3, [sp, #12]
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	9302      	str	r3, [sp, #8]
 80074ce:	f107 0314 	add.w	r3, r7, #20
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 f850 	bl	8007584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074e6:	f000 f8eb 	bl	80076c0 <prvAddNewTaskToReadyList>
 80074ea:	e001      	b.n	80074f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074f0:	697b      	ldr	r3, [r7, #20]
	}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3728      	adds	r7, #40	; 0x28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b08c      	sub	sp, #48	; 0x30
 80074fe:	af04      	add	r7, sp, #16
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	603b      	str	r3, [r7, #0]
 8007506:	4613      	mov	r3, r2
 8007508:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4618      	mov	r0, r3
 8007510:	f001 f8e2 	bl	80086d8 <pvPortMalloc>
 8007514:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00e      	beq.n	800753a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800751c:	20b4      	movs	r0, #180	; 0xb4
 800751e:	f001 f8db 	bl	80086d8 <pvPortMalloc>
 8007522:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
 8007530:	e005      	b.n	800753e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007532:	6978      	ldr	r0, [r7, #20]
 8007534:	f001 f99c 	bl	8008870 <vPortFree>
 8007538:	e001      	b.n	800753e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d017      	beq.n	8007574 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	2300      	movs	r3, #0
 8007550:	9303      	str	r3, [sp, #12]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	9302      	str	r3, [sp, #8]
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f80e 	bl	8007584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007568:	69f8      	ldr	r0, [r7, #28]
 800756a:	f000 f8a9 	bl	80076c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800756e:	2301      	movs	r3, #1
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	e002      	b.n	800757a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007578:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800757a:	69bb      	ldr	r3, [r7, #24]
	}
 800757c:	4618      	mov	r0, r3
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800759c:	3b01      	subs	r3, #1
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f023 0307 	bic.w	r3, r3, #7
 80075aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	617b      	str	r3, [r7, #20]
}
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01f      	beq.n	8007612 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	e012      	b.n	80075fe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	7819      	ldrb	r1, [r3, #0]
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	4413      	add	r3, r2
 80075e6:	3334      	adds	r3, #52	; 0x34
 80075e8:	460a      	mov	r2, r1
 80075ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	3301      	adds	r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	2b0f      	cmp	r3, #15
 8007602:	d9e9      	bls.n	80075d8 <prvInitialiseNewTask+0x54>
 8007604:	e000      	b.n	8007608 <prvInitialiseNewTask+0x84>
			{
				break;
 8007606:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007610:	e003      	b.n	800761a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	2b06      	cmp	r3, #6
 800761e:	d901      	bls.n	8007624 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007620:	2306      	movs	r3, #6
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800762e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f96d 	bl	800691a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	3318      	adds	r3, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff f968 	bl	800691a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	f1c3 0207 	rsb	r2, r3, #7
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2200      	movs	r2, #0
 800766c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	334c      	adds	r3, #76	; 0x4c
 8007674:	2260      	movs	r2, #96	; 0x60
 8007676:	2100      	movs	r1, #0
 8007678:	4618      	mov	r0, r3
 800767a:	f001 fa51 	bl	8008b20 <memset>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	4a0c      	ldr	r2, [pc, #48]	; (80076b4 <prvInitialiseNewTask+0x130>)
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <prvInitialiseNewTask+0x134>)
 8007688:	655a      	str	r2, [r3, #84]	; 0x54
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	4a0b      	ldr	r2, [pc, #44]	; (80076bc <prvInitialiseNewTask+0x138>)
 800768e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	69b8      	ldr	r0, [r7, #24]
 8007696:	f000 fdcd 	bl	8008234 <pxPortInitialiseStack>
 800769a:	4602      	mov	r2, r0
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ac:	bf00      	nop
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	080094fc 	.word	0x080094fc
 80076b8:	0800951c 	.word	0x0800951c
 80076bc:	080094dc 	.word	0x080094dc

080076c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076c8:	f000 fee4 	bl	8008494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076cc:	4b2a      	ldr	r3, [pc, #168]	; (8007778 <prvAddNewTaskToReadyList+0xb8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	4a29      	ldr	r2, [pc, #164]	; (8007778 <prvAddNewTaskToReadyList+0xb8>)
 80076d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076d6:	4b29      	ldr	r3, [pc, #164]	; (800777c <prvAddNewTaskToReadyList+0xbc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d109      	bne.n	80076f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076de:	4a27      	ldr	r2, [pc, #156]	; (800777c <prvAddNewTaskToReadyList+0xbc>)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076e4:	4b24      	ldr	r3, [pc, #144]	; (8007778 <prvAddNewTaskToReadyList+0xb8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d110      	bne.n	800770e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076ec:	f000 fbd6 	bl	8007e9c <prvInitialiseTaskLists>
 80076f0:	e00d      	b.n	800770e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076f2:	4b23      	ldr	r3, [pc, #140]	; (8007780 <prvAddNewTaskToReadyList+0xc0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076fa:	4b20      	ldr	r3, [pc, #128]	; (800777c <prvAddNewTaskToReadyList+0xbc>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	429a      	cmp	r2, r3
 8007706:	d802      	bhi.n	800770e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007708:	4a1c      	ldr	r2, [pc, #112]	; (800777c <prvAddNewTaskToReadyList+0xbc>)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800770e:	4b1d      	ldr	r3, [pc, #116]	; (8007784 <prvAddNewTaskToReadyList+0xc4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <prvAddNewTaskToReadyList+0xc4>)
 8007716:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	2201      	movs	r2, #1
 800771e:	409a      	lsls	r2, r3
 8007720:	4b19      	ldr	r3, [pc, #100]	; (8007788 <prvAddNewTaskToReadyList+0xc8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4313      	orrs	r3, r2
 8007726:	4a18      	ldr	r2, [pc, #96]	; (8007788 <prvAddNewTaskToReadyList+0xc8>)
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <prvAddNewTaskToReadyList+0xcc>)
 8007738:	441a      	add	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3304      	adds	r3, #4
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7ff f8f7 	bl	8006934 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007746:	f000 fed5 	bl	80084f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800774a:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <prvAddNewTaskToReadyList+0xc0>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00e      	beq.n	8007770 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <prvAddNewTaskToReadyList+0xbc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	429a      	cmp	r2, r3
 800775e:	d207      	bcs.n	8007770 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <prvAddNewTaskToReadyList+0xd0>)
 8007762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	20000450 	.word	0x20000450
 800777c:	20000350 	.word	0x20000350
 8007780:	2000045c 	.word	0x2000045c
 8007784:	2000046c 	.word	0x2000046c
 8007788:	20000458 	.word	0x20000458
 800778c:	20000354 	.word	0x20000354
 8007790:	e000ed04 	.word	0xe000ed04

08007794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d017      	beq.n	80077d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <vTaskDelay+0x60>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <vTaskDelay+0x30>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60bb      	str	r3, [r7, #8]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077c4:	f000 f884 	bl	80078d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c8:	2100      	movs	r1, #0
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fccc 	bl	8008168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077d0:	f000 f88c 	bl	80078ec <xTaskResumeAll>
 80077d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d107      	bne.n	80077ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077dc:	4b06      	ldr	r3, [pc, #24]	; (80077f8 <vTaskDelay+0x64>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000478 	.word	0x20000478
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800780a:	463a      	mov	r2, r7
 800780c:	1d39      	adds	r1, r7, #4
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	4618      	mov	r0, r3
 8007814:	f7f8 fd2c 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	9202      	str	r2, [sp, #8]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	2300      	movs	r3, #0
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	460a      	mov	r2, r1
 800782a:	4921      	ldr	r1, [pc, #132]	; (80078b0 <vTaskStartScheduler+0xb4>)
 800782c:	4821      	ldr	r0, [pc, #132]	; (80078b4 <vTaskStartScheduler+0xb8>)
 800782e:	f7ff fe07 	bl	8007440 <xTaskCreateStatic>
 8007832:	4603      	mov	r3, r0
 8007834:	4a20      	ldr	r2, [pc, #128]	; (80078b8 <vTaskStartScheduler+0xbc>)
 8007836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007838:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <vTaskStartScheduler+0xbc>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007840:	2301      	movs	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e001      	b.n	800784a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d11b      	bne.n	8007888 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	613b      	str	r3, [r7, #16]
}
 8007862:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007864:	4b15      	ldr	r3, [pc, #84]	; (80078bc <vTaskStartScheduler+0xc0>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	334c      	adds	r3, #76	; 0x4c
 800786a:	4a15      	ldr	r2, [pc, #84]	; (80078c0 <vTaskStartScheduler+0xc4>)
 800786c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800786e:	4b15      	ldr	r3, [pc, #84]	; (80078c4 <vTaskStartScheduler+0xc8>)
 8007870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <vTaskStartScheduler+0xcc>)
 8007878:	2201      	movs	r2, #1
 800787a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800787c:	4b13      	ldr	r3, [pc, #76]	; (80078cc <vTaskStartScheduler+0xd0>)
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007882:	f000 fd65 	bl	8008350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007886:	e00e      	b.n	80078a6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788e:	d10a      	bne.n	80078a6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	60fb      	str	r3, [r7, #12]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <vTaskStartScheduler+0xa8>
}
 80078a6:	bf00      	nop
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	0800948c 	.word	0x0800948c
 80078b4:	08007e6d 	.word	0x08007e6d
 80078b8:	20000474 	.word	0x20000474
 80078bc:	20000350 	.word	0x20000350
 80078c0:	20000010 	.word	0x20000010
 80078c4:	20000470 	.word	0x20000470
 80078c8:	2000045c 	.word	0x2000045c
 80078cc:	20000454 	.word	0x20000454

080078d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <vTaskSuspendAll+0x18>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	4a03      	ldr	r2, [pc, #12]	; (80078e8 <vTaskSuspendAll+0x18>)
 80078dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078de:	bf00      	nop
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	20000478 	.word	0x20000478

080078ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078fa:	4b41      	ldr	r3, [pc, #260]	; (8007a00 <xTaskResumeAll+0x114>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <xTaskResumeAll+0x2c>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	603b      	str	r3, [r7, #0]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007918:	f000 fdbc 	bl	8008494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800791c:	4b38      	ldr	r3, [pc, #224]	; (8007a00 <xTaskResumeAll+0x114>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3b01      	subs	r3, #1
 8007922:	4a37      	ldr	r2, [pc, #220]	; (8007a00 <xTaskResumeAll+0x114>)
 8007924:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007926:	4b36      	ldr	r3, [pc, #216]	; (8007a00 <xTaskResumeAll+0x114>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d161      	bne.n	80079f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800792e:	4b35      	ldr	r3, [pc, #212]	; (8007a04 <xTaskResumeAll+0x118>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d05d      	beq.n	80079f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007936:	e02e      	b.n	8007996 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007938:	4b33      	ldr	r3, [pc, #204]	; (8007a08 <xTaskResumeAll+0x11c>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3318      	adds	r3, #24
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff f852 	bl	80069ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3304      	adds	r3, #4
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff f84d 	bl	80069ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	2201      	movs	r2, #1
 800795a:	409a      	lsls	r2, r3
 800795c:	4b2b      	ldr	r3, [pc, #172]	; (8007a0c <xTaskResumeAll+0x120>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4313      	orrs	r3, r2
 8007962:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <xTaskResumeAll+0x120>)
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4a27      	ldr	r2, [pc, #156]	; (8007a10 <xTaskResumeAll+0x124>)
 8007974:	441a      	add	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f7fe ffd9 	bl	8006934 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <xTaskResumeAll+0x128>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	429a      	cmp	r2, r3
 800798e:	d302      	bcc.n	8007996 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007990:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <xTaskResumeAll+0x12c>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007996:	4b1c      	ldr	r3, [pc, #112]	; (8007a08 <xTaskResumeAll+0x11c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1cc      	bne.n	8007938 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079a4:	f000 fb1c 	bl	8007fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079a8:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <xTaskResumeAll+0x130>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079b4:	f000 f836 	bl	8007a24 <xTaskIncrementTick>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079be:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <xTaskResumeAll+0x12c>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f1      	bne.n	80079b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80079d0:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <xTaskResumeAll+0x130>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079d6:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <xTaskResumeAll+0x12c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079de:	2301      	movs	r3, #1
 80079e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <xTaskResumeAll+0x134>)
 80079e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079f2:	f000 fd7f 	bl	80084f4 <vPortExitCritical>

	return xAlreadyYielded;
 80079f6:	68bb      	ldr	r3, [r7, #8]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000478 	.word	0x20000478
 8007a04:	20000450 	.word	0x20000450
 8007a08:	20000410 	.word	0x20000410
 8007a0c:	20000458 	.word	0x20000458
 8007a10:	20000354 	.word	0x20000354
 8007a14:	20000350 	.word	0x20000350
 8007a18:	20000464 	.word	0x20000464
 8007a1c:	20000460 	.word	0x20000460
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a2e:	4b4e      	ldr	r3, [pc, #312]	; (8007b68 <xTaskIncrementTick+0x144>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 808e 	bne.w	8007b54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a38:	4b4c      	ldr	r3, [pc, #304]	; (8007b6c <xTaskIncrementTick+0x148>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a40:	4a4a      	ldr	r2, [pc, #296]	; (8007b6c <xTaskIncrementTick+0x148>)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d120      	bne.n	8007a8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a4c:	4b48      	ldr	r3, [pc, #288]	; (8007b70 <xTaskIncrementTick+0x14c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <xTaskIncrementTick+0x48>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	603b      	str	r3, [r7, #0]
}
 8007a68:	bf00      	nop
 8007a6a:	e7fe      	b.n	8007a6a <xTaskIncrementTick+0x46>
 8007a6c:	4b40      	ldr	r3, [pc, #256]	; (8007b70 <xTaskIncrementTick+0x14c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <xTaskIncrementTick+0x150>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a3e      	ldr	r2, [pc, #248]	; (8007b70 <xTaskIncrementTick+0x14c>)
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	4a3e      	ldr	r2, [pc, #248]	; (8007b74 <xTaskIncrementTick+0x150>)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	4b3d      	ldr	r3, [pc, #244]	; (8007b78 <xTaskIncrementTick+0x154>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	4a3c      	ldr	r2, [pc, #240]	; (8007b78 <xTaskIncrementTick+0x154>)
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	f000 faa9 	bl	8007fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a8e:	4b3b      	ldr	r3, [pc, #236]	; (8007b7c <xTaskIncrementTick+0x158>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d348      	bcc.n	8007b2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a98:	4b35      	ldr	r3, [pc, #212]	; (8007b70 <xTaskIncrementTick+0x14c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	4b36      	ldr	r3, [pc, #216]	; (8007b7c <xTaskIncrementTick+0x158>)
 8007aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aa8:	601a      	str	r2, [r3, #0]
					break;
 8007aaa:	e03e      	b.n	8007b2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aac:	4b30      	ldr	r3, [pc, #192]	; (8007b70 <xTaskIncrementTick+0x14c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d203      	bcs.n	8007acc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ac4:	4a2d      	ldr	r2, [pc, #180]	; (8007b7c <xTaskIncrementTick+0x158>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007aca:	e02e      	b.n	8007b2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe ff8c 	bl	80069ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	3318      	adds	r3, #24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe ff83 	bl	80069ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	2201      	movs	r2, #1
 8007aee:	409a      	lsls	r2, r3
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <xTaskIncrementTick+0x15c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	4a22      	ldr	r2, [pc, #136]	; (8007b80 <xTaskIncrementTick+0x15c>)
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <xTaskIncrementTick+0x160>)
 8007b08:	441a      	add	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4610      	mov	r0, r2
 8007b12:	f7fe ff0f 	bl	8006934 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <xTaskIncrementTick+0x164>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d3b9      	bcc.n	8007a98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b24:	2301      	movs	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b28:	e7b6      	b.n	8007a98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b2a:	4b17      	ldr	r3, [pc, #92]	; (8007b88 <xTaskIncrementTick+0x164>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	4914      	ldr	r1, [pc, #80]	; (8007b84 <xTaskIncrementTick+0x160>)
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d901      	bls.n	8007b46 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b42:	2301      	movs	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b46:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <xTaskIncrementTick+0x168>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	e004      	b.n	8007b5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b54:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <xTaskIncrementTick+0x16c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	4a0d      	ldr	r2, [pc, #52]	; (8007b90 <xTaskIncrementTick+0x16c>)
 8007b5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b5e:	697b      	ldr	r3, [r7, #20]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	20000478 	.word	0x20000478
 8007b6c:	20000454 	.word	0x20000454
 8007b70:	20000408 	.word	0x20000408
 8007b74:	2000040c 	.word	0x2000040c
 8007b78:	20000468 	.word	0x20000468
 8007b7c:	20000470 	.word	0x20000470
 8007b80:	20000458 	.word	0x20000458
 8007b84:	20000354 	.word	0x20000354
 8007b88:	20000350 	.word	0x20000350
 8007b8c:	20000464 	.word	0x20000464
 8007b90:	20000460 	.word	0x20000460

08007b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b9a:	4b29      	ldr	r3, [pc, #164]	; (8007c40 <vTaskSwitchContext+0xac>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ba2:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <vTaskSwitchContext+0xb0>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ba8:	e044      	b.n	8007c34 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007baa:	4b26      	ldr	r3, [pc, #152]	; (8007c44 <vTaskSwitchContext+0xb0>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb0:	4b25      	ldr	r3, [pc, #148]	; (8007c48 <vTaskSwitchContext+0xb4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	fab3 f383 	clz	r3, r3
 8007bbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	f1c3 031f 	rsb	r3, r3, #31
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	4921      	ldr	r1, [pc, #132]	; (8007c4c <vTaskSwitchContext+0xb8>)
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	607b      	str	r3, [r7, #4]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <vTaskSwitchContext+0x5a>
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4a14      	ldr	r2, [pc, #80]	; (8007c4c <vTaskSwitchContext+0xb8>)
 8007bfc:	4413      	add	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	3308      	adds	r3, #8
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d104      	bne.n	8007c20 <vTaskSwitchContext+0x8c>
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	4a0a      	ldr	r2, [pc, #40]	; (8007c50 <vTaskSwitchContext+0xbc>)
 8007c28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c2a:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <vTaskSwitchContext+0xbc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	334c      	adds	r3, #76	; 0x4c
 8007c30:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <vTaskSwitchContext+0xc0>)
 8007c32:	6013      	str	r3, [r2, #0]
}
 8007c34:	bf00      	nop
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	20000478 	.word	0x20000478
 8007c44:	20000464 	.word	0x20000464
 8007c48:	20000458 	.word	0x20000458
 8007c4c:	20000354 	.word	0x20000354
 8007c50:	20000350 	.word	0x20000350
 8007c54:	20000010 	.word	0x20000010

08007c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60fb      	str	r3, [r7, #12]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <vTaskPlaceOnEventList+0x44>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3318      	adds	r3, #24
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fe fe78 	bl	800697c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	6838      	ldr	r0, [r7, #0]
 8007c90:	f000 fa6a 	bl	8008168 <prvAddCurrentTaskToDelayedList>
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000350 	.word	0x20000350

08007ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	3318      	adds	r3, #24
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fe8c 	bl	80069ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <xTaskRemoveFromEventList+0xac>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d11c      	bne.n	8007d18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fe83 	bl	80069ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	2201      	movs	r2, #1
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <xTaskRemoveFromEventList+0xb0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <xTaskRemoveFromEventList+0xb0>)
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <xTaskRemoveFromEventList+0xb4>)
 8007d08:	441a      	add	r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe fe0f 	bl	8006934 <vListInsertEnd>
 8007d16:	e005      	b.n	8007d24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	480e      	ldr	r0, [pc, #56]	; (8007d58 <xTaskRemoveFromEventList+0xb8>)
 8007d20:	f7fe fe08 	bl	8006934 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <xTaskRemoveFromEventList+0xbc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d905      	bls.n	8007d3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <xTaskRemoveFromEventList+0xc0>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	e001      	b.n	8007d42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d42:	697b      	ldr	r3, [r7, #20]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000478 	.word	0x20000478
 8007d50:	20000458 	.word	0x20000458
 8007d54:	20000354 	.word	0x20000354
 8007d58:	20000410 	.word	0x20000410
 8007d5c:	20000350 	.word	0x20000350
 8007d60:	20000464 	.word	0x20000464

08007d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <vTaskInternalSetTimeOutState+0x24>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <vTaskInternalSetTimeOutState+0x28>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000468 	.word	0x20000468
 8007d8c:	20000454 	.word	0x20000454

08007d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	613b      	str	r3, [r7, #16]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	60fb      	str	r3, [r7, #12]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dd2:	f000 fb5f 	bl	8008494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <xTaskCheckForTimeOut+0xbc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dee:	d102      	bne.n	8007df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e023      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <xTaskCheckForTimeOut+0xc0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d007      	beq.n	8007e12 <xTaskCheckForTimeOut+0x82>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d302      	bcc.n	8007e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e015      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d20b      	bcs.n	8007e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad2      	subs	r2, r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff ff9b 	bl	8007d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	e004      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e3e:	f000 fb59 	bl	80084f4 <vPortExitCritical>

	return xReturn;
 8007e42:	69fb      	ldr	r3, [r7, #28]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3720      	adds	r7, #32
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000454 	.word	0x20000454
 8007e50:	20000468 	.word	0x20000468

08007e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e58:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <vTaskMissedYield+0x14>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	20000464 	.word	0x20000464

08007e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e74:	f000 f852 	bl	8007f1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <prvIdleTask+0x28>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d9f9      	bls.n	8007e74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <prvIdleTask+0x2c>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e90:	e7f0      	b.n	8007e74 <prvIdleTask+0x8>
 8007e92:	bf00      	nop
 8007e94:	20000354 	.word	0x20000354
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	e00c      	b.n	8007ec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4a12      	ldr	r2, [pc, #72]	; (8007efc <prvInitialiseTaskLists+0x60>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fd0f 	bl	80068da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b06      	cmp	r3, #6
 8007ec6:	d9ef      	bls.n	8007ea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ec8:	480d      	ldr	r0, [pc, #52]	; (8007f00 <prvInitialiseTaskLists+0x64>)
 8007eca:	f7fe fd06 	bl	80068da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ece:	480d      	ldr	r0, [pc, #52]	; (8007f04 <prvInitialiseTaskLists+0x68>)
 8007ed0:	f7fe fd03 	bl	80068da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ed4:	480c      	ldr	r0, [pc, #48]	; (8007f08 <prvInitialiseTaskLists+0x6c>)
 8007ed6:	f7fe fd00 	bl	80068da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eda:	480c      	ldr	r0, [pc, #48]	; (8007f0c <prvInitialiseTaskLists+0x70>)
 8007edc:	f7fe fcfd 	bl	80068da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ee0:	480b      	ldr	r0, [pc, #44]	; (8007f10 <prvInitialiseTaskLists+0x74>)
 8007ee2:	f7fe fcfa 	bl	80068da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <prvInitialiseTaskLists+0x78>)
 8007ee8:	4a05      	ldr	r2, [pc, #20]	; (8007f00 <prvInitialiseTaskLists+0x64>)
 8007eea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <prvInitialiseTaskLists+0x7c>)
 8007eee:	4a05      	ldr	r2, [pc, #20]	; (8007f04 <prvInitialiseTaskLists+0x68>)
 8007ef0:	601a      	str	r2, [r3, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000354 	.word	0x20000354
 8007f00:	200003e0 	.word	0x200003e0
 8007f04:	200003f4 	.word	0x200003f4
 8007f08:	20000410 	.word	0x20000410
 8007f0c:	20000424 	.word	0x20000424
 8007f10:	2000043c 	.word	0x2000043c
 8007f14:	20000408 	.word	0x20000408
 8007f18:	2000040c 	.word	0x2000040c

08007f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f22:	e019      	b.n	8007f58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f24:	f000 fab6 	bl	8008494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f28:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <prvCheckTasksWaitingTermination+0x50>)
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fe fd5a 	bl	80069ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	; (8007f70 <prvCheckTasksWaitingTermination+0x54>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4a0b      	ldr	r2, [pc, #44]	; (8007f70 <prvCheckTasksWaitingTermination+0x54>)
 8007f42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f44:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <prvCheckTasksWaitingTermination+0x58>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	4a0a      	ldr	r2, [pc, #40]	; (8007f74 <prvCheckTasksWaitingTermination+0x58>)
 8007f4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f4e:	f000 fad1 	bl	80084f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f810 	bl	8007f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f58:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <prvCheckTasksWaitingTermination+0x58>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e1      	bne.n	8007f24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000424 	.word	0x20000424
 8007f70:	20000450 	.word	0x20000450
 8007f74:	20000438 	.word	0x20000438

08007f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	334c      	adds	r3, #76	; 0x4c
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fe3b 	bl	8008c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d108      	bne.n	8007fa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fc69 	bl	8008870 <vPortFree>
				vPortFree( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fc66 	bl	8008870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fa4:	e018      	b.n	8007fd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d103      	bne.n	8007fb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc5d 	bl	8008870 <vPortFree>
	}
 8007fb6:	e00f      	b.n	8007fd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d00a      	beq.n	8007fd8 <prvDeleteTCB+0x60>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60fb      	str	r3, [r7, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <prvDeleteTCB+0x5e>
	}
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <prvResetNextTaskUnblockTime+0x38>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d104      	bne.n	8007ffa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <prvResetNextTaskUnblockTime+0x3c>)
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ff8:	e008      	b.n	800800c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ffa:	4b07      	ldr	r3, [pc, #28]	; (8008018 <prvResetNextTaskUnblockTime+0x38>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4a04      	ldr	r2, [pc, #16]	; (800801c <prvResetNextTaskUnblockTime+0x3c>)
 800800a:	6013      	str	r3, [r2, #0]
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	20000408 	.word	0x20000408
 800801c:	20000470 	.word	0x20000470

08008020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <xTaskGetSchedulerState+0x34>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d102      	bne.n	8008034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800802e:	2301      	movs	r3, #1
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	e008      	b.n	8008046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008034:	4b08      	ldr	r3, [pc, #32]	; (8008058 <xTaskGetSchedulerState+0x38>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800803c:	2302      	movs	r3, #2
 800803e:	607b      	str	r3, [r7, #4]
 8008040:	e001      	b.n	8008046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008046:	687b      	ldr	r3, [r7, #4]
	}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	2000045c 	.word	0x2000045c
 8008058:	20000478 	.word	0x20000478

0800805c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d06e      	beq.n	8008150 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008072:	4b3a      	ldr	r3, [pc, #232]	; (800815c <xTaskPriorityDisinherit+0x100>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	429a      	cmp	r2, r3
 800807a:	d00a      	beq.n	8008092 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60fb      	str	r3, [r7, #12]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	60bb      	str	r3, [r7, #8]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d044      	beq.n	8008150 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d140      	bne.n	8008150 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fc8b 	bl	80069ee <uxListRemove>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d115      	bne.n	800810a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	491f      	ldr	r1, [pc, #124]	; (8008160 <xTaskPriorityDisinherit+0x104>)
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <xTaskPriorityDisinherit+0xae>
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	2201      	movs	r2, #1
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43da      	mvns	r2, r3
 8008100:	4b18      	ldr	r3, [pc, #96]	; (8008164 <xTaskPriorityDisinherit+0x108>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4013      	ands	r3, r2
 8008106:	4a17      	ldr	r2, [pc, #92]	; (8008164 <xTaskPriorityDisinherit+0x108>)
 8008108:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	f1c3 0207 	rsb	r2, r3, #7
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	2201      	movs	r2, #1
 8008124:	409a      	lsls	r2, r3
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <xTaskPriorityDisinherit+0x108>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4313      	orrs	r3, r2
 800812c:	4a0d      	ldr	r2, [pc, #52]	; (8008164 <xTaskPriorityDisinherit+0x108>)
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4a08      	ldr	r2, [pc, #32]	; (8008160 <xTaskPriorityDisinherit+0x104>)
 800813e:	441a      	add	r2, r3
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	3304      	adds	r3, #4
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f7fe fbf4 	bl	8006934 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008150:	697b      	ldr	r3, [r7, #20]
	}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000350 	.word	0x20000350
 8008160:	20000354 	.word	0x20000354
 8008164:	20000458 	.word	0x20000458

08008168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008172:	4b29      	ldr	r3, [pc, #164]	; (8008218 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008178:	4b28      	ldr	r3, [pc, #160]	; (800821c <prvAddCurrentTaskToDelayedList+0xb4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3304      	adds	r3, #4
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fc35 	bl	80069ee <uxListRemove>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800818a:	4b24      	ldr	r3, [pc, #144]	; (800821c <prvAddCurrentTaskToDelayedList+0xb4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	2201      	movs	r2, #1
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	43da      	mvns	r2, r3
 8008198:	4b21      	ldr	r3, [pc, #132]	; (8008220 <prvAddCurrentTaskToDelayedList+0xb8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4013      	ands	r3, r2
 800819e:	4a20      	ldr	r2, [pc, #128]	; (8008220 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a8:	d10a      	bne.n	80081c0 <prvAddCurrentTaskToDelayedList+0x58>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b0:	4b1a      	ldr	r3, [pc, #104]	; (800821c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	481a      	ldr	r0, [pc, #104]	; (8008224 <prvAddCurrentTaskToDelayedList+0xbc>)
 80081ba:	f7fe fbbb 	bl	8006934 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081be:	e026      	b.n	800820e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081c8:	4b14      	ldr	r3, [pc, #80]	; (800821c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d209      	bcs.n	80081ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <prvAddCurrentTaskToDelayedList+0xc0>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	4b0f      	ldr	r3, [pc, #60]	; (800821c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f7fe fbc9 	bl	800697c <vListInsert>
}
 80081ea:	e010      	b.n	800820e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ec:	4b0f      	ldr	r3, [pc, #60]	; (800822c <prvAddCurrentTaskToDelayedList+0xc4>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f7fe fbbf 	bl	800697c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081fe:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	429a      	cmp	r2, r3
 8008206:	d202      	bcs.n	800820e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008208:	4a09      	ldr	r2, [pc, #36]	; (8008230 <prvAddCurrentTaskToDelayedList+0xc8>)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6013      	str	r3, [r2, #0]
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000454 	.word	0x20000454
 800821c:	20000350 	.word	0x20000350
 8008220:	20000458 	.word	0x20000458
 8008224:	2000043c 	.word	0x2000043c
 8008228:	2000040c 	.word	0x2000040c
 800822c:	20000408 	.word	0x20000408
 8008230:	20000470 	.word	0x20000470

08008234 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3b04      	subs	r3, #4
 8008244:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800824c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3b04      	subs	r3, #4
 8008252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f023 0201 	bic.w	r2, r3, #1
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3b04      	subs	r3, #4
 8008262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008264:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <pxPortInitialiseStack+0x64>)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3b14      	subs	r3, #20
 800826e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3b04      	subs	r3, #4
 800827a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f06f 0202 	mvn.w	r2, #2
 8008282:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3b20      	subs	r3, #32
 8008288:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	0800829d 	.word	0x0800829d

0800829c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082a6:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <prvTaskExitError+0x54>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ae:	d00a      	beq.n	80082c6 <prvTaskExitError+0x2a>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60fb      	str	r3, [r7, #12]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <prvTaskExitError+0x28>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60bb      	str	r3, [r7, #8]
}
 80082d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082da:	bf00      	nop
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0fc      	beq.n	80082dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	2000000c 	.word	0x2000000c
	...

08008300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <pxCurrentTCBConst2>)
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	6808      	ldr	r0, [r1, #0]
 8008306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830a:	f380 8809 	msr	PSP, r0
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f04f 0000 	mov.w	r0, #0
 8008316:	f380 8811 	msr	BASEPRI, r0
 800831a:	4770      	bx	lr
 800831c:	f3af 8000 	nop.w

08008320 <pxCurrentTCBConst2>:
 8008320:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop

08008328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008328:	4808      	ldr	r0, [pc, #32]	; (800834c <prvPortStartFirstTask+0x24>)
 800832a:	6800      	ldr	r0, [r0, #0]
 800832c:	6800      	ldr	r0, [r0, #0]
 800832e:	f380 8808 	msr	MSP, r0
 8008332:	f04f 0000 	mov.w	r0, #0
 8008336:	f380 8814 	msr	CONTROL, r0
 800833a:	b662      	cpsie	i
 800833c:	b661      	cpsie	f
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	df00      	svc	0
 8008348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800834a:	bf00      	nop
 800834c:	e000ed08 	.word	0xe000ed08

08008350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008356:	4b46      	ldr	r3, [pc, #280]	; (8008470 <xPortStartScheduler+0x120>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a46      	ldr	r2, [pc, #280]	; (8008474 <xPortStartScheduler+0x124>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10a      	bne.n	8008376 <xPortStartScheduler+0x26>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	613b      	str	r3, [r7, #16]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008376:	4b3e      	ldr	r3, [pc, #248]	; (8008470 <xPortStartScheduler+0x120>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a3f      	ldr	r2, [pc, #252]	; (8008478 <xPortStartScheduler+0x128>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d10a      	bne.n	8008396 <xPortStartScheduler+0x46>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	60fb      	str	r3, [r7, #12]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008396:	4b39      	ldr	r3, [pc, #228]	; (800847c <xPortStartScheduler+0x12c>)
 8008398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	22ff      	movs	r2, #255	; 0xff
 80083a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	4b31      	ldr	r3, [pc, #196]	; (8008480 <xPortStartScheduler+0x130>)
 80083bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083be:	4b31      	ldr	r3, [pc, #196]	; (8008484 <xPortStartScheduler+0x134>)
 80083c0:	2207      	movs	r2, #7
 80083c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083c4:	e009      	b.n	80083da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80083c6:	4b2f      	ldr	r3, [pc, #188]	; (8008484 <xPortStartScheduler+0x134>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	4a2d      	ldr	r2, [pc, #180]	; (8008484 <xPortStartScheduler+0x134>)
 80083ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d0ef      	beq.n	80083c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083e6:	4b27      	ldr	r3, [pc, #156]	; (8008484 <xPortStartScheduler+0x134>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f1c3 0307 	rsb	r3, r3, #7
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d00a      	beq.n	8008408 <xPortStartScheduler+0xb8>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	60bb      	str	r3, [r7, #8]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008408:	4b1e      	ldr	r3, [pc, #120]	; (8008484 <xPortStartScheduler+0x134>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <xPortStartScheduler+0x134>)
 8008410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <xPortStartScheduler+0x134>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800841a:	4a1a      	ldr	r2, [pc, #104]	; (8008484 <xPortStartScheduler+0x134>)
 800841c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	b2da      	uxtb	r2, r3
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008426:	4b18      	ldr	r3, [pc, #96]	; (8008488 <xPortStartScheduler+0x138>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a17      	ldr	r2, [pc, #92]	; (8008488 <xPortStartScheduler+0x138>)
 800842c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <xPortStartScheduler+0x138>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a14      	ldr	r2, [pc, #80]	; (8008488 <xPortStartScheduler+0x138>)
 8008438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800843c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800843e:	f000 f8dd 	bl	80085fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008442:	4b12      	ldr	r3, [pc, #72]	; (800848c <xPortStartScheduler+0x13c>)
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008448:	f000 f8fc 	bl	8008644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800844c:	4b10      	ldr	r3, [pc, #64]	; (8008490 <xPortStartScheduler+0x140>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a0f      	ldr	r2, [pc, #60]	; (8008490 <xPortStartScheduler+0x140>)
 8008452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008458:	f7ff ff66 	bl	8008328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800845c:	f7ff fb9a 	bl	8007b94 <vTaskSwitchContext>
	prvTaskExitError();
 8008460:	f7ff ff1c 	bl	800829c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	e000ed00 	.word	0xe000ed00
 8008474:	410fc271 	.word	0x410fc271
 8008478:	410fc270 	.word	0x410fc270
 800847c:	e000e400 	.word	0xe000e400
 8008480:	2000047c 	.word	0x2000047c
 8008484:	20000480 	.word	0x20000480
 8008488:	e000ed20 	.word	0xe000ed20
 800848c:	2000000c 	.word	0x2000000c
 8008490:	e000ef34 	.word	0xe000ef34

08008494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	607b      	str	r3, [r7, #4]
}
 80084ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <vPortEnterCritical+0x58>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	4a0d      	ldr	r2, [pc, #52]	; (80084ec <vPortEnterCritical+0x58>)
 80084b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084b8:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <vPortEnterCritical+0x58>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d10f      	bne.n	80084e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <vPortEnterCritical+0x5c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	603b      	str	r3, [r7, #0]
}
 80084dc:	bf00      	nop
 80084de:	e7fe      	b.n	80084de <vPortEnterCritical+0x4a>
	}
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	2000000c 	.word	0x2000000c
 80084f0:	e000ed04 	.word	0xe000ed04

080084f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084fa:	4b12      	ldr	r3, [pc, #72]	; (8008544 <vPortExitCritical+0x50>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10a      	bne.n	8008518 <vPortExitCritical+0x24>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	607b      	str	r3, [r7, #4]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <vPortExitCritical+0x50>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3b01      	subs	r3, #1
 800851e:	4a09      	ldr	r2, [pc, #36]	; (8008544 <vPortExitCritical+0x50>)
 8008520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008522:	4b08      	ldr	r3, [pc, #32]	; (8008544 <vPortExitCritical+0x50>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <vPortExitCritical+0x42>
 800852a:	2300      	movs	r3, #0
 800852c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	f383 8811 	msr	BASEPRI, r3
}
 8008534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	2000000c 	.word	0x2000000c
	...

08008550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008550:	f3ef 8009 	mrs	r0, PSP
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <pxCurrentTCBConst>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	f01e 0f10 	tst.w	lr, #16
 8008560:	bf08      	it	eq
 8008562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	6010      	str	r0, [r2, #0]
 800856c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008574:	f380 8811 	msr	BASEPRI, r0
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f7ff fb08 	bl	8007b94 <vTaskSwitchContext>
 8008584:	f04f 0000 	mov.w	r0, #0
 8008588:	f380 8811 	msr	BASEPRI, r0
 800858c:	bc09      	pop	{r0, r3}
 800858e:	6819      	ldr	r1, [r3, #0]
 8008590:	6808      	ldr	r0, [r1, #0]
 8008592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008596:	f01e 0f10 	tst.w	lr, #16
 800859a:	bf08      	it	eq
 800859c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085a0:	f380 8809 	msr	PSP, r0
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	f3af 8000 	nop.w

080085b0 <pxCurrentTCBConst>:
 80085b0:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop

080085b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	607b      	str	r3, [r7, #4]
}
 80085d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085d2:	f7ff fa27 	bl	8007a24 <xTaskIncrementTick>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <SysTick_Handler+0x40>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	2300      	movs	r3, #0
 80085e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	f383 8811 	msr	BASEPRI, r3
}
 80085ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085f0:	bf00      	nop
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <vPortSetupTimerInterrupt+0x34>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008606:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <vPortSetupTimerInterrupt+0x38>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800860c:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <vPortSetupTimerInterrupt+0x3c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a0a      	ldr	r2, [pc, #40]	; (800863c <vPortSetupTimerInterrupt+0x40>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	099b      	lsrs	r3, r3, #6
 8008618:	4a09      	ldr	r2, [pc, #36]	; (8008640 <vPortSetupTimerInterrupt+0x44>)
 800861a:	3b01      	subs	r3, #1
 800861c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800861e:	4b04      	ldr	r3, [pc, #16]	; (8008630 <vPortSetupTimerInterrupt+0x34>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
}
 8008624:	bf00      	nop
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	e000e010 	.word	0xe000e010
 8008634:	e000e018 	.word	0xe000e018
 8008638:	20000000 	.word	0x20000000
 800863c:	10624dd3 	.word	0x10624dd3
 8008640:	e000e014 	.word	0xe000e014

08008644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008654 <vPortEnableVFP+0x10>
 8008648:	6801      	ldr	r1, [r0, #0]
 800864a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800864e:	6001      	str	r1, [r0, #0]
 8008650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008652:	bf00      	nop
 8008654:	e000ed88 	.word	0xe000ed88

08008658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800865e:	f3ef 8305 	mrs	r3, IPSR
 8008662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b0f      	cmp	r3, #15
 8008668:	d914      	bls.n	8008694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <vPortValidateInterruptPriority+0x70>)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4413      	add	r3, r2
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008674:	4b15      	ldr	r3, [pc, #84]	; (80086cc <vPortValidateInterruptPriority+0x74>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	7afa      	ldrb	r2, [r7, #11]
 800867a:	429a      	cmp	r2, r3
 800867c:	d20a      	bcs.n	8008694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	607b      	str	r3, [r7, #4]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008694:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <vPortValidateInterruptPriority+0x78>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800869c:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <vPortValidateInterruptPriority+0x7c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d90a      	bls.n	80086ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	603b      	str	r3, [r7, #0]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <vPortValidateInterruptPriority+0x60>
	}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	e000e3f0 	.word	0xe000e3f0
 80086cc:	2000047c 	.word	0x2000047c
 80086d0:	e000ed0c 	.word	0xe000ed0c
 80086d4:	20000480 	.word	0x20000480

080086d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086e4:	f7ff f8f4 	bl	80078d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086e8:	4b5b      	ldr	r3, [pc, #364]	; (8008858 <pvPortMalloc+0x180>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086f0:	f000 f920 	bl	8008934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086f4:	4b59      	ldr	r3, [pc, #356]	; (800885c <pvPortMalloc+0x184>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f040 8093 	bne.w	8008828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01d      	beq.n	8008744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008708:	2208      	movs	r2, #8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d014      	beq.n	8008744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f023 0307 	bic.w	r3, r3, #7
 8008720:	3308      	adds	r3, #8
 8008722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <pvPortMalloc+0x6c>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	617b      	str	r3, [r7, #20]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d06e      	beq.n	8008828 <pvPortMalloc+0x150>
 800874a:	4b45      	ldr	r3, [pc, #276]	; (8008860 <pvPortMalloc+0x188>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d869      	bhi.n	8008828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008754:	4b43      	ldr	r3, [pc, #268]	; (8008864 <pvPortMalloc+0x18c>)
 8008756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008758:	4b42      	ldr	r3, [pc, #264]	; (8008864 <pvPortMalloc+0x18c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800875e:	e004      	b.n	800876a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d903      	bls.n	800877c <pvPortMalloc+0xa4>
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1f1      	bne.n	8008760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800877c:	4b36      	ldr	r3, [pc, #216]	; (8008858 <pvPortMalloc+0x180>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008782:	429a      	cmp	r2, r3
 8008784:	d050      	beq.n	8008828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2208      	movs	r2, #8
 800878c:	4413      	add	r3, r2
 800878e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	2308      	movs	r3, #8
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d91f      	bls.n	80087e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <pvPortMalloc+0xf8>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	613b      	str	r3, [r7, #16]
}
 80087cc:	bf00      	nop
 80087ce:	e7fe      	b.n	80087ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	1ad2      	subs	r2, r2, r3
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087e2:	69b8      	ldr	r0, [r7, #24]
 80087e4:	f000 f908 	bl	80089f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087e8:	4b1d      	ldr	r3, [pc, #116]	; (8008860 <pvPortMalloc+0x188>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	4a1b      	ldr	r2, [pc, #108]	; (8008860 <pvPortMalloc+0x188>)
 80087f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087f6:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <pvPortMalloc+0x188>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <pvPortMalloc+0x190>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d203      	bcs.n	800880a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008802:	4b17      	ldr	r3, [pc, #92]	; (8008860 <pvPortMalloc+0x188>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a18      	ldr	r2, [pc, #96]	; (8008868 <pvPortMalloc+0x190>)
 8008808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	4b13      	ldr	r3, [pc, #76]	; (800885c <pvPortMalloc+0x184>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	431a      	orrs	r2, r3
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <pvPortMalloc+0x194>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3301      	adds	r3, #1
 8008824:	4a11      	ldr	r2, [pc, #68]	; (800886c <pvPortMalloc+0x194>)
 8008826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008828:	f7ff f860 	bl	80078ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <pvPortMalloc+0x174>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
}
 8008848:	bf00      	nop
 800884a:	e7fe      	b.n	800884a <pvPortMalloc+0x172>
	return pvReturn;
 800884c:	69fb      	ldr	r3, [r7, #28]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3728      	adds	r7, #40	; 0x28
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20001044 	.word	0x20001044
 800885c:	20001058 	.word	0x20001058
 8008860:	20001048 	.word	0x20001048
 8008864:	2000103c 	.word	0x2000103c
 8008868:	2000104c 	.word	0x2000104c
 800886c:	20001050 	.word	0x20001050

08008870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d04d      	beq.n	800891e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008882:	2308      	movs	r3, #8
 8008884:	425b      	negs	r3, r3
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4413      	add	r3, r2
 800888a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	4b24      	ldr	r3, [pc, #144]	; (8008928 <vPortFree+0xb8>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4013      	ands	r3, r2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <vPortFree+0x44>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	60fb      	str	r3, [r7, #12]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <vPortFree+0x62>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	60bb      	str	r3, [r7, #8]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	4b14      	ldr	r3, [pc, #80]	; (8008928 <vPortFree+0xb8>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01e      	beq.n	800891e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d11a      	bne.n	800891e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <vPortFree+0xb8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	43db      	mvns	r3, r3
 80088f2:	401a      	ands	r2, r3
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088f8:	f7fe ffea 	bl	80078d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <vPortFree+0xbc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4413      	add	r3, r2
 8008906:	4a09      	ldr	r2, [pc, #36]	; (800892c <vPortFree+0xbc>)
 8008908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800890a:	6938      	ldr	r0, [r7, #16]
 800890c:	f000 f874 	bl	80089f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008910:	4b07      	ldr	r3, [pc, #28]	; (8008930 <vPortFree+0xc0>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a06      	ldr	r2, [pc, #24]	; (8008930 <vPortFree+0xc0>)
 8008918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800891a:	f7fe ffe7 	bl	80078ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800891e:	bf00      	nop
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20001058 	.word	0x20001058
 800892c:	20001048 	.word	0x20001048
 8008930:	20001054 	.word	0x20001054

08008934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800893a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800893e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008940:	4b27      	ldr	r3, [pc, #156]	; (80089e0 <prvHeapInit+0xac>)
 8008942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00c      	beq.n	8008968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3307      	adds	r3, #7
 8008952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0307 	bic.w	r3, r3, #7
 800895a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <prvHeapInit+0xac>)
 8008964:	4413      	add	r3, r2
 8008966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <prvHeapInit+0xb0>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008972:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <prvHeapInit+0xb0>)
 8008974:	2200      	movs	r2, #0
 8008976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008980:	2208      	movs	r2, #8
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	1a9b      	subs	r3, r3, r2
 8008986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <prvHeapInit+0xb4>)
 8008994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <prvHeapInit+0xb4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2200      	movs	r2, #0
 800899c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800899e:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <prvHeapInit+0xb4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089b4:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <prvHeapInit+0xb4>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <prvHeapInit+0xb8>)
 80089c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	4a09      	ldr	r2, [pc, #36]	; (80089f0 <prvHeapInit+0xbc>)
 80089ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089cc:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <prvHeapInit+0xc0>)
 80089ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089d2:	601a      	str	r2, [r3, #0]
}
 80089d4:	bf00      	nop
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	20000484 	.word	0x20000484
 80089e4:	2000103c 	.word	0x2000103c
 80089e8:	20001044 	.word	0x20001044
 80089ec:	2000104c 	.word	0x2000104c
 80089f0:	20001048 	.word	0x20001048
 80089f4:	20001058 	.word	0x20001058

080089f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a00:	4b28      	ldr	r3, [pc, #160]	; (8008aa4 <prvInsertBlockIntoFreeList+0xac>)
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e002      	b.n	8008a0c <prvInsertBlockIntoFreeList+0x14>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d8f7      	bhi.n	8008a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	4413      	add	r3, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d108      	bne.n	8008a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	441a      	add	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	441a      	add	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d118      	bne.n	8008a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d00d      	beq.n	8008a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	441a      	add	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	e008      	b.n	8008a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a76:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e003      	b.n	8008a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d002      	beq.n	8008a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a96:	bf00      	nop
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	2000103c 	.word	0x2000103c
 8008aa8:	20001044 	.word	0x20001044

08008aac <__errno>:
 8008aac:	4b01      	ldr	r3, [pc, #4]	; (8008ab4 <__errno+0x8>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20000010 	.word	0x20000010

08008ab8 <__libc_init_array>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	4d0d      	ldr	r5, [pc, #52]	; (8008af0 <__libc_init_array+0x38>)
 8008abc:	4c0d      	ldr	r4, [pc, #52]	; (8008af4 <__libc_init_array+0x3c>)
 8008abe:	1b64      	subs	r4, r4, r5
 8008ac0:	10a4      	asrs	r4, r4, #2
 8008ac2:	2600      	movs	r6, #0
 8008ac4:	42a6      	cmp	r6, r4
 8008ac6:	d109      	bne.n	8008adc <__libc_init_array+0x24>
 8008ac8:	4d0b      	ldr	r5, [pc, #44]	; (8008af8 <__libc_init_array+0x40>)
 8008aca:	4c0c      	ldr	r4, [pc, #48]	; (8008afc <__libc_init_array+0x44>)
 8008acc:	f000 fcb8 	bl	8009440 <_init>
 8008ad0:	1b64      	subs	r4, r4, r5
 8008ad2:	10a4      	asrs	r4, r4, #2
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	42a6      	cmp	r6, r4
 8008ad8:	d105      	bne.n	8008ae6 <__libc_init_array+0x2e>
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae0:	4798      	blx	r3
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	e7ee      	b.n	8008ac4 <__libc_init_array+0xc>
 8008ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aea:	4798      	blx	r3
 8008aec:	3601      	adds	r6, #1
 8008aee:	e7f2      	b.n	8008ad6 <__libc_init_array+0x1e>
 8008af0:	08009570 	.word	0x08009570
 8008af4:	08009570 	.word	0x08009570
 8008af8:	08009570 	.word	0x08009570
 8008afc:	08009574 	.word	0x08009574

08008b00 <__retarget_lock_acquire_recursive>:
 8008b00:	4770      	bx	lr

08008b02 <__retarget_lock_release_recursive>:
 8008b02:	4770      	bx	lr

08008b04 <memcpy>:
 8008b04:	440a      	add	r2, r1
 8008b06:	4291      	cmp	r1, r2
 8008b08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b0c:	d100      	bne.n	8008b10 <memcpy+0xc>
 8008b0e:	4770      	bx	lr
 8008b10:	b510      	push	{r4, lr}
 8008b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	d1f9      	bne.n	8008b12 <memcpy+0xe>
 8008b1e:	bd10      	pop	{r4, pc}

08008b20 <memset>:
 8008b20:	4402      	add	r2, r0
 8008b22:	4603      	mov	r3, r0
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d100      	bne.n	8008b2a <memset+0xa>
 8008b28:	4770      	bx	lr
 8008b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2e:	e7f9      	b.n	8008b24 <memset+0x4>

08008b30 <_malloc_r>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	1ccd      	adds	r5, r1, #3
 8008b34:	f025 0503 	bic.w	r5, r5, #3
 8008b38:	3508      	adds	r5, #8
 8008b3a:	2d0c      	cmp	r5, #12
 8008b3c:	bf38      	it	cc
 8008b3e:	250c      	movcc	r5, #12
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	4606      	mov	r6, r0
 8008b44:	db01      	blt.n	8008b4a <_malloc_r+0x1a>
 8008b46:	42a9      	cmp	r1, r5
 8008b48:	d903      	bls.n	8008b52 <_malloc_r+0x22>
 8008b4a:	230c      	movs	r3, #12
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	2000      	movs	r0, #0
 8008b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b52:	f000 f8e1 	bl	8008d18 <__malloc_lock>
 8008b56:	4921      	ldr	r1, [pc, #132]	; (8008bdc <_malloc_r+0xac>)
 8008b58:	680a      	ldr	r2, [r1, #0]
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	b99c      	cbnz	r4, 8008b86 <_malloc_r+0x56>
 8008b5e:	4f20      	ldr	r7, [pc, #128]	; (8008be0 <_malloc_r+0xb0>)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	b923      	cbnz	r3, 8008b6e <_malloc_r+0x3e>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4630      	mov	r0, r6
 8008b68:	f000 f8a6 	bl	8008cb8 <_sbrk_r>
 8008b6c:	6038      	str	r0, [r7, #0]
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 f8a1 	bl	8008cb8 <_sbrk_r>
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	d123      	bne.n	8008bc2 <_malloc_r+0x92>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f8d0 	bl	8008d24 <__malloc_unlock>
 8008b84:	e7e3      	b.n	8008b4e <_malloc_r+0x1e>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	1b5b      	subs	r3, r3, r5
 8008b8a:	d417      	bmi.n	8008bbc <_malloc_r+0x8c>
 8008b8c:	2b0b      	cmp	r3, #11
 8008b8e:	d903      	bls.n	8008b98 <_malloc_r+0x68>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	441c      	add	r4, r3
 8008b94:	6025      	str	r5, [r4, #0]
 8008b96:	e004      	b.n	8008ba2 <_malloc_r+0x72>
 8008b98:	6863      	ldr	r3, [r4, #4]
 8008b9a:	42a2      	cmp	r2, r4
 8008b9c:	bf0c      	ite	eq
 8008b9e:	600b      	streq	r3, [r1, #0]
 8008ba0:	6053      	strne	r3, [r2, #4]
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f000 f8be 	bl	8008d24 <__malloc_unlock>
 8008ba8:	f104 000b 	add.w	r0, r4, #11
 8008bac:	1d23      	adds	r3, r4, #4
 8008bae:	f020 0007 	bic.w	r0, r0, #7
 8008bb2:	1ac2      	subs	r2, r0, r3
 8008bb4:	d0cc      	beq.n	8008b50 <_malloc_r+0x20>
 8008bb6:	1a1b      	subs	r3, r3, r0
 8008bb8:	50a3      	str	r3, [r4, r2]
 8008bba:	e7c9      	b.n	8008b50 <_malloc_r+0x20>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	6864      	ldr	r4, [r4, #4]
 8008bc0:	e7cc      	b.n	8008b5c <_malloc_r+0x2c>
 8008bc2:	1cc4      	adds	r4, r0, #3
 8008bc4:	f024 0403 	bic.w	r4, r4, #3
 8008bc8:	42a0      	cmp	r0, r4
 8008bca:	d0e3      	beq.n	8008b94 <_malloc_r+0x64>
 8008bcc:	1a21      	subs	r1, r4, r0
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f872 	bl	8008cb8 <_sbrk_r>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d1dd      	bne.n	8008b94 <_malloc_r+0x64>
 8008bd8:	e7cf      	b.n	8008b7a <_malloc_r+0x4a>
 8008bda:	bf00      	nop
 8008bdc:	2000105c 	.word	0x2000105c
 8008be0:	20001060 	.word	0x20001060

08008be4 <cleanup_glue>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	460c      	mov	r4, r1
 8008be8:	6809      	ldr	r1, [r1, #0]
 8008bea:	4605      	mov	r5, r0
 8008bec:	b109      	cbz	r1, 8008bf2 <cleanup_glue+0xe>
 8008bee:	f7ff fff9 	bl	8008be4 <cleanup_glue>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bfa:	f000 b899 	b.w	8008d30 <_free_r>
	...

08008c00 <_reclaim_reent>:
 8008c00:	4b2c      	ldr	r3, [pc, #176]	; (8008cb4 <_reclaim_reent+0xb4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4283      	cmp	r3, r0
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	4604      	mov	r4, r0
 8008c0a:	d051      	beq.n	8008cb0 <_reclaim_reent+0xb0>
 8008c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c0e:	b143      	cbz	r3, 8008c22 <_reclaim_reent+0x22>
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d14a      	bne.n	8008cac <_reclaim_reent+0xac>
 8008c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	b111      	cbz	r1, 8008c22 <_reclaim_reent+0x22>
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 f887 	bl	8008d30 <_free_r>
 8008c22:	6961      	ldr	r1, [r4, #20]
 8008c24:	b111      	cbz	r1, 8008c2c <_reclaim_reent+0x2c>
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 f882 	bl	8008d30 <_free_r>
 8008c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c2e:	b111      	cbz	r1, 8008c36 <_reclaim_reent+0x36>
 8008c30:	4620      	mov	r0, r4
 8008c32:	f000 f87d 	bl	8008d30 <_free_r>
 8008c36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c38:	b111      	cbz	r1, 8008c40 <_reclaim_reent+0x40>
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 f878 	bl	8008d30 <_free_r>
 8008c40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008c42:	b111      	cbz	r1, 8008c4a <_reclaim_reent+0x4a>
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 f873 	bl	8008d30 <_free_r>
 8008c4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008c4c:	b111      	cbz	r1, 8008c54 <_reclaim_reent+0x54>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 f86e 	bl	8008d30 <_free_r>
 8008c54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008c56:	b111      	cbz	r1, 8008c5e <_reclaim_reent+0x5e>
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 f869 	bl	8008d30 <_free_r>
 8008c5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008c60:	b111      	cbz	r1, 8008c68 <_reclaim_reent+0x68>
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 f864 	bl	8008d30 <_free_r>
 8008c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c6a:	b111      	cbz	r1, 8008c72 <_reclaim_reent+0x72>
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 f85f 	bl	8008d30 <_free_r>
 8008c72:	69a3      	ldr	r3, [r4, #24]
 8008c74:	b1e3      	cbz	r3, 8008cb0 <_reclaim_reent+0xb0>
 8008c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c78:	4620      	mov	r0, r4
 8008c7a:	4798      	blx	r3
 8008c7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c7e:	b1b9      	cbz	r1, 8008cb0 <_reclaim_reent+0xb0>
 8008c80:	4620      	mov	r0, r4
 8008c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c86:	f7ff bfad 	b.w	8008be4 <cleanup_glue>
 8008c8a:	5949      	ldr	r1, [r1, r5]
 8008c8c:	b941      	cbnz	r1, 8008ca0 <_reclaim_reent+0xa0>
 8008c8e:	3504      	adds	r5, #4
 8008c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c92:	2d80      	cmp	r5, #128	; 0x80
 8008c94:	68d9      	ldr	r1, [r3, #12]
 8008c96:	d1f8      	bne.n	8008c8a <_reclaim_reent+0x8a>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 f849 	bl	8008d30 <_free_r>
 8008c9e:	e7ba      	b.n	8008c16 <_reclaim_reent+0x16>
 8008ca0:	680e      	ldr	r6, [r1, #0]
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 f844 	bl	8008d30 <_free_r>
 8008ca8:	4631      	mov	r1, r6
 8008caa:	e7ef      	b.n	8008c8c <_reclaim_reent+0x8c>
 8008cac:	2500      	movs	r5, #0
 8008cae:	e7ef      	b.n	8008c90 <_reclaim_reent+0x90>
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000010 	.word	0x20000010

08008cb8 <_sbrk_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	; (8008cd4 <_sbrk_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f8 fb5e 	bl	8001384 <_sbrk>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_sbrk_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_sbrk_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	200011d0 	.word	0x200011d0

08008cd8 <siprintf>:
 8008cd8:	b40e      	push	{r1, r2, r3}
 8008cda:	b500      	push	{lr}
 8008cdc:	b09c      	sub	sp, #112	; 0x70
 8008cde:	ab1d      	add	r3, sp, #116	; 0x74
 8008ce0:	9002      	str	r0, [sp, #8]
 8008ce2:	9006      	str	r0, [sp, #24]
 8008ce4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ce8:	4809      	ldr	r0, [pc, #36]	; (8008d10 <siprintf+0x38>)
 8008cea:	9107      	str	r1, [sp, #28]
 8008cec:	9104      	str	r1, [sp, #16]
 8008cee:	4909      	ldr	r1, [pc, #36]	; (8008d14 <siprintf+0x3c>)
 8008cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf4:	9105      	str	r1, [sp, #20]
 8008cf6:	6800      	ldr	r0, [r0, #0]
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	a902      	add	r1, sp, #8
 8008cfc:	f000 f8c4 	bl	8008e88 <_svfiprintf_r>
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	2200      	movs	r2, #0
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	b01c      	add	sp, #112	; 0x70
 8008d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d0c:	b003      	add	sp, #12
 8008d0e:	4770      	bx	lr
 8008d10:	20000010 	.word	0x20000010
 8008d14:	ffff0208 	.word	0xffff0208

08008d18 <__malloc_lock>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__malloc_lock+0x8>)
 8008d1a:	f7ff bef1 	b.w	8008b00 <__retarget_lock_acquire_recursive>
 8008d1e:	bf00      	nop
 8008d20:	200011c8 	.word	0x200011c8

08008d24 <__malloc_unlock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__malloc_unlock+0x8>)
 8008d26:	f7ff beec 	b.w	8008b02 <__retarget_lock_release_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	200011c8 	.word	0x200011c8

08008d30 <_free_r>:
 8008d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d32:	2900      	cmp	r1, #0
 8008d34:	d048      	beq.n	8008dc8 <_free_r+0x98>
 8008d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3a:	9001      	str	r0, [sp, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d42:	bfb8      	it	lt
 8008d44:	18e4      	addlt	r4, r4, r3
 8008d46:	f7ff ffe7 	bl	8008d18 <__malloc_lock>
 8008d4a:	4a20      	ldr	r2, [pc, #128]	; (8008dcc <_free_r+0x9c>)
 8008d4c:	9801      	ldr	r0, [sp, #4]
 8008d4e:	6813      	ldr	r3, [r2, #0]
 8008d50:	4615      	mov	r5, r2
 8008d52:	b933      	cbnz	r3, 8008d62 <_free_r+0x32>
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	6014      	str	r4, [r2, #0]
 8008d58:	b003      	add	sp, #12
 8008d5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d5e:	f7ff bfe1 	b.w	8008d24 <__malloc_unlock>
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	d90b      	bls.n	8008d7e <_free_r+0x4e>
 8008d66:	6821      	ldr	r1, [r4, #0]
 8008d68:	1862      	adds	r2, r4, r1
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	bf04      	itt	eq
 8008d6e:	681a      	ldreq	r2, [r3, #0]
 8008d70:	685b      	ldreq	r3, [r3, #4]
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	bf04      	itt	eq
 8008d76:	1852      	addeq	r2, r2, r1
 8008d78:	6022      	streq	r2, [r4, #0]
 8008d7a:	602c      	str	r4, [r5, #0]
 8008d7c:	e7ec      	b.n	8008d58 <_free_r+0x28>
 8008d7e:	461a      	mov	r2, r3
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	b10b      	cbz	r3, 8008d88 <_free_r+0x58>
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	d9fa      	bls.n	8008d7e <_free_r+0x4e>
 8008d88:	6811      	ldr	r1, [r2, #0]
 8008d8a:	1855      	adds	r5, r2, r1
 8008d8c:	42a5      	cmp	r5, r4
 8008d8e:	d10b      	bne.n	8008da8 <_free_r+0x78>
 8008d90:	6824      	ldr	r4, [r4, #0]
 8008d92:	4421      	add	r1, r4
 8008d94:	1854      	adds	r4, r2, r1
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	6011      	str	r1, [r2, #0]
 8008d9a:	d1dd      	bne.n	8008d58 <_free_r+0x28>
 8008d9c:	681c      	ldr	r4, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	6053      	str	r3, [r2, #4]
 8008da2:	4421      	add	r1, r4
 8008da4:	6011      	str	r1, [r2, #0]
 8008da6:	e7d7      	b.n	8008d58 <_free_r+0x28>
 8008da8:	d902      	bls.n	8008db0 <_free_r+0x80>
 8008daa:	230c      	movs	r3, #12
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	e7d3      	b.n	8008d58 <_free_r+0x28>
 8008db0:	6825      	ldr	r5, [r4, #0]
 8008db2:	1961      	adds	r1, r4, r5
 8008db4:	428b      	cmp	r3, r1
 8008db6:	bf04      	itt	eq
 8008db8:	6819      	ldreq	r1, [r3, #0]
 8008dba:	685b      	ldreq	r3, [r3, #4]
 8008dbc:	6063      	str	r3, [r4, #4]
 8008dbe:	bf04      	itt	eq
 8008dc0:	1949      	addeq	r1, r1, r5
 8008dc2:	6021      	streq	r1, [r4, #0]
 8008dc4:	6054      	str	r4, [r2, #4]
 8008dc6:	e7c7      	b.n	8008d58 <_free_r+0x28>
 8008dc8:	b003      	add	sp, #12
 8008dca:	bd30      	pop	{r4, r5, pc}
 8008dcc:	2000105c 	.word	0x2000105c

08008dd0 <__ssputs_r>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	688e      	ldr	r6, [r1, #8]
 8008dd6:	429e      	cmp	r6, r3
 8008dd8:	4682      	mov	sl, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	4690      	mov	r8, r2
 8008dde:	461f      	mov	r7, r3
 8008de0:	d838      	bhi.n	8008e54 <__ssputs_r+0x84>
 8008de2:	898a      	ldrh	r2, [r1, #12]
 8008de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008de8:	d032      	beq.n	8008e50 <__ssputs_r+0x80>
 8008dea:	6825      	ldr	r5, [r4, #0]
 8008dec:	6909      	ldr	r1, [r1, #16]
 8008dee:	eba5 0901 	sub.w	r9, r5, r1
 8008df2:	6965      	ldr	r5, [r4, #20]
 8008df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	444b      	add	r3, r9
 8008e00:	106d      	asrs	r5, r5, #1
 8008e02:	429d      	cmp	r5, r3
 8008e04:	bf38      	it	cc
 8008e06:	461d      	movcc	r5, r3
 8008e08:	0553      	lsls	r3, r2, #21
 8008e0a:	d531      	bpl.n	8008e70 <__ssputs_r+0xa0>
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7ff fe8f 	bl	8008b30 <_malloc_r>
 8008e12:	4606      	mov	r6, r0
 8008e14:	b950      	cbnz	r0, 8008e2c <__ssputs_r+0x5c>
 8008e16:	230c      	movs	r3, #12
 8008e18:	f8ca 3000 	str.w	r3, [sl]
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	6921      	ldr	r1, [r4, #16]
 8008e2e:	464a      	mov	r2, r9
 8008e30:	f7ff fe68 	bl	8008b04 <memcpy>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	6126      	str	r6, [r4, #16]
 8008e42:	6165      	str	r5, [r4, #20]
 8008e44:	444e      	add	r6, r9
 8008e46:	eba5 0509 	sub.w	r5, r5, r9
 8008e4a:	6026      	str	r6, [r4, #0]
 8008e4c:	60a5      	str	r5, [r4, #8]
 8008e4e:	463e      	mov	r6, r7
 8008e50:	42be      	cmp	r6, r7
 8008e52:	d900      	bls.n	8008e56 <__ssputs_r+0x86>
 8008e54:	463e      	mov	r6, r7
 8008e56:	4632      	mov	r2, r6
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	f000 faa8 	bl	80093b0 <memmove>
 8008e60:	68a3      	ldr	r3, [r4, #8]
 8008e62:	6822      	ldr	r2, [r4, #0]
 8008e64:	1b9b      	subs	r3, r3, r6
 8008e66:	4432      	add	r2, r6
 8008e68:	60a3      	str	r3, [r4, #8]
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	e7db      	b.n	8008e28 <__ssputs_r+0x58>
 8008e70:	462a      	mov	r2, r5
 8008e72:	f000 fab7 	bl	80093e4 <_realloc_r>
 8008e76:	4606      	mov	r6, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1e1      	bne.n	8008e40 <__ssputs_r+0x70>
 8008e7c:	6921      	ldr	r1, [r4, #16]
 8008e7e:	4650      	mov	r0, sl
 8008e80:	f7ff ff56 	bl	8008d30 <_free_r>
 8008e84:	e7c7      	b.n	8008e16 <__ssputs_r+0x46>
	...

08008e88 <_svfiprintf_r>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4698      	mov	r8, r3
 8008e8e:	898b      	ldrh	r3, [r1, #12]
 8008e90:	061b      	lsls	r3, r3, #24
 8008e92:	b09d      	sub	sp, #116	; 0x74
 8008e94:	4607      	mov	r7, r0
 8008e96:	460d      	mov	r5, r1
 8008e98:	4614      	mov	r4, r2
 8008e9a:	d50e      	bpl.n	8008eba <_svfiprintf_r+0x32>
 8008e9c:	690b      	ldr	r3, [r1, #16]
 8008e9e:	b963      	cbnz	r3, 8008eba <_svfiprintf_r+0x32>
 8008ea0:	2140      	movs	r1, #64	; 0x40
 8008ea2:	f7ff fe45 	bl	8008b30 <_malloc_r>
 8008ea6:	6028      	str	r0, [r5, #0]
 8008ea8:	6128      	str	r0, [r5, #16]
 8008eaa:	b920      	cbnz	r0, 8008eb6 <_svfiprintf_r+0x2e>
 8008eac:	230c      	movs	r3, #12
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb4:	e0d1      	b.n	800905a <_svfiprintf_r+0x1d2>
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	616b      	str	r3, [r5, #20]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebe:	2320      	movs	r3, #32
 8008ec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ec8:	2330      	movs	r3, #48	; 0x30
 8008eca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009074 <_svfiprintf_r+0x1ec>
 8008ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ed2:	f04f 0901 	mov.w	r9, #1
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	469a      	mov	sl, r3
 8008eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ede:	b10a      	cbz	r2, 8008ee4 <_svfiprintf_r+0x5c>
 8008ee0:	2a25      	cmp	r2, #37	; 0x25
 8008ee2:	d1f9      	bne.n	8008ed8 <_svfiprintf_r+0x50>
 8008ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ee8:	d00b      	beq.n	8008f02 <_svfiprintf_r+0x7a>
 8008eea:	465b      	mov	r3, fp
 8008eec:	4622      	mov	r2, r4
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff ff6d 	bl	8008dd0 <__ssputs_r>
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f000 80aa 	beq.w	8009050 <_svfiprintf_r+0x1c8>
 8008efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efe:	445a      	add	r2, fp
 8008f00:	9209      	str	r2, [sp, #36]	; 0x24
 8008f02:	f89a 3000 	ldrb.w	r3, [sl]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 80a2 	beq.w	8009050 <_svfiprintf_r+0x1c8>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f16:	f10a 0a01 	add.w	sl, sl, #1
 8008f1a:	9304      	str	r3, [sp, #16]
 8008f1c:	9307      	str	r3, [sp, #28]
 8008f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f22:	931a      	str	r3, [sp, #104]	; 0x68
 8008f24:	4654      	mov	r4, sl
 8008f26:	2205      	movs	r2, #5
 8008f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2c:	4851      	ldr	r0, [pc, #324]	; (8009074 <_svfiprintf_r+0x1ec>)
 8008f2e:	f7f7 f94f 	bl	80001d0 <memchr>
 8008f32:	9a04      	ldr	r2, [sp, #16]
 8008f34:	b9d8      	cbnz	r0, 8008f6e <_svfiprintf_r+0xe6>
 8008f36:	06d0      	lsls	r0, r2, #27
 8008f38:	bf44      	itt	mi
 8008f3a:	2320      	movmi	r3, #32
 8008f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f40:	0711      	lsls	r1, r2, #28
 8008f42:	bf44      	itt	mi
 8008f44:	232b      	movmi	r3, #43	; 0x2b
 8008f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d015      	beq.n	8008f7e <_svfiprintf_r+0xf6>
 8008f52:	9a07      	ldr	r2, [sp, #28]
 8008f54:	4654      	mov	r4, sl
 8008f56:	2000      	movs	r0, #0
 8008f58:	f04f 0c0a 	mov.w	ip, #10
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f62:	3b30      	subs	r3, #48	; 0x30
 8008f64:	2b09      	cmp	r3, #9
 8008f66:	d94e      	bls.n	8009006 <_svfiprintf_r+0x17e>
 8008f68:	b1b0      	cbz	r0, 8008f98 <_svfiprintf_r+0x110>
 8008f6a:	9207      	str	r2, [sp, #28]
 8008f6c:	e014      	b.n	8008f98 <_svfiprintf_r+0x110>
 8008f6e:	eba0 0308 	sub.w	r3, r0, r8
 8008f72:	fa09 f303 	lsl.w	r3, r9, r3
 8008f76:	4313      	orrs	r3, r2
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	46a2      	mov	sl, r4
 8008f7c:	e7d2      	b.n	8008f24 <_svfiprintf_r+0x9c>
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	1d19      	adds	r1, r3, #4
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	9103      	str	r1, [sp, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bfbb      	ittet	lt
 8008f8a:	425b      	neglt	r3, r3
 8008f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f90:	9307      	strge	r3, [sp, #28]
 8008f92:	9307      	strlt	r3, [sp, #28]
 8008f94:	bfb8      	it	lt
 8008f96:	9204      	strlt	r2, [sp, #16]
 8008f98:	7823      	ldrb	r3, [r4, #0]
 8008f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f9c:	d10c      	bne.n	8008fb8 <_svfiprintf_r+0x130>
 8008f9e:	7863      	ldrb	r3, [r4, #1]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d135      	bne.n	8009010 <_svfiprintf_r+0x188>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	9203      	str	r2, [sp, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bfb8      	it	lt
 8008fb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fb4:	3402      	adds	r4, #2
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009084 <_svfiprintf_r+0x1fc>
 8008fbc:	7821      	ldrb	r1, [r4, #0]
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	f7f7 f905 	bl	80001d0 <memchr>
 8008fc6:	b140      	cbz	r0, 8008fda <_svfiprintf_r+0x152>
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	eba0 000a 	sub.w	r0, r0, sl
 8008fce:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	4303      	orrs	r3, r0
 8008fd6:	3401      	adds	r4, #1
 8008fd8:	9304      	str	r3, [sp, #16]
 8008fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fde:	4826      	ldr	r0, [pc, #152]	; (8009078 <_svfiprintf_r+0x1f0>)
 8008fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fe4:	2206      	movs	r2, #6
 8008fe6:	f7f7 f8f3 	bl	80001d0 <memchr>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d038      	beq.n	8009060 <_svfiprintf_r+0x1d8>
 8008fee:	4b23      	ldr	r3, [pc, #140]	; (800907c <_svfiprintf_r+0x1f4>)
 8008ff0:	bb1b      	cbnz	r3, 800903a <_svfiprintf_r+0x1b2>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	3307      	adds	r3, #7
 8008ff6:	f023 0307 	bic.w	r3, r3, #7
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	4433      	add	r3, r6
 8009002:	9309      	str	r3, [sp, #36]	; 0x24
 8009004:	e767      	b.n	8008ed6 <_svfiprintf_r+0x4e>
 8009006:	fb0c 3202 	mla	r2, ip, r2, r3
 800900a:	460c      	mov	r4, r1
 800900c:	2001      	movs	r0, #1
 800900e:	e7a5      	b.n	8008f5c <_svfiprintf_r+0xd4>
 8009010:	2300      	movs	r3, #0
 8009012:	3401      	adds	r4, #1
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	4619      	mov	r1, r3
 8009018:	f04f 0c0a 	mov.w	ip, #10
 800901c:	4620      	mov	r0, r4
 800901e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009022:	3a30      	subs	r2, #48	; 0x30
 8009024:	2a09      	cmp	r2, #9
 8009026:	d903      	bls.n	8009030 <_svfiprintf_r+0x1a8>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0c5      	beq.n	8008fb8 <_svfiprintf_r+0x130>
 800902c:	9105      	str	r1, [sp, #20]
 800902e:	e7c3      	b.n	8008fb8 <_svfiprintf_r+0x130>
 8009030:	fb0c 2101 	mla	r1, ip, r1, r2
 8009034:	4604      	mov	r4, r0
 8009036:	2301      	movs	r3, #1
 8009038:	e7f0      	b.n	800901c <_svfiprintf_r+0x194>
 800903a:	ab03      	add	r3, sp, #12
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	462a      	mov	r2, r5
 8009040:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <_svfiprintf_r+0x1f8>)
 8009042:	a904      	add	r1, sp, #16
 8009044:	4638      	mov	r0, r7
 8009046:	f3af 8000 	nop.w
 800904a:	1c42      	adds	r2, r0, #1
 800904c:	4606      	mov	r6, r0
 800904e:	d1d6      	bne.n	8008ffe <_svfiprintf_r+0x176>
 8009050:	89ab      	ldrh	r3, [r5, #12]
 8009052:	065b      	lsls	r3, r3, #25
 8009054:	f53f af2c 	bmi.w	8008eb0 <_svfiprintf_r+0x28>
 8009058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800905a:	b01d      	add	sp, #116	; 0x74
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	ab03      	add	r3, sp, #12
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	462a      	mov	r2, r5
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <_svfiprintf_r+0x1f8>)
 8009068:	a904      	add	r1, sp, #16
 800906a:	4638      	mov	r0, r7
 800906c:	f000 f87a 	bl	8009164 <_printf_i>
 8009070:	e7eb      	b.n	800904a <_svfiprintf_r+0x1c2>
 8009072:	bf00      	nop
 8009074:	0800953c 	.word	0x0800953c
 8009078:	08009546 	.word	0x08009546
 800907c:	00000000 	.word	0x00000000
 8009080:	08008dd1 	.word	0x08008dd1
 8009084:	08009542 	.word	0x08009542

08009088 <_printf_common>:
 8009088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800908c:	4616      	mov	r6, r2
 800908e:	4699      	mov	r9, r3
 8009090:	688a      	ldr	r2, [r1, #8]
 8009092:	690b      	ldr	r3, [r1, #16]
 8009094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009098:	4293      	cmp	r3, r2
 800909a:	bfb8      	it	lt
 800909c:	4613      	movlt	r3, r2
 800909e:	6033      	str	r3, [r6, #0]
 80090a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090a4:	4607      	mov	r7, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	b10a      	cbz	r2, 80090ae <_printf_common+0x26>
 80090aa:	3301      	adds	r3, #1
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	0699      	lsls	r1, r3, #26
 80090b2:	bf42      	ittt	mi
 80090b4:	6833      	ldrmi	r3, [r6, #0]
 80090b6:	3302      	addmi	r3, #2
 80090b8:	6033      	strmi	r3, [r6, #0]
 80090ba:	6825      	ldr	r5, [r4, #0]
 80090bc:	f015 0506 	ands.w	r5, r5, #6
 80090c0:	d106      	bne.n	80090d0 <_printf_common+0x48>
 80090c2:	f104 0a19 	add.w	sl, r4, #25
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	6832      	ldr	r2, [r6, #0]
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	42ab      	cmp	r3, r5
 80090ce:	dc26      	bgt.n	800911e <_printf_common+0x96>
 80090d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090d4:	1e13      	subs	r3, r2, #0
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	bf18      	it	ne
 80090da:	2301      	movne	r3, #1
 80090dc:	0692      	lsls	r2, r2, #26
 80090de:	d42b      	bmi.n	8009138 <_printf_common+0xb0>
 80090e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090e4:	4649      	mov	r1, r9
 80090e6:	4638      	mov	r0, r7
 80090e8:	47c0      	blx	r8
 80090ea:	3001      	adds	r0, #1
 80090ec:	d01e      	beq.n	800912c <_printf_common+0xa4>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	68e5      	ldr	r5, [r4, #12]
 80090f2:	6832      	ldr	r2, [r6, #0]
 80090f4:	f003 0306 	and.w	r3, r3, #6
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	bf08      	it	eq
 80090fc:	1aad      	subeq	r5, r5, r2
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	6922      	ldr	r2, [r4, #16]
 8009102:	bf0c      	ite	eq
 8009104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009108:	2500      	movne	r5, #0
 800910a:	4293      	cmp	r3, r2
 800910c:	bfc4      	itt	gt
 800910e:	1a9b      	subgt	r3, r3, r2
 8009110:	18ed      	addgt	r5, r5, r3
 8009112:	2600      	movs	r6, #0
 8009114:	341a      	adds	r4, #26
 8009116:	42b5      	cmp	r5, r6
 8009118:	d11a      	bne.n	8009150 <_printf_common+0xc8>
 800911a:	2000      	movs	r0, #0
 800911c:	e008      	b.n	8009130 <_printf_common+0xa8>
 800911e:	2301      	movs	r3, #1
 8009120:	4652      	mov	r2, sl
 8009122:	4649      	mov	r1, r9
 8009124:	4638      	mov	r0, r7
 8009126:	47c0      	blx	r8
 8009128:	3001      	adds	r0, #1
 800912a:	d103      	bne.n	8009134 <_printf_common+0xac>
 800912c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009134:	3501      	adds	r5, #1
 8009136:	e7c6      	b.n	80090c6 <_printf_common+0x3e>
 8009138:	18e1      	adds	r1, r4, r3
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	2030      	movs	r0, #48	; 0x30
 800913e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009142:	4422      	add	r2, r4
 8009144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800914c:	3302      	adds	r3, #2
 800914e:	e7c7      	b.n	80090e0 <_printf_common+0x58>
 8009150:	2301      	movs	r3, #1
 8009152:	4622      	mov	r2, r4
 8009154:	4649      	mov	r1, r9
 8009156:	4638      	mov	r0, r7
 8009158:	47c0      	blx	r8
 800915a:	3001      	adds	r0, #1
 800915c:	d0e6      	beq.n	800912c <_printf_common+0xa4>
 800915e:	3601      	adds	r6, #1
 8009160:	e7d9      	b.n	8009116 <_printf_common+0x8e>
	...

08009164 <_printf_i>:
 8009164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009168:	460c      	mov	r4, r1
 800916a:	4691      	mov	r9, r2
 800916c:	7e27      	ldrb	r7, [r4, #24]
 800916e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009170:	2f78      	cmp	r7, #120	; 0x78
 8009172:	4680      	mov	r8, r0
 8009174:	469a      	mov	sl, r3
 8009176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800917a:	d807      	bhi.n	800918c <_printf_i+0x28>
 800917c:	2f62      	cmp	r7, #98	; 0x62
 800917e:	d80a      	bhi.n	8009196 <_printf_i+0x32>
 8009180:	2f00      	cmp	r7, #0
 8009182:	f000 80d8 	beq.w	8009336 <_printf_i+0x1d2>
 8009186:	2f58      	cmp	r7, #88	; 0x58
 8009188:	f000 80a3 	beq.w	80092d2 <_printf_i+0x16e>
 800918c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009194:	e03a      	b.n	800920c <_printf_i+0xa8>
 8009196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800919a:	2b15      	cmp	r3, #21
 800919c:	d8f6      	bhi.n	800918c <_printf_i+0x28>
 800919e:	a001      	add	r0, pc, #4	; (adr r0, 80091a4 <_printf_i+0x40>)
 80091a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	08009211 	.word	0x08009211
 80091ac:	0800918d 	.word	0x0800918d
 80091b0:	0800918d 	.word	0x0800918d
 80091b4:	0800918d 	.word	0x0800918d
 80091b8:	0800918d 	.word	0x0800918d
 80091bc:	08009211 	.word	0x08009211
 80091c0:	0800918d 	.word	0x0800918d
 80091c4:	0800918d 	.word	0x0800918d
 80091c8:	0800918d 	.word	0x0800918d
 80091cc:	0800918d 	.word	0x0800918d
 80091d0:	0800931d 	.word	0x0800931d
 80091d4:	08009241 	.word	0x08009241
 80091d8:	080092ff 	.word	0x080092ff
 80091dc:	0800918d 	.word	0x0800918d
 80091e0:	0800918d 	.word	0x0800918d
 80091e4:	0800933f 	.word	0x0800933f
 80091e8:	0800918d 	.word	0x0800918d
 80091ec:	08009241 	.word	0x08009241
 80091f0:	0800918d 	.word	0x0800918d
 80091f4:	0800918d 	.word	0x0800918d
 80091f8:	08009307 	.word	0x08009307
 80091fc:	680b      	ldr	r3, [r1, #0]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	600a      	str	r2, [r1, #0]
 8009204:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800920c:	2301      	movs	r3, #1
 800920e:	e0a3      	b.n	8009358 <_printf_i+0x1f4>
 8009210:	6825      	ldr	r5, [r4, #0]
 8009212:	6808      	ldr	r0, [r1, #0]
 8009214:	062e      	lsls	r6, r5, #24
 8009216:	f100 0304 	add.w	r3, r0, #4
 800921a:	d50a      	bpl.n	8009232 <_printf_i+0xce>
 800921c:	6805      	ldr	r5, [r0, #0]
 800921e:	600b      	str	r3, [r1, #0]
 8009220:	2d00      	cmp	r5, #0
 8009222:	da03      	bge.n	800922c <_printf_i+0xc8>
 8009224:	232d      	movs	r3, #45	; 0x2d
 8009226:	426d      	negs	r5, r5
 8009228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800922c:	485e      	ldr	r0, [pc, #376]	; (80093a8 <_printf_i+0x244>)
 800922e:	230a      	movs	r3, #10
 8009230:	e019      	b.n	8009266 <_printf_i+0x102>
 8009232:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009236:	6805      	ldr	r5, [r0, #0]
 8009238:	600b      	str	r3, [r1, #0]
 800923a:	bf18      	it	ne
 800923c:	b22d      	sxthne	r5, r5
 800923e:	e7ef      	b.n	8009220 <_printf_i+0xbc>
 8009240:	680b      	ldr	r3, [r1, #0]
 8009242:	6825      	ldr	r5, [r4, #0]
 8009244:	1d18      	adds	r0, r3, #4
 8009246:	6008      	str	r0, [r1, #0]
 8009248:	0628      	lsls	r0, r5, #24
 800924a:	d501      	bpl.n	8009250 <_printf_i+0xec>
 800924c:	681d      	ldr	r5, [r3, #0]
 800924e:	e002      	b.n	8009256 <_printf_i+0xf2>
 8009250:	0669      	lsls	r1, r5, #25
 8009252:	d5fb      	bpl.n	800924c <_printf_i+0xe8>
 8009254:	881d      	ldrh	r5, [r3, #0]
 8009256:	4854      	ldr	r0, [pc, #336]	; (80093a8 <_printf_i+0x244>)
 8009258:	2f6f      	cmp	r7, #111	; 0x6f
 800925a:	bf0c      	ite	eq
 800925c:	2308      	moveq	r3, #8
 800925e:	230a      	movne	r3, #10
 8009260:	2100      	movs	r1, #0
 8009262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009266:	6866      	ldr	r6, [r4, #4]
 8009268:	60a6      	str	r6, [r4, #8]
 800926a:	2e00      	cmp	r6, #0
 800926c:	bfa2      	ittt	ge
 800926e:	6821      	ldrge	r1, [r4, #0]
 8009270:	f021 0104 	bicge.w	r1, r1, #4
 8009274:	6021      	strge	r1, [r4, #0]
 8009276:	b90d      	cbnz	r5, 800927c <_printf_i+0x118>
 8009278:	2e00      	cmp	r6, #0
 800927a:	d04d      	beq.n	8009318 <_printf_i+0x1b4>
 800927c:	4616      	mov	r6, r2
 800927e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009282:	fb03 5711 	mls	r7, r3, r1, r5
 8009286:	5dc7      	ldrb	r7, [r0, r7]
 8009288:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800928c:	462f      	mov	r7, r5
 800928e:	42bb      	cmp	r3, r7
 8009290:	460d      	mov	r5, r1
 8009292:	d9f4      	bls.n	800927e <_printf_i+0x11a>
 8009294:	2b08      	cmp	r3, #8
 8009296:	d10b      	bne.n	80092b0 <_printf_i+0x14c>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	07df      	lsls	r7, r3, #31
 800929c:	d508      	bpl.n	80092b0 <_printf_i+0x14c>
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	6861      	ldr	r1, [r4, #4]
 80092a2:	4299      	cmp	r1, r3
 80092a4:	bfde      	ittt	le
 80092a6:	2330      	movle	r3, #48	; 0x30
 80092a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80092b0:	1b92      	subs	r2, r2, r6
 80092b2:	6122      	str	r2, [r4, #16]
 80092b4:	f8cd a000 	str.w	sl, [sp]
 80092b8:	464b      	mov	r3, r9
 80092ba:	aa03      	add	r2, sp, #12
 80092bc:	4621      	mov	r1, r4
 80092be:	4640      	mov	r0, r8
 80092c0:	f7ff fee2 	bl	8009088 <_printf_common>
 80092c4:	3001      	adds	r0, #1
 80092c6:	d14c      	bne.n	8009362 <_printf_i+0x1fe>
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092cc:	b004      	add	sp, #16
 80092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d2:	4835      	ldr	r0, [pc, #212]	; (80093a8 <_printf_i+0x244>)
 80092d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	680e      	ldr	r6, [r1, #0]
 80092dc:	061f      	lsls	r7, r3, #24
 80092de:	f856 5b04 	ldr.w	r5, [r6], #4
 80092e2:	600e      	str	r6, [r1, #0]
 80092e4:	d514      	bpl.n	8009310 <_printf_i+0x1ac>
 80092e6:	07d9      	lsls	r1, r3, #31
 80092e8:	bf44      	itt	mi
 80092ea:	f043 0320 	orrmi.w	r3, r3, #32
 80092ee:	6023      	strmi	r3, [r4, #0]
 80092f0:	b91d      	cbnz	r5, 80092fa <_printf_i+0x196>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	f023 0320 	bic.w	r3, r3, #32
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	2310      	movs	r3, #16
 80092fc:	e7b0      	b.n	8009260 <_printf_i+0xfc>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	f043 0320 	orr.w	r3, r3, #32
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	2378      	movs	r3, #120	; 0x78
 8009308:	4828      	ldr	r0, [pc, #160]	; (80093ac <_printf_i+0x248>)
 800930a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800930e:	e7e3      	b.n	80092d8 <_printf_i+0x174>
 8009310:	065e      	lsls	r6, r3, #25
 8009312:	bf48      	it	mi
 8009314:	b2ad      	uxthmi	r5, r5
 8009316:	e7e6      	b.n	80092e6 <_printf_i+0x182>
 8009318:	4616      	mov	r6, r2
 800931a:	e7bb      	b.n	8009294 <_printf_i+0x130>
 800931c:	680b      	ldr	r3, [r1, #0]
 800931e:	6826      	ldr	r6, [r4, #0]
 8009320:	6960      	ldr	r0, [r4, #20]
 8009322:	1d1d      	adds	r5, r3, #4
 8009324:	600d      	str	r5, [r1, #0]
 8009326:	0635      	lsls	r5, r6, #24
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	d501      	bpl.n	8009330 <_printf_i+0x1cc>
 800932c:	6018      	str	r0, [r3, #0]
 800932e:	e002      	b.n	8009336 <_printf_i+0x1d2>
 8009330:	0671      	lsls	r1, r6, #25
 8009332:	d5fb      	bpl.n	800932c <_printf_i+0x1c8>
 8009334:	8018      	strh	r0, [r3, #0]
 8009336:	2300      	movs	r3, #0
 8009338:	6123      	str	r3, [r4, #16]
 800933a:	4616      	mov	r6, r2
 800933c:	e7ba      	b.n	80092b4 <_printf_i+0x150>
 800933e:	680b      	ldr	r3, [r1, #0]
 8009340:	1d1a      	adds	r2, r3, #4
 8009342:	600a      	str	r2, [r1, #0]
 8009344:	681e      	ldr	r6, [r3, #0]
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	2100      	movs	r1, #0
 800934a:	4630      	mov	r0, r6
 800934c:	f7f6 ff40 	bl	80001d0 <memchr>
 8009350:	b108      	cbz	r0, 8009356 <_printf_i+0x1f2>
 8009352:	1b80      	subs	r0, r0, r6
 8009354:	6060      	str	r0, [r4, #4]
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	2300      	movs	r3, #0
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009360:	e7a8      	b.n	80092b4 <_printf_i+0x150>
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	4632      	mov	r2, r6
 8009366:	4649      	mov	r1, r9
 8009368:	4640      	mov	r0, r8
 800936a:	47d0      	blx	sl
 800936c:	3001      	adds	r0, #1
 800936e:	d0ab      	beq.n	80092c8 <_printf_i+0x164>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	079b      	lsls	r3, r3, #30
 8009374:	d413      	bmi.n	800939e <_printf_i+0x23a>
 8009376:	68e0      	ldr	r0, [r4, #12]
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	4298      	cmp	r0, r3
 800937c:	bfb8      	it	lt
 800937e:	4618      	movlt	r0, r3
 8009380:	e7a4      	b.n	80092cc <_printf_i+0x168>
 8009382:	2301      	movs	r3, #1
 8009384:	4632      	mov	r2, r6
 8009386:	4649      	mov	r1, r9
 8009388:	4640      	mov	r0, r8
 800938a:	47d0      	blx	sl
 800938c:	3001      	adds	r0, #1
 800938e:	d09b      	beq.n	80092c8 <_printf_i+0x164>
 8009390:	3501      	adds	r5, #1
 8009392:	68e3      	ldr	r3, [r4, #12]
 8009394:	9903      	ldr	r1, [sp, #12]
 8009396:	1a5b      	subs	r3, r3, r1
 8009398:	42ab      	cmp	r3, r5
 800939a:	dcf2      	bgt.n	8009382 <_printf_i+0x21e>
 800939c:	e7eb      	b.n	8009376 <_printf_i+0x212>
 800939e:	2500      	movs	r5, #0
 80093a0:	f104 0619 	add.w	r6, r4, #25
 80093a4:	e7f5      	b.n	8009392 <_printf_i+0x22e>
 80093a6:	bf00      	nop
 80093a8:	0800954d 	.word	0x0800954d
 80093ac:	0800955e 	.word	0x0800955e

080093b0 <memmove>:
 80093b0:	4288      	cmp	r0, r1
 80093b2:	b510      	push	{r4, lr}
 80093b4:	eb01 0402 	add.w	r4, r1, r2
 80093b8:	d902      	bls.n	80093c0 <memmove+0x10>
 80093ba:	4284      	cmp	r4, r0
 80093bc:	4623      	mov	r3, r4
 80093be:	d807      	bhi.n	80093d0 <memmove+0x20>
 80093c0:	1e43      	subs	r3, r0, #1
 80093c2:	42a1      	cmp	r1, r4
 80093c4:	d008      	beq.n	80093d8 <memmove+0x28>
 80093c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ce:	e7f8      	b.n	80093c2 <memmove+0x12>
 80093d0:	4402      	add	r2, r0
 80093d2:	4601      	mov	r1, r0
 80093d4:	428a      	cmp	r2, r1
 80093d6:	d100      	bne.n	80093da <memmove+0x2a>
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093e2:	e7f7      	b.n	80093d4 <memmove+0x24>

080093e4 <_realloc_r>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	4607      	mov	r7, r0
 80093e8:	4614      	mov	r4, r2
 80093ea:	460e      	mov	r6, r1
 80093ec:	b921      	cbnz	r1, 80093f8 <_realloc_r+0x14>
 80093ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093f2:	4611      	mov	r1, r2
 80093f4:	f7ff bb9c 	b.w	8008b30 <_malloc_r>
 80093f8:	b922      	cbnz	r2, 8009404 <_realloc_r+0x20>
 80093fa:	f7ff fc99 	bl	8008d30 <_free_r>
 80093fe:	4625      	mov	r5, r4
 8009400:	4628      	mov	r0, r5
 8009402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009404:	f000 f814 	bl	8009430 <_malloc_usable_size_r>
 8009408:	42a0      	cmp	r0, r4
 800940a:	d20f      	bcs.n	800942c <_realloc_r+0x48>
 800940c:	4621      	mov	r1, r4
 800940e:	4638      	mov	r0, r7
 8009410:	f7ff fb8e 	bl	8008b30 <_malloc_r>
 8009414:	4605      	mov	r5, r0
 8009416:	2800      	cmp	r0, #0
 8009418:	d0f2      	beq.n	8009400 <_realloc_r+0x1c>
 800941a:	4631      	mov	r1, r6
 800941c:	4622      	mov	r2, r4
 800941e:	f7ff fb71 	bl	8008b04 <memcpy>
 8009422:	4631      	mov	r1, r6
 8009424:	4638      	mov	r0, r7
 8009426:	f7ff fc83 	bl	8008d30 <_free_r>
 800942a:	e7e9      	b.n	8009400 <_realloc_r+0x1c>
 800942c:	4635      	mov	r5, r6
 800942e:	e7e7      	b.n	8009400 <_realloc_r+0x1c>

08009430 <_malloc_usable_size_r>:
 8009430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009434:	1f18      	subs	r0, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	bfbc      	itt	lt
 800943a:	580b      	ldrlt	r3, [r1, r0]
 800943c:	18c0      	addlt	r0, r0, r3
 800943e:	4770      	bx	lr

08009440 <_init>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	bf00      	nop
 8009444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009446:	bc08      	pop	{r3}
 8009448:	469e      	mov	lr, r3
 800944a:	4770      	bx	lr

0800944c <_fini>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	bf00      	nop
 8009450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009452:	bc08      	pop	{r3}
 8009454:	469e      	mov	lr, r3
 8009456:	4770      	bx	lr
