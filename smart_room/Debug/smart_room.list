
smart_room.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009308  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b0  080095b0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080095b0  080095b0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095b0  080095b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b0  080095b0  000195b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080095b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  20000078  08009630  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d8  08009630  000211d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020565  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3f  00000000  00000000  0004060d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00044550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  00045f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca74  00000000  00000000  000477a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0a9  00000000  00000000  0007421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116398  00000000  00000000  0008f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a565d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b8  00000000  00000000  001a56b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009480 	.word	0x08009480

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009480 	.word	0x08009480

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000094 	.word	0x20000094
 80002a0:	20000148 	.word	0x20000148

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b20      	cmp	r3, #32
 8000414:	d101      	bne.n	800041a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000416:	2301      	movs	r3, #1
 8000418:	e000      	b.n	800041c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d101      	bne.n	8000440 <LL_USART_IsActiveFlag_TXE+0x18>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 0220 	orr.w	r2, r3, #32
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	460b      	mov	r3, r1
 80004d4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	4907      	ldr	r1, [pc, #28]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000526:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <sendchar>:
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;
uint8_t door_state = 1;


void sendchar(char c, char usart){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10b      	bne.n	80005aa <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <sendchar+0x54>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	2300      	movs	r3, #0
 800059a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800059e:	f006 fb6b 	bl	8006c78 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <sendchar+0x58>)
 80005a4:	f7ff ff63 	bl	800046e <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 80005a8:	e00d      	b.n	80005c6 <sendchar+0x4a>
	else if( usart == USART_2){
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d10a      	bne.n	80005c6 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <sendchar+0x5c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	2300      	movs	r3, #0
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005bc:	f006 fb5c 	bl	8006c78 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <sendchar+0x60>)
 80005c2:	f7ff ff54 	bl	800046e <LL_USART_EnableIT_TXE>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20001174 	.word	0x20001174
 80005d4:	40013800 	.word	0x40013800
 80005d8:	20001120 	.word	0x20001120
 80005dc:	40004400 	.word	0x40004400

080005e0 <sendString>:

void sendString(char * str, char usart){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 80005ec:	e009      	b.n	8000602 <sendString+0x22>
		sendchar(*str, usart);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffc0 	bl	800057c <sendchar>
		str++;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f1      	bne.n	80005ee <sendString+0xe>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <readchar>:

char readchar(char usart){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d109      	bne.n	800063c <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <readchar+0x4c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 010f 	add.w	r1, r7, #15
 8000630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000634:	4618      	mov	r0, r3
 8000636:	f006 fcb9 	bl	8006fac <xQueueReceive>
 800063a:	e00b      	b.n	8000654 <readchar+0x40>
	else if(usart == USART_2)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d108      	bne.n	8000654 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <readchar+0x50>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f107 010f 	add.w	r1, r7, #15
 800064a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fcac 	bl	8006fac <xQueueReceive>
	return caracter;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000106c 	.word	0x2000106c
 8000664:	20001124 	.word	0x20001124

08000668 <cli>:

void cli(void * vParam)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	while(1)
	{
		caracter = readchar(USART_1);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ffcf 	bl	8000614 <readchar>
 8000676:	4603      	mov	r3, r0
 8000678:	75fb      	strb	r3, [r7, #23]

		char buff[8];
		uint8_t temp = readVoltage();
 800067a:	f000 f86f 	bl	800075c <readVoltage>
 800067e:	4603      	mov	r3, r0
 8000680:	75bb      	strb	r3, [r7, #22]
		sprintf(buff,"\n%d\r\n", temp);
 8000682:	7dba      	ldrb	r2, [r7, #22]
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	492b      	ldr	r1, [pc, #172]	; (8000738 <cli+0xd0>)
 800068a:	4618      	mov	r0, r3
 800068c:	f008 fb44 	bl	8008d18 <siprintf>
		sendString(buff, USART_1);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffa2 	bl	80005e0 <sendString>

		switch(caracter){
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3b41      	subs	r3, #65	; 0x41
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	d8e5      	bhi.n	8000670 <cli+0x8>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <cli+0x44>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	08000671 	.word	0x08000671
 80006b0:	08000671 	.word	0x08000671
 80006b4:	0800072d 	.word	0x0800072d
 80006b8:	0800071d 	.word	0x0800071d
 80006bc:	08000671 	.word	0x08000671
 80006c0:	08000671 	.word	0x08000671
 80006c4:	08000671 	.word	0x08000671
 80006c8:	08000671 	.word	0x08000671
 80006cc:	08000671 	.word	0x08000671
 80006d0:	08000671 	.word	0x08000671
 80006d4:	08000671 	.word	0x08000671
 80006d8:	08000715 	.word	0x08000715
 80006dc:	08000671 	.word	0x08000671
 80006e0:	08000671 	.word	0x08000671
 80006e4:	08000725 	.word	0x08000725
 80006e8:	08000671 	.word	0x08000671
 80006ec:	08000671 	.word	0x08000671
 80006f0:	08000671 	.word	0x08000671
 80006f4:	08000671 	.word	0x08000671
 80006f8:	08000671 	.word	0x08000671
 80006fc:	08000671 	.word	0x08000671
 8000700:	08000671 	.word	0x08000671
 8000704:	08000671 	.word	0x08000671
 8000708:	08000671 	.word	0x08000671
 800070c:	08000671 	.word	0x08000671
 8000710:	08000671 	.word	0x08000671
					case 'L':
						changeLedState(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f811 	bl	800073c <changeLedState>
						break;
 800071a:	e00b      	b.n	8000734 <cli+0xcc>
					case 'D':
						changeLedState(0);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f80d 	bl	800073c <changeLedState>
						break;
 8000722:	e007      	b.n	8000734 <cli+0xcc>
					case 'O':
						changeDoorState(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 f833 	bl	8000790 <changeDoorState>
						break;
 800072a:	e003      	b.n	8000734 <cli+0xcc>
					case 'C':
						changeDoorState(0);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f82f 	bl	8000790 <changeDoorState>
						break;
 8000732:	bf00      	nop
	{
 8000734:	e79c      	b.n	8000670 <cli+0x8>
 8000736:	bf00      	nop
 8000738:	080094a4 	.word	0x080094a4

0800073c <changeLedState>:
				}
	}

}

void changeLedState(uint8_t mode){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, mode);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	461a      	mov	r2, r3
 800074a:	2120      	movs	r1, #32
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f002 fb9e 	bl	8002e90 <HAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <readVoltage>:

int8_t readVoltage(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <readVoltage+0x2c>)
 8000762:	f001 fa41 	bl	8001be8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <readVoltage+0x2c>)
 800076c:	f001 faf6 	bl	8001d5c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1) / 25;
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <readVoltage+0x2c>)
 8000772:	f001 fbcb 	bl	8001f0c <HAL_ADC_GetValue>
 8000776:	4603      	mov	r3, r0
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <readVoltage+0x30>)
 800077a:	fba2 2303 	umull	r2, r3, r2, r3
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	b25b      	sxtb	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200010bc 	.word	0x200010bc
 800078c:	51eb851f 	.word	0x51eb851f

08000790 <changeDoorState>:

void changeDoorState(uint8_t mode){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	if(mode == 1 && door_state == 0){
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d116      	bne.n	80007ce <changeDoorState+0x3e>
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <changeDoorState+0x78>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d112      	bne.n	80007ce <changeDoorState+0x3e>
		//2ms Pwm - Servo motor arm rotates to 180 degree
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80007a8:	2104      	movs	r1, #4
 80007aa:	4818      	ldr	r0, [pc, #96]	; (800080c <changeDoorState+0x7c>)
 80007ac:	f004 f842 	bl	8004834 <HAL_TIM_PWM_Start>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 100);
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <changeDoorState+0x7c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2264      	movs	r2, #100	; 0x64
 80007b6:	639a      	str	r2, [r3, #56]	; 0x38
		vTaskDelay(200);
 80007b8:	20c8      	movs	r0, #200	; 0xc8
 80007ba:	f007 f811 	bl	80077e0 <vTaskDelay>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80007be:	2104      	movs	r1, #4
 80007c0:	4812      	ldr	r0, [pc, #72]	; (800080c <changeDoorState+0x7c>)
 80007c2:	f004 f93d 	bl	8004a40 <HAL_TIM_PWM_Stop>
		door_state = 1;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <changeDoorState+0x78>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 50);
		vTaskDelay(200);
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
		door_state = 0;
	}
}
 80007cc:	e018      	b.n	8000800 <changeDoorState+0x70>
	} else if(mode == 0 && door_state == 1){
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d115      	bne.n	8000800 <changeDoorState+0x70>
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <changeDoorState+0x78>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d111      	bne.n	8000800 <changeDoorState+0x70>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80007dc:	2104      	movs	r1, #4
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <changeDoorState+0x7c>)
 80007e0:	f004 f828 	bl	8004834 <HAL_TIM_PWM_Start>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 50);
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <changeDoorState+0x7c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2232      	movs	r2, #50	; 0x32
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
		vTaskDelay(200);
 80007ec:	20c8      	movs	r0, #200	; 0xc8
 80007ee:	f006 fff7 	bl	80077e0 <vTaskDelay>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80007f2:	2104      	movs	r1, #4
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <changeDoorState+0x7c>)
 80007f6:	f004 f923 	bl	8004a40 <HAL_TIM_PWM_Stop>
		door_state = 0;
 80007fa:	4b03      	ldr	r3, [pc, #12]	; (8000808 <changeDoorState+0x78>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20001070 	.word	0x20001070

08000810 <USART_2_IRQHandler>:

//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000816:	482a      	ldr	r0, [pc, #168]	; (80008c0 <USART_2_IRQHandler+0xb0>)
 8000818:	f7ff fe06 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d026      	beq.n	8000870 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000822:	e014      	b.n	800084e <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <USART_2_IRQHandler+0xb4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f107 020c 	add.w	r2, r7, #12
 800082c:	f107 010b 	add.w	r1, r7, #11
 8000830:	4618      	mov	r0, r3
 8000832:	f006 fc9b 	bl	800716c <xQueueReceiveFromISR>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d103      	bne.n	8000844 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 800083c:	4820      	ldr	r0, [pc, #128]	; (80008c0 <USART_2_IRQHandler+0xb0>)
 800083e:	f7ff fe26 	bl	800048e <LL_USART_DisableIT_TXE>
 8000842:	e00a      	b.n	800085a <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	4619      	mov	r1, r3
 8000848:	481d      	ldr	r0, [pc, #116]	; (80008c0 <USART_2_IRQHandler+0xb0>)
 800084a:	f7ff fe3e 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <USART_2_IRQHandler+0xb0>)
 8000850:	f7ff fdea 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1e4      	bne.n	8000824 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <USART_2_IRQHandler+0x60>
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <USART_2_IRQHandler+0xb8>)
 8000862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	f3bf 8f4f 	dsb	sy
 800086c:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <USART_2_IRQHandler+0xb0>)
 8000872:	f7ff fdc6 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d01d      	beq.n	80008b8 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800087c:	e00b      	b.n	8000896 <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <USART_2_IRQHandler+0xb0>)
 8000880:	f7ff fe15 	bl	80004ae <LL_USART_ReceiveData8>
 8000884:	4603      	mov	r3, r0
        	uint8_t byte =
 8000886:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <USART_2_IRQHandler+0xbc>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	1d3a      	adds	r2, r7, #4
 800088e:	1cf9      	adds	r1, r7, #3
 8000890:	2300      	movs	r3, #0
 8000892:	f006 faef 	bl	8006e74 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000896:	480a      	ldr	r0, [pc, #40]	; (80008c0 <USART_2_IRQHandler+0xb0>)
 8000898:	f7ff fdb3 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1ed      	bne.n	800087e <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d007      	beq.n	80008b8 <USART_2_IRQHandler+0xa8>
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <USART_2_IRQHandler+0xb8>)
 80008aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	f3bf 8f6f 	isb	sy
    }
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40004400 	.word	0x40004400
 80008c4:	20001120 	.word	0x20001120
 80008c8:	e000ed04 	.word	0xe000ed04
 80008cc:	20001124 	.word	0x20001124

080008d0 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008d6:	482a      	ldr	r0, [pc, #168]	; (8000980 <USART_1_IRQHandler+0xb0>)
 80008d8:	f7ff fda6 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d026      	beq.n	8000930 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008e2:	e014      	b.n	800090e <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <USART_1_IRQHandler+0xb4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f107 020c 	add.w	r2, r7, #12
 80008ec:	f107 010b 	add.w	r1, r7, #11
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 fc3b 	bl	800716c <xQueueReceiveFromISR>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 80008fc:	4820      	ldr	r0, [pc, #128]	; (8000980 <USART_1_IRQHandler+0xb0>)
 80008fe:	f7ff fdc6 	bl	800048e <LL_USART_DisableIT_TXE>
 8000902:	e00a      	b.n	800091a <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 8000904:	7afb      	ldrb	r3, [r7, #11]
 8000906:	4619      	mov	r1, r3
 8000908:	481d      	ldr	r0, [pc, #116]	; (8000980 <USART_1_IRQHandler+0xb0>)
 800090a:	f7ff fdde 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <USART_1_IRQHandler+0xb0>)
 8000910:	f7ff fd8a 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1e4      	bne.n	80008e4 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d007      	beq.n	8000930 <USART_1_IRQHandler+0x60>
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <USART_1_IRQHandler+0xb8>)
 8000922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	f3bf 8f4f 	dsb	sy
 800092c:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <USART_1_IRQHandler+0xb0>)
 8000932:	f7ff fd66 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d01d      	beq.n	8000978 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800093c:	e00b      	b.n	8000956 <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <USART_1_IRQHandler+0xb0>)
 8000940:	f7ff fdb5 	bl	80004ae <LL_USART_ReceiveData8>
 8000944:	4603      	mov	r3, r0
        	uint8_t byte =
 8000946:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <USART_1_IRQHandler+0xbc>)
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	1d3a      	adds	r2, r7, #4
 800094e:	1cf9      	adds	r1, r7, #3
 8000950:	2300      	movs	r3, #0
 8000952:	f006 fa8f 	bl	8006e74 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <USART_1_IRQHandler+0xb0>)
 8000958:	f7ff fd53 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ed      	bne.n	800093e <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d007      	beq.n	8000978 <USART_1_IRQHandler+0xa8>
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <USART_1_IRQHandler+0xb8>)
 800096a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	f3bf 8f4f 	dsb	sy
 8000974:	f3bf 8f6f 	isb	sy
    }
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40013800 	.word	0x40013800
 8000984:	20001174 	.word	0x20001174
 8000988:	e000ed04 	.word	0xe000ed04
 800098c:	2000106c 	.word	0x2000106c

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f000 fdad 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f847 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 fb05 	bl	8000fac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a2:	f000 fa6b 	bl	8000e7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009a6:	f000 f893 	bl	8000ad0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80009aa:	f000 f9cd 	bl	8000d48 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80009ae:	f000 f953 	bl	8000c58 <MX_TIM3_Init>
  MX_TIM2_Init();
 80009b2:	f000 f903 	bl	8000bbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 80009b6:	2001      	movs	r0, #1
 80009b8:	f006 f945 	bl	8006c46 <xQueueCreateMutex>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <main+0x80>)
 80009c0:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 80009c2:	2001      	movs	r0, #1
 80009c4:	f006 f93f 	bl	8006c46 <xQueueCreateMutex>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <main+0x84>)
 80009cc:	6013      	str	r3, [r2, #0]


	HAL_TIM_Base_Start(&htim3);
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <main+0x88>)
 80009d0:	f003 fdf6 	bl	80045c0 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0x8c>)
 80009d6:	1d3c      	adds	r4, r7, #4
 80009d8:	461d      	mov	r5, r3
 80009da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 ff3b 	bl	8006866 <osThreadCreate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <main+0x90>)
 80009f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 80009f6:	2300      	movs	r3, #0
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	2301      	movs	r3, #1
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <main+0x94>)
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <main+0x98>)
 8000a06:	f006 fd9e 	bl	8007546 <xTaskCreate>
			  NULL);      /* ponteiro para o handle da task */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a0a:	f005 ff25 	bl	8006858 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0x7e>
 8000a10:	20000348 	.word	0x20000348
 8000a14:	2000034c 	.word	0x2000034c
 8000a18:	20001070 	.word	0x20001070
 8000a1c:	080094b0 	.word	0x080094b0
 8000a20:	20001068 	.word	0x20001068
 8000a24:	080094ac 	.word	0x080094ac
 8000a28:	08000669 	.word	0x08000669

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2244      	movs	r2, #68	; 0x44
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 f890 	bl	8008b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a52:	f002 fa43 	bl	8002edc <HAL_PWREx_ControlVoltageScaling>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a5c:	f000 fb28 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fa7a 	bl	8002f88 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a9a:	f000 fb09 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fe4c 	bl	8003754 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac2:	f000 faf5 	bl	80010b0 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3758      	adds	r7, #88	; 0x58
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000af4:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <MX_ADC1_Init+0xe4>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b54:	f000 fef2 	bl	800193c <HAL_ADC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b5e:	f000 faa7 	bl	80010b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b6e:	f001 fe53 	bl	8002818 <HAL_ADCEx_MultiModeConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b78:	f000 fa9a 	bl	80010b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_ADC1_Init+0xe8>)
 8000b7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b80:	2306      	movs	r3, #6
 8000b82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b88:	237f      	movs	r3, #127	; 0x7f
 8000b8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_ADC1_Init+0xe0>)
 8000b9a:	f001 f9c5 	bl	8001f28 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ba4:	f000 fa84 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200010bc 	.word	0x200010bc
 8000bb4:	50040000 	.word	0x50040000
 8000bb8:	14f00020 	.word	0x14f00020

08000bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000be4:	220f      	movs	r2, #15
 8000be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bf0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c04:	f003 fc84 	bl	8004510 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c0e:	f000 fa4f 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c20:	f004 f9d4 	bl	8004fcc <HAL_TIM_ConfigClockSource>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c2a:	f000 fa41 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c3c:	f004 fee4 	bl	8005a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c46:	f000 fa33 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001128 	.word	0x20001128

08000c58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000c8c:	4a2d      	ldr	r2, [pc, #180]	; (8000d44 <MX_TIM3_Init+0xec>)
 8000c8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000c92:	2213      	movs	r2, #19
 8000c94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000c9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb0:	4823      	ldr	r0, [pc, #140]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000cb2:	f003 fc2d 	bl	8004510 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cbc:	f000 f9f8 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481c      	ldr	r0, [pc, #112]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000cce:	f004 f97d 	bl	8004fcc <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000cd8:	f000 f9ea 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cdc:	4818      	ldr	r0, [pc, #96]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000cde:	f003 fd47 	bl	8004770 <HAL_TIM_PWM_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ce8:	f000 f9e2 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000cfc:	f004 fe84 	bl	8005a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d06:	f000 f9d3 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0a:	2360      	movs	r3, #96	; 0x60
 8000d0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000d24:	f004 f842 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d2e:	f000 f9bf 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d32:	4803      	ldr	r0, [pc, #12]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000d34:	f000 fa8a 	bl	800124c <HAL_TIM_MspPostInit>

}
 8000d38:	bf00      	nop
 8000d3a:	3738      	adds	r7, #56	; 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20001070 	.word	0x20001070
 8000d44:	40000400 	.word	0x40000400

08000d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0b0      	sub	sp, #192	; 0xc0
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2288      	movs	r2, #136	; 0x88
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 fef0 	bl	8008b60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 ff04 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 f98b 	bl	80010b0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000d9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d9e:	f7ff fbd5 	bl	800054c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fba2 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000da8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f005 f807 	bl	8005dea <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000ddc:	f7ff fa62 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2105      	movs	r1, #5
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fab2 	bl	8000350 <NVIC_EncodePriority>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	2025      	movs	r0, #37	; 0x25
 8000df2:	f7ff fa83 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000df6:	2025      	movs	r0, #37	; 0x25
 8000df8:	f7ff fa62 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000dfc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e16:	230c      	movs	r3, #12
 8000e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 8000e28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4810      	ldr	r0, [pc, #64]	; (8000e70 <MX_USART1_UART_Init+0x128>)
 8000e30:	f005 fc7e 	bl	8006730 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000e34:	480e      	ldr	r0, [pc, #56]	; (8000e70 <MX_USART1_UART_Init+0x128>)
 8000e36:	f7ff face 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_USART1_UART_Init+0x128>)
 8000e3c:	f7ff fabb 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000e40:	2200      	movs	r2, #0
 8000e42:	2101      	movs	r1, #1
 8000e44:	2080      	movs	r0, #128	; 0x80
 8000e46:	f005 fe8b 	bl	8006b60 <xQueueGenericCreate>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <MX_USART1_UART_Init+0x12c>)
 8000e4e:	6013      	str	r3, [r2, #0]
   rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	2005      	movs	r0, #5
 8000e56:	f005 fe83 	bl	8006b60 <xQueueGenericCreate>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <MX_USART1_UART_Init+0x130>)
 8000e5e:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART1);
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <MX_USART1_UART_Init+0x128>)
 8000e62:	f7ff faf4 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	37c0      	adds	r7, #192	; 0xc0
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40013800 	.word	0x40013800
 8000e74:	20001174 	.word	0x20001174
 8000e78:	2000106c 	.word	0x2000106c

08000e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0b0      	sub	sp, #192	; 0xc0
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2288      	movs	r2, #136	; 0x88
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f007 fe56 	bl	8008b60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fe6a 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 f8f1 	bl	80010b0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ece:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ed2:	f7ff fb23 	bl	800051c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fb08 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000edc:	230c      	movs	r3, #12
 8000ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000efa:	2307      	movs	r3, #7
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f004 ff6e 	bl	8005dea <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000f0e:	f7ff f9c9 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2200      	movs	r2, #0
 8000f16:	2105      	movs	r1, #5
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa19 	bl	8000350 <NVIC_EncodePriority>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4619      	mov	r1, r3
 8000f22:	2026      	movs	r0, #38	; 0x26
 8000f24:	f7ff f9ea 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000f28:	2026      	movs	r0, #38	; 0x26
 8000f2a:	f7ff f9c9 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000f2e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f48:	230c      	movs	r3, #12
 8000f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <MX_USART2_UART_Init+0x124>)
 8000f62:	f005 fbe5 	bl	8006730 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <MX_USART2_UART_Init+0x124>)
 8000f68:	f7ff fa35 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <MX_USART2_UART_Init+0x124>)
 8000f6e:	f7ff fa22 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000f72:	2200      	movs	r2, #0
 8000f74:	2101      	movs	r1, #1
 8000f76:	2080      	movs	r0, #128	; 0x80
 8000f78:	f005 fdf2 	bl	8006b60 <xQueueGenericCreate>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <MX_USART2_UART_Init+0x128>)
 8000f80:	6013      	str	r3, [r2, #0]
   rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000f82:	2200      	movs	r2, #0
 8000f84:	2101      	movs	r1, #1
 8000f86:	2005      	movs	r0, #5
 8000f88:	f005 fdea 	bl	8006b60 <xQueueGenericCreate>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <MX_USART2_UART_Init+0x12c>)
 8000f90:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART2);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_USART2_UART_Init+0x124>)
 8000f94:	f7ff fa5b 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	37c0      	adds	r7, #192	; 0xc0
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	20001120 	.word	0x20001120
 8000fa8:	20001124 	.word	0x20001124

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a24      	ldr	r2, [pc, #144]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_GPIO_Init+0xc4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_GPIO_Init+0xc4>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <MX_GPIO_Init+0xc4>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_GPIO_Init+0xc4>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2132      	movs	r1, #50	; 0x32
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f001 ff31 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_GPIO_Init+0xc8>)
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_GPIO_Init+0xcc>)
 8001044:	f001 fd7a 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8001048:	2332      	movs	r3, #50	; 0x32
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 fd6b 	bl	8002b3c <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	10210000 	.word	0x10210000
 8001078:	48000800 	.word	0x48000800

0800107c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f005 fc3a 	bl	80068fe <osDelay>
 800108a:	e7fb      	b.n	8001084 <StartDefaultTask+0x8>

0800108c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109e:	f000 fa49 	bl	8001534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40012c00 	.word	0x40012c00

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_MspInit+0x4c>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_MspInit+0x4c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_MspInit+0x4c>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_MspInit+0x4c>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_MspInit+0x4c>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	f06f 0001 	mvn.w	r0, #1
 80010fa:	f001 fcf5 	bl	8002ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ac      	sub	sp, #176	; 0xb0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2288      	movs	r2, #136	; 0x88
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fd17 	bl	8008b60 <memset>
  if(hadc->Instance==ADC1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <HAL_ADC_MspInit+0xc8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d147      	bne.n	80011cc <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800113c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001140:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001142:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800114e:	2301      	movs	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001152:	2308      	movs	r3, #8
 8001154:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001156:	2307      	movs	r3, #7
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fd13 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001178:	f7ff ff9a 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_ADC_MspInit+0xcc>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0xcc>)
 8001182:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0xcc>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_ADC_MspInit+0xcc>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0xcc>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_ADC_MspInit+0xcc>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011b2:	230b      	movs	r3, #11
 80011b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f001 fcb8 	bl	8002b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	37b0      	adds	r7, #176	; 0xb0
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	50040000 	.word	0x50040000
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ec:	d10c      	bne.n	8001208 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_TIM_Base_MspInit+0x68>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <HAL_TIM_Base_MspInit+0x68>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_TIM_Base_MspInit+0x68>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001206:	e018      	b.n	800123a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_TIM_Base_MspInit+0x6c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d113      	bne.n	800123a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_TIM_Base_MspInit+0x68>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <HAL_TIM_Base_MspInit+0x68>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_TIM_Base_MspInit+0x68>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2105      	movs	r1, #5
 800122e:	201d      	movs	r0, #29
 8001230:	f001 fc5a 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001234:	201d      	movs	r0, #29
 8001236:	f001 fc73 	bl	8002b20 <HAL_NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	40000400 	.word	0x40000400

0800124c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_TIM_MspPostInit+0x64>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d11c      	bne.n	80012a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_TIM_MspPostInit+0x68>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_TIM_MspPostInit+0x68>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_TIM_MspPostInit+0x68>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f001 fc4a 	bl	8002b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40000400 	.word	0x40000400
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2019      	movs	r0, #25
 80012ce:	f001 fc0b 	bl	8002ae8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012d2:	2019      	movs	r0, #25
 80012d4:	f001 fc24 	bl	8002b20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_InitTick+0x9c>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012dc:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_InitTick+0x9c>)
 80012de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e2:	6613      	str	r3, [r2, #96]	; 0x60
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_InitTick+0x9c>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012f0:	f107 0210 	add.w	r2, r7, #16
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fbba 	bl	8003a74 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001300:	f002 fba2 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8001304:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001308:	4a13      	ldr	r2, [pc, #76]	; (8001358 <HAL_InitTick+0xa0>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9b      	lsrs	r3, r3, #18
 8001310:	3b01      	subs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_InitTick+0xa4>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_InitTick+0xa8>)
 8001318:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_InitTick+0xa4>)
 800131c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001320:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_InitTick+0xa4>)
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_InitTick+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_InitTick+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <HAL_InitTick+0xa4>)
 8001336:	f003 f8eb 	bl	8004510 <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d104      	bne.n	800134a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <HAL_InitTick+0xa4>)
 8001342:	f003 f9a5 	bl	8004690 <HAL_TIM_Base_Start_IT>
 8001346:	4603      	mov	r3, r0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	431bde83 	.word	0x431bde83
 800135c:	20001178 	.word	0x20001178
 8001360:	40012c00 	.word	0x40012c00

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001396:	f003 fbe9 	bl	8004b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20001178 	.word	0x20001178

080013a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <TIM3_IRQHandler+0x10>)
 80013aa:	f003 fbdf 	bl	8004b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20001070 	.word	0x20001070

080013b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 80013bc:	f7ff fa88 	bl	80008d0 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 80013c8:	f7ff fa22 	bl	8000810 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f007 fb74 	bl	8008aec <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20018000 	.word	0x20018000
 8001430:	00000400 	.word	0x00000400
 8001434:	20000350 	.word	0x20000350
 8001438:	200011d8 	.word	0x200011d8

0800143c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <SystemInit+0x5c>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <SystemInit+0x5c>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <SystemInit+0x60>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <SystemInit+0x60>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <SystemInit+0x60>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <SystemInit+0x60>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0d      	ldr	r2, [pc, #52]	; (800149c <SystemInit+0x60>)
 8001468:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800146c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001470:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <SystemInit+0x60>)
 8001474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001478:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <SystemInit+0x60>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <SystemInit+0x60>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <SystemInit+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	40021000 	.word	0x40021000

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff ffca 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014aa:	e003      	b.n	80014b4 <LoopCopyDataInit>

080014ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014b2:	3104      	adds	r1, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014bc:	d3f6      	bcc.n	80014ac <CopyDataInit>
	ldr	r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014c0:	e002      	b.n	80014c8 <LoopFillZerobss>

080014c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014c4:	f842 3b04 	str.w	r3, [r2], #4

080014c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LoopForever+0x16>)
	cmp	r2, r3
 80014ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014cc:	d3f9      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f007 fb13 	bl	8008af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff fa5d 	bl	8000990 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014dc:	080095b8 	.word	0x080095b8
	ldr	r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014e4:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80014e8:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80014ec:	200011d8 	.word	0x200011d8

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_Init+0x3c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_Init+0x3c>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	2003      	movs	r0, #3
 800150c:	f001 fae1 	bl	8002ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001510:	200f      	movs	r0, #15
 8001512:	f7ff fed1 	bl	80012b8 <HAL_InitTick>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	e001      	b.n	8001526 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001522:	f7ff fdcb 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000000c 	.word	0x2000000c
 8001558:	200011c4 	.word	0x200011c4

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	200011c4 	.word	0x200011c4

08001574 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	609a      	str	r2, [r3, #8]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3360      	adds	r3, #96	; 0x60
 80015ee:	461a      	mov	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <LL_ADC_SetOffset+0x44>)
 80015fe:	4013      	ands	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	4313      	orrs	r3, r2
 800160c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001614:	bf00      	nop
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	03fff000 	.word	0x03fff000

08001624 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3360      	adds	r3, #96	; 0x60
 8001632:	461a      	mov	r2, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3360      	adds	r3, #96	; 0x60
 8001660:	461a      	mov	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3330      	adds	r3, #48	; 0x30
 80016bc:	461a      	mov	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	4413      	add	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	211f      	movs	r1, #31
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0e9b      	lsrs	r3, r3, #26
 80016e4:	f003 011f 	and.w	r1, r3, #31
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	431a      	orrs	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016f8:	bf00      	nop
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3314      	adds	r3, #20
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	0e5b      	lsrs	r3, r3, #25
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	0d1b      	lsrs	r3, r3, #20
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2107      	movs	r1, #7
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	401a      	ands	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	0d1b      	lsrs	r3, r3, #20
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0318 	and.w	r3, r3, #24
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001780:	40d9      	lsrs	r1, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	400b      	ands	r3, r1
 8001786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178a:	431a      	orrs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	0007ffff 	.word	0x0007ffff

080017a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 031f 	and.w	r3, r3, #31
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6093      	str	r3, [r2, #8]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001814:	d101      	bne.n	800181a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800183c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001864:	d101      	bne.n	800186a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <LL_ADC_IsEnabled+0x18>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <LL_ADC_IsEnabled+0x1a>
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018da:	f043 0204 	orr.w	r2, r3, #4
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d101      	bne.n	8001906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b08      	cmp	r3, #8
 8001926:	d101      	bne.n	800192c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e136      	b.n	8001bc4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fbd1 	bl	800110c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff3f 	bl	8001800 <LL_ADC_IsDeepPowerDownEnabled>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff25 	bl	80017dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff5a 	bl	8001850 <LL_ADC_IsInternalRegulatorEnabled>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d115      	bne.n	80019ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff3e 	bl	8001828 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019ac:	4b87      	ldr	r3, [pc, #540]	; (8001bcc <HAL_ADC_Init+0x290>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	4a87      	ldr	r2, [pc, #540]	; (8001bd0 <HAL_ADC_Init+0x294>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	3301      	adds	r3, #1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff3c 	bl	8001850 <LL_ADC_IsInternalRegulatorEnabled>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	f043 0210 	orr.w	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff75 	bl	80018ee <LL_ADC_REG_IsConversionOngoing>
 8001a04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 80cf 	bne.w	8001bb2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 80cb 	bne.w	8001bb2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a24:	f043 0202 	orr.w	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff35 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d115      	bne.n	8001a68 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a3c:	4865      	ldr	r0, [pc, #404]	; (8001bd4 <HAL_ADC_Init+0x298>)
 8001a3e:	f7ff ff2f 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a42:	4604      	mov	r4, r0
 8001a44:	4864      	ldr	r0, [pc, #400]	; (8001bd8 <HAL_ADC_Init+0x29c>)
 8001a46:	f7ff ff2b 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	4863      	ldr	r0, [pc, #396]	; (8001bdc <HAL_ADC_Init+0x2a0>)
 8001a50:	f7ff ff26 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4323      	orrs	r3, r4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4619      	mov	r1, r3
 8001a62:	485f      	ldr	r0, [pc, #380]	; (8001be0 <HAL_ADC_Init+0x2a4>)
 8001a64:	f7ff fd86 	bl	8001574 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7e5b      	ldrb	r3, [r3, #25]
 8001a6c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a72:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a78:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a7e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a86:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d106      	bne.n	8001aa4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	045b      	lsls	r3, r3, #17
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_ADC_Init+0x2a8>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff08 	bl	80018ee <LL_ADC_REG_IsConversionOngoing>
 8001ade:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff15 	bl	8001914 <LL_ADC_INJ_IsConversionOngoing>
 8001aea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d13d      	bne.n	8001b6e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d13a      	bne.n	8001b6e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001afc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b04:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b14:	f023 0302 	bic.w	r3, r3, #2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	69b9      	ldr	r1, [r7, #24]
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d118      	bne.n	8001b5e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b36:	f023 0304 	bic.w	r3, r3, #4
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b42:	4311      	orrs	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	e007      	b.n	8001b6e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10c      	bne.n	8001b90 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f023 010f 	bic.w	r1, r3, #15
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b8e:	e007      	b.n	8001ba0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 020f 	bic.w	r2, r2, #15
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f023 0303 	bic.w	r3, r3, #3
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
 8001bb0:	e007      	b.n	8001bc2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3724      	adds	r7, #36	; 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	053e2d63 	.word	0x053e2d63
 8001bd4:	50040000 	.word	0x50040000
 8001bd8:	50040100 	.word	0x50040100
 8001bdc:	50040200 	.word	0x50040200
 8001be0:	50040300 	.word	0x50040300
 8001be4:	fff0c007 	.word	0xfff0c007

08001be8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bf0:	4857      	ldr	r0, [pc, #348]	; (8001d50 <HAL_ADC_Start+0x168>)
 8001bf2:	f7ff fdd7 	bl	80017a4 <LL_ADC_GetMultimode>
 8001bf6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fe76 	bl	80018ee <LL_ADC_REG_IsConversionOngoing>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f040 809c 	bne.w	8001d42 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_Start+0x30>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e097      	b.n	8001d48 <HAL_ADC_Start+0x160>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fd71 	bl	8002708 <ADC_Enable>
 8001c26:	4603      	mov	r3, r0
 8001c28:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 8083 	bne.w	8001d38 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a42      	ldr	r2, [pc, #264]	; (8001d54 <HAL_ADC_Start+0x16c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d002      	beq.n	8001c56 <HAL_ADC_Start+0x6e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	e000      	b.n	8001c58 <HAL_ADC_Start+0x70>
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <HAL_ADC_Start+0x170>)
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d002      	beq.n	8001c66 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7e:	d106      	bne.n	8001c8e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f023 0206 	bic.w	r2, r3, #6
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c8c:	e002      	b.n	8001c94 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	221c      	movs	r2, #28
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <HAL_ADC_Start+0x16c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d002      	beq.n	8001cb4 <HAL_ADC_Start+0xcc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	e000      	b.n	8001cb6 <HAL_ADC_Start+0xce>
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_ADC_Start+0x170>)
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d008      	beq.n	8001cd0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d002      	beq.n	8001cd0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b09      	cmp	r3, #9
 8001cce:	d114      	bne.n	8001cfa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ce6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fde7 	bl	80018c6 <LL_ADC_REG_StartConversion>
 8001cf8:	e025      	b.n	8001d46 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_ADC_Start+0x16c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d002      	beq.n	8001d16 <HAL_ADC_Start+0x12e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_Start+0x130>
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_ADC_Start+0x170>)
 8001d18:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00f      	beq.n	8001d46 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
 8001d36:	e006      	b.n	8001d46 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d40:	e001      	b.n	8001d46 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d42:	2302      	movs	r3, #2
 8001d44:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	50040300 	.word	0x50040300
 8001d54:	50040100 	.word	0x50040100
 8001d58:	50040000 	.word	0x50040000

08001d5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d66:	4866      	ldr	r0, [pc, #408]	; (8001f00 <HAL_ADC_PollForConversion+0x1a4>)
 8001d68:	f7ff fd1c 	bl	80017a4 <LL_ADC_GetMultimode>
 8001d6c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d102      	bne.n	8001d7c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d76:	2308      	movs	r3, #8
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e02a      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d002      	beq.n	8001d8e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	d111      	bne.n	8001db2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0a4      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001dac:	2304      	movs	r3, #4
 8001dae:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001db0:	e00f      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001db2:	4853      	ldr	r0, [pc, #332]	; (8001f00 <HAL_ADC_PollForConversion+0x1a4>)
 8001db4:	f7ff fd04 	bl	80017c0 <LL_ADC_GetMultiDMATransfer>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e093      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001dce:	2304      	movs	r3, #4
 8001dd0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dd2:	f7ff fbc3 	bl	800155c <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dd8:	e021      	b.n	8001e1e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de0:	d01d      	beq.n	8001e1e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001de2:	f7ff fbbb 	bl	800155c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d302      	bcc.n	8001df8 <HAL_ADC_PollForConversion+0x9c>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d112      	bne.n	8001e1e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e06b      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0d6      	beq.n	8001dda <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fc22 	bl	8001686 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e5b      	ldrb	r3, [r3, #25]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d118      	bne.n	8001e82 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d111      	bne.n	8001e82 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_ADC_PollForConversion+0x1a8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d002      	beq.n	8001e92 <HAL_ADC_PollForConversion+0x136>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	e000      	b.n	8001e94 <HAL_ADC_PollForConversion+0x138>
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_ADC_PollForConversion+0x1ac>)
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d008      	beq.n	8001eae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d002      	beq.n	8001eae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d104      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e00c      	b.n	8001ed2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_ADC_PollForConversion+0x1a8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d002      	beq.n	8001ec8 <HAL_ADC_PollForConversion+0x16c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e000      	b.n	8001eca <HAL_ADC_PollForConversion+0x16e>
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_ADC_PollForConversion+0x1ac>)
 8001eca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d104      	bne.n	8001ee2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2208      	movs	r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e008      	b.n	8001ef4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	220c      	movs	r2, #12
 8001ef2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	50040300 	.word	0x50040300
 8001f04:	50040100 	.word	0x50040100
 8001f08:	50040000 	.word	0x50040000

08001f0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b6      	sub	sp, #216	; 0xd8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x22>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e3c7      	b.n	80026da <HAL_ADC_ConfigChannel+0x7b2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fcc9 	bl	80018ee <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 83a8 	bne.w	80026b4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d824      	bhi.n	8001fb6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	3b02      	subs	r3, #2
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d81b      	bhi.n	8001fae <HAL_ADC_ConfigChannel+0x86>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <HAL_ADC_ConfigChannel+0x54>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001f8d 	.word	0x08001f8d
 8001f80:	08001f95 	.word	0x08001f95
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001fa5 	.word	0x08001fa5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	220c      	movs	r2, #12
 8001f90:	605a      	str	r2, [r3, #4]
          break;
 8001f92:	e011      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2212      	movs	r2, #18
 8001f98:	605a      	str	r2, [r3, #4]
          break;
 8001f9a:	e00d      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2218      	movs	r2, #24
 8001fa0:	605a      	str	r2, [r3, #4]
          break;
 8001fa2:	e009      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001faa:	605a      	str	r2, [r3, #4]
          break;
 8001fac:	e004      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	605a      	str	r2, [r3, #4]
          break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001fb6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f7ff fb71 	bl	80016ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc8d 	bl	80018ee <LL_ADC_REG_IsConversionOngoing>
 8001fd4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fc99 	bl	8001914 <LL_ADC_INJ_IsConversionOngoing>
 8001fe2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 81a6 	bne.w	800233c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 81a1 	bne.w	800233c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	461a      	mov	r2, r3
 8002008:	f7ff fb7c 	bl	8001704 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b04      	cmp	r3, #4
 800202c:	d00a      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6919      	ldr	r1, [r3, #16]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800203e:	f7ff facd 	bl	80015dc <LL_ADC_SetOffset>
 8002042:	e17b      	b.n	800233c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff faea 	bl	8001624 <LL_ADC_GetOffsetChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x148>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fadf 	bl	8001624 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	e01e      	b.n	80020ae <HAL_ADC_ConfigChannel+0x186>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fad4 	bl	8001624 <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800208e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800209e:	2320      	movs	r3, #32
 80020a0:	e004      	b.n	80020ac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80020a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x19e>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	e018      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1d0>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80020ea:	2320      	movs	r3, #32
 80020ec:	e004      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80020ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d106      	bne.n	800210a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff faa3 	bl	8001650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fa87 	bl	8001624 <LL_ADC_GetOffsetChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10a      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x20e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fa7c 	bl	8001624 <LL_ADC_GetOffsetChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	0e9b      	lsrs	r3, r3, #26
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	e01e      	b.n	8002174 <HAL_ADC_ConfigChannel+0x24c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fa71 	bl	8001624 <LL_ADC_GetOffsetChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002154:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800215c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e004      	b.n	8002172 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_ConfigChannel+0x264>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0e9b      	lsrs	r3, r3, #26
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	e018      	b.n	80021be <HAL_ADC_ConfigChannel+0x296>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e004      	b.n	80021be <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80021b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021be:	429a      	cmp	r2, r3
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	2101      	movs	r1, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fa40 	bl	8001650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2102      	movs	r1, #2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fa24 	bl	8001624 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x2d4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fa19 	bl	8001624 <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	e01e      	b.n	800223a <HAL_ADC_ConfigChannel+0x312>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fa0e 	bl	8001624 <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800221a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800221e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800222e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x32a>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	e016      	b.n	8002280 <HAL_ADC_ConfigChannel+0x358>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800226a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002272:	2320      	movs	r3, #32
 8002274:	e004      	b.n	8002280 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002280:	429a      	cmp	r2, r3
 8002282:	d106      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	2102      	movs	r1, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f9df 	bl	8001650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2103      	movs	r1, #3
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f9c3 	bl	8001624 <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <HAL_ADC_ConfigChannel+0x396>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2103      	movs	r1, #3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f9b8 	bl	8001624 <LL_ADC_GetOffsetChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	e017      	b.n	80022ee <HAL_ADC_ConfigChannel+0x3c6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2103      	movs	r1, #3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f9ad 	bl	8001624 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80022e0:	2320      	movs	r3, #32
 80022e2:	e003      	b.n	80022ec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80022e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x3de>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	e011      	b.n	800232a <HAL_ADC_ConfigChannel+0x402>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002316:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e003      	b.n	800232a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800232a:	429a      	cmp	r2, r3
 800232c:	d106      	bne.n	800233c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	2103      	movs	r1, #3
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f98a 	bl	8001650 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff faad 	bl	80018a0 <LL_ADC_IsEnabled>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 813f 	bne.w	80025cc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff f9fe 	bl	800175c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a8e      	ldr	r2, [pc, #568]	; (80025a0 <HAL_ADC_ConfigChannel+0x678>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f040 8130 	bne.w	80025cc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x46c>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	3301      	adds	r3, #1
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	2b09      	cmp	r3, #9
 800238a:	bf94      	ite	ls
 800238c:	2301      	movls	r3, #1
 800238e:	2300      	movhi	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e019      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x4a0>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80023ac:	2320      	movs	r3, #32
 80023ae:	e003      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80023b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	2b09      	cmp	r3, #9
 80023c0:	bf94      	ite	ls
 80023c2:	2301      	movls	r3, #1
 80023c4:	2300      	movhi	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d079      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x4c0>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	069b      	lsls	r3, r3, #26
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e6:	e015      	b.n	8002414 <HAL_ADC_ConfigChannel+0x4ec>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x50c>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	3301      	adds	r3, #1
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	e017      	b.n	8002464 <HAL_ADC_ConfigChannel+0x53c>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002444:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	ea42 0103 	orr.w	r1, r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x562>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	3301      	adds	r3, #1
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	051b      	lsls	r3, r3, #20
 8002488:	e018      	b.n	80024bc <HAL_ADC_ConfigChannel+0x594>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e003      	b.n	80024ae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80024a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024bc:	430b      	orrs	r3, r1
 80024be:	e080      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x5b4>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	069b      	lsls	r3, r3, #26
 80024d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	e015      	b.n	8002508 <HAL_ADC_ConfigChannel+0x5e0>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x600>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	3301      	adds	r3, #1
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	e017      	b.n	8002558 <HAL_ADC_ConfigChannel+0x630>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	61fb      	str	r3, [r7, #28]
  return result;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	ea42 0103 	orr.w	r1, r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10d      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x65c>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	3b1e      	subs	r3, #30
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002582:	e01d      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x698>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	613b      	str	r3, [r7, #16]
  return result;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e005      	b.n	80025ac <HAL_ADC_ConfigChannel+0x684>
 80025a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 021f 	and.w	r2, r3, #31
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	3b1e      	subs	r3, #30
 80025ba:	051b      	lsls	r3, r3, #20
 80025bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	430b      	orrs	r3, r1
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	6892      	ldr	r2, [r2, #8]
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7ff f89c 	bl	8001704 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d07a      	beq.n	80026ce <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d8:	4843      	ldr	r0, [pc, #268]	; (80026e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80025da:	f7fe fff1 	bl	80015c0 <LL_ADC_GetCommonPathInternalCh>
 80025de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a41      	ldr	r2, [pc, #260]	; (80026ec <HAL_ADC_ConfigChannel+0x7c4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d12c      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d126      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a3c      	ldr	r2, [pc, #240]	; (80026f0 <HAL_ADC_ConfigChannel+0x7c8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_ADC_ConfigChannel+0x6e4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d15d      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800260c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002614:	4619      	mov	r1, r3
 8002616:	4834      	ldr	r0, [pc, #208]	; (80026e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002618:	f7fe ffbf 	bl	800159a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_ADC_ConfigChannel+0x7d0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	4a36      	ldr	r2, [pc, #216]	; (80026fc <HAL_ADC_ConfigChannel+0x7d4>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002636:	e002      	b.n	800263e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3b01      	subs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002644:	e040      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2d      	ldr	r2, [pc, #180]	; (8002700 <HAL_ADC_ConfigChannel+0x7d8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d118      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x75a>
 8002650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d112      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x748>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_ADC_ConfigChannel+0x7cc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d12d      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002678:	4619      	mov	r1, r3
 800267a:	481b      	ldr	r0, [pc, #108]	; (80026e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800267c:	f7fe ff8d 	bl	800159a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002680:	e024      	b.n	80026cc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_ADC_ConfigChannel+0x7dc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d120      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800268c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d11a      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <HAL_ADC_ConfigChannel+0x7c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d115      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026aa:	4619      	mov	r1, r3
 80026ac:	480e      	ldr	r0, [pc, #56]	; (80026e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80026ae:	f7fe ff74 	bl	800159a <LL_ADC_SetCommonPathInternalCh>
 80026b2:	e00c      	b.n	80026ce <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80026c6:	e002      	b.n	80026ce <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c8:	bf00      	nop
 80026ca:	e000      	b.n	80026ce <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	37d8      	adds	r7, #216	; 0xd8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	80080000 	.word	0x80080000
 80026e8:	50040300 	.word	0x50040300
 80026ec:	c7520000 	.word	0xc7520000
 80026f0:	50040000 	.word	0x50040000
 80026f4:	50040200 	.word	0x50040200
 80026f8:	20000004 	.word	0x20000004
 80026fc:	053e2d63 	.word	0x053e2d63
 8002700:	cb840000 	.word	0xcb840000
 8002704:	80000001 	.word	0x80000001

08002708 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f8c3 	bl	80018a0 <LL_ADC_IsEnabled>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d14d      	bne.n	80027bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <ADC_Enable+0xc0>)
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e039      	b.n	80027be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f892 	bl	8001878 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002754:	f7fe ff02 	bl	800155c <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800275a:	e028      	b.n	80027ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f89d 	bl	80018a0 <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f881 	bl	8001878 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002776:	f7fe fef1 	bl	800155c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d914      	bls.n	80027ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d00d      	beq.n	80027ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0210 	orr.w	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e007      	b.n	80027be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d1cf      	bne.n	800275c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	8000003f 	.word	0x8000003f

080027cc <LL_ADC_IsEnabled>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <LL_ADC_IsEnabled+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_IsEnabled+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d101      	bne.n	800280a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b09f      	sub	sp, #124	; 0x7c
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e093      	b.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800283e:	2300      	movs	r3, #0
 8002840:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002842:	2300      	movs	r3, #0
 8002844:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a47      	ldr	r2, [pc, #284]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e001      	b.n	800285a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e072      	b.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ffb9 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 8002880:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffb3 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d154      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002894:	2b00      	cmp	r3, #0
 8002896:	d151      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800289a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02c      	beq.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028b6:	035b      	lsls	r3, r3, #13
 80028b8:	430b      	orrs	r3, r1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c0:	4829      	ldr	r0, [pc, #164]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028c2:	f7ff ff83 	bl	80027cc <LL_ADC_IsEnabled>
 80028c6:	4604      	mov	r4, r0
 80028c8:	4828      	ldr	r0, [pc, #160]	; (800296c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028ca:	f7ff ff7f 	bl	80027cc <LL_ADC_IsEnabled>
 80028ce:	4603      	mov	r3, r0
 80028d0:	431c      	orrs	r4, r3
 80028d2:	4828      	ldr	r0, [pc, #160]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028d4:	f7ff ff7a 	bl	80027cc <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	4323      	orrs	r3, r4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d137      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028e8:	f023 030f 	bic.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	6811      	ldr	r1, [r2, #0]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028fc:	e028      	b.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290a:	4817      	ldr	r0, [pc, #92]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800290c:	f7ff ff5e 	bl	80027cc <LL_ADC_IsEnabled>
 8002910:	4604      	mov	r4, r0
 8002912:	4816      	ldr	r0, [pc, #88]	; (800296c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002914:	f7ff ff5a 	bl	80027cc <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	431c      	orrs	r4, r3
 800291c:	4815      	ldr	r0, [pc, #84]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800291e:	f7ff ff55 	bl	80027cc <LL_ADC_IsEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	4323      	orrs	r3, r4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d112      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800292a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002932:	f023 030f 	bic.w	r3, r3, #15
 8002936:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002938:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800293a:	e009      	b.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800294e:	e000      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002950:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800295a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800295e:	4618      	mov	r0, r3
 8002960:	377c      	adds	r7, #124	; 0x7c
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	50040000 	.word	0x50040000
 800296c:	50040100 	.word	0x50040100
 8002970:	50040300 	.word	0x50040300
 8002974:	50040200 	.word	0x50040200

08002978 <__NVIC_SetPriorityGrouping>:
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff4c 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002afa:	f7ff ff61 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002afe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	6978      	ldr	r0, [r7, #20]
 8002b06:	f7ff ffb1 	bl	8002a6c <NVIC_EncodePriority>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff80 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b18:	bf00      	nop
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff54 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4a:	e17f      	b.n	8002e4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8171 	beq.w	8002e46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d00b      	beq.n	8002b84 <HAL_GPIO_Init+0x48>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d007      	beq.n	8002b84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b78:	2b11      	cmp	r3, #17
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d130      	bne.n	8002be6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bba:	2201      	movs	r2, #1
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 0201 	and.w	r2, r3, #1
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d118      	bne.n	8002c24 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 0201 	and.w	r2, r3, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x128>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b12      	cmp	r3, #18
 8002c62:	d123      	bne.n	8002cac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	6939      	ldr	r1, [r7, #16]
 8002ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0203 	and.w	r2, r3, #3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80ac 	beq.w	8002e46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_GPIO_Init+0x330>)
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_GPIO_Init+0x330>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <HAL_GPIO_Init+0x330>)
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d06:	4a5a      	ldr	r2, [pc, #360]	; (8002e70 <HAL_GPIO_Init+0x334>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x242>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4f      	ldr	r2, [pc, #316]	; (8002e74 <HAL_GPIO_Init+0x338>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x23e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4e      	ldr	r2, [pc, #312]	; (8002e78 <HAL_GPIO_Init+0x33c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x23a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4d      	ldr	r2, [pc, #308]	; (8002e7c <HAL_GPIO_Init+0x340>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x236>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4c      	ldr	r2, [pc, #304]	; (8002e80 <HAL_GPIO_Init+0x344>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x232>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4b      	ldr	r2, [pc, #300]	; (8002e84 <HAL_GPIO_Init+0x348>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x22e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_GPIO_Init+0x34c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x22a>
 8002d62:	2306      	movs	r3, #6
 8002d64:	e00c      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e00a      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	e008      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	f002 0203 	and.w	r2, r2, #3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d90:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_GPIO_Init+0x334>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002dc8:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e40:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa22 f303 	lsr.w	r3, r2, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f47f ae78 	bne.w	8002b4c <HAL_GPIO_Init+0x10>
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40010000 	.word	0x40010000
 8002e74:	48000400 	.word	0x48000400
 8002e78:	48000800 	.word	0x48000800
 8002e7c:	48000c00 	.word	0x48000c00
 8002e80:	48001000 	.word	0x48001000
 8002e84:	48001400 	.word	0x48001400
 8002e88:	48001800 	.word	0x48001800
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eac:	e002      	b.n	8002eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40007000 	.word	0x40007000

08002edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eea:	d130      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef8:	d038      	beq.n	8002f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2232      	movs	r2, #50	; 0x32
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0c9b      	lsrs	r3, r3, #18
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f20:	e002      	b.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f34:	d102      	bne.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f2      	bne.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d110      	bne.n	8002f6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e00f      	b.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5a:	d007      	beq.n	8002f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f64:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	20000004 	.word	0x20000004
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e3d4      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9a:	4ba1      	ldr	r3, [pc, #644]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa4:	4b9e      	ldr	r3, [pc, #632]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80e4 	beq.w	8003184 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x4a>
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	f040 808b 	bne.w	80030e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 8087 	bne.w	80030e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fd2:	4b93      	ldr	r3, [pc, #588]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x62>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e3ac      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_RCC_OscConfig+0x7c>
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003002:	e005      	b.n	8003010 <HAL_RCC_OscConfig+0x88>
 8003004:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003010:	4293      	cmp	r3, r2
 8003012:	d223      	bcs.n	800305c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fd5d 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e38d      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	4b7d      	ldr	r3, [pc, #500]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a7c      	ldr	r2, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4977      	ldr	r1, [pc, #476]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	4972      	ldr	r1, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	e025      	b.n	80030a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305c:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6f      	ldr	r2, [pc, #444]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003062:	f043 0308 	orr.w	r3, r3, #8
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	496a      	ldr	r1, [pc, #424]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307a:	4b69      	ldr	r3, [pc, #420]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	4965      	ldr	r1, [pc, #404]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fd1d 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e34d      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030a8:	f000 fc36 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	495a      	ldr	r1, [pc, #360]	; (8003224 <HAL_RCC_OscConfig+0x29c>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_OscConfig+0x2a0>)
 80030c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030c8:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCC_OscConfig+0x2a4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe f8f3 	bl	80012b8 <HAL_InitTick>
 80030d2:	4603      	mov	r3, r0
 80030d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d052      	beq.n	8003182 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	e331      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d032      	beq.n	800314e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030e8:	4b4d      	ldr	r3, [pc, #308]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fa32 	bl	800155c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fc:	f7fe fa2e 	bl	800155c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e31a      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800310e:	4b44      	ldr	r3, [pc, #272]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003120:	f043 0308 	orr.w	r3, r3, #8
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	493b      	ldr	r1, [pc, #236]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	4936      	ldr	r1, [pc, #216]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
 800314c:	e01a      	b.n	8003184 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a33      	ldr	r2, [pc, #204]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800315a:	f7fe f9ff 	bl	800155c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003162:	f7fe f9fb 	bl	800155c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e2e7      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x1da>
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003182:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d074      	beq.n	800327a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x21a>
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d10e      	bne.n	80031ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d10b      	bne.n	80031ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a2:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d064      	beq.n	8003278 <HAL_RCC_OscConfig+0x2f0>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d160      	bne.n	8003278 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e2c4      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x24a>
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e01d      	b.n	800320e <HAL_RCC_OscConfig+0x286>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031da:	d10c      	bne.n	80031f6 <HAL_RCC_OscConfig+0x26e>
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e00b      	b.n	800320e <HAL_RCC_OscConfig+0x286>
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a06      	ldr	r2, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x298>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01c      	beq.n	8003250 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe f9a1 	bl	800155c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321c:	e011      	b.n	8003242 <HAL_RCC_OscConfig+0x2ba>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	080094d4 	.word	0x080094d4
 8003228:	20000004 	.word	0x20000004
 800322c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe f994 	bl	800155c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e280      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	4baf      	ldr	r3, [pc, #700]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x2a8>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe f984 	bl	800155c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7fe f980 	bl	800155c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e26c      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326a:	4ba5      	ldr	r3, [pc, #660]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x2d0>
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d060      	beq.n	8003348 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d005      	beq.n	8003298 <HAL_RCC_OscConfig+0x310>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d119      	bne.n	80032c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d116      	bne.n	80032c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	4b99      	ldr	r3, [pc, #612]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x328>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e249      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b93      	ldr	r3, [pc, #588]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	4990      	ldr	r1, [pc, #576]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c4:	e040      	b.n	8003348 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d023      	beq.n	8003316 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ce:	4b8c      	ldr	r3, [pc, #560]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a8b      	ldr	r2, [pc, #556]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe f93f 	bl	800155c <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe f93b 	bl	800155c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e227      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f4:	4b82      	ldr	r3, [pc, #520]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	497c      	ldr	r1, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
 8003314:	e018      	b.n	8003348 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003316:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a79      	ldr	r2, [pc, #484]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800331c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe f91b 	bl	800155c <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332a:	f7fe f917 	bl	800155c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e203      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333c:	4b70      	ldr	r3, [pc, #448]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d03c      	beq.n	80033ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01c      	beq.n	8003396 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335c:	4b68      	ldr	r3, [pc, #416]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	4a67      	ldr	r2, [pc, #412]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe f8f6 	bl	800155c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe f8f2 	bl	800155c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1de      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003386:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ef      	beq.n	8003374 <HAL_RCC_OscConfig+0x3ec>
 8003394:	e01b      	b.n	80033ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003396:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fe f8d9 	bl	800155c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fe f8d5 	bl	800155c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1c1      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ef      	bne.n	80033ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80a6 	beq.w	8003528 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033e0:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b44      	ldr	r3, [pc, #272]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	4a43      	ldr	r2, [pc, #268]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6593      	str	r3, [r2, #88]	; 0x58
 80033f8:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <HAL_RCC_OscConfig+0x57c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d118      	bne.n	8003446 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003414:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x57c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3a      	ldr	r2, [pc, #232]	; (8003504 <HAL_RCC_OscConfig+0x57c>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003420:	f7fe f89c 	bl	800155c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fe f898 	bl	800155c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e184      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_RCC_OscConfig+0x57c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d108      	bne.n	8003460 <HAL_RCC_OscConfig+0x4d8>
 800344e:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345e:	e024      	b.n	80034aa <HAL_RCC_OscConfig+0x522>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d110      	bne.n	800348a <HAL_RCC_OscConfig+0x502>
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	4a24      	ldr	r2, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	4a20      	ldr	r2, [pc, #128]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003488:	e00f      	b.n	80034aa <HAL_RCC_OscConfig+0x522>
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80034a2:	f023 0304 	bic.w	r3, r3, #4
 80034a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fe f853 	bl	800155c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe f84f 	bl	800155c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e139      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x578>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ed      	beq.n	80034ba <HAL_RCC_OscConfig+0x532>
 80034de:	e01a      	b.n	8003516 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe f83c 	bl	800155c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e6:	e00f      	b.n	8003508 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe f838 	bl	800155c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d906      	bls.n	8003508 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e122      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003508:	4b90      	ldr	r3, [pc, #576]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e8      	bne.n	80034e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003516:	7ffb      	ldrb	r3, [r7, #31]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351c:	4b8b      	ldr	r3, [pc, #556]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	4a8a      	ldr	r2, [pc, #552]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003526:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8108 	beq.w	8003742 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	2b02      	cmp	r3, #2
 8003538:	f040 80d0 	bne.w	80036dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800353c:	4b83      	ldr	r3, [pc, #524]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0203 	and.w	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d130      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	3b01      	subs	r3, #1
 800355c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d127      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d11f      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800357c:	2a07      	cmp	r2, #7
 800357e:	bf14      	ite	ne
 8003580:	2201      	movne	r2, #1
 8003582:	2200      	moveq	r2, #0
 8003584:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003586:	4293      	cmp	r3, r2
 8003588:	d113      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	3b01      	subs	r3, #1
 8003598:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d06e      	beq.n	8003690 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d069      	beq.n	800368c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035b8:	4b64      	ldr	r3, [pc, #400]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035c4:	4b61      	ldr	r3, [pc, #388]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0b7      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035d4:	4b5d      	ldr	r3, [pc, #372]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5c      	ldr	r2, [pc, #368]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e0:	f7fd ffbc 	bl	800155c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fd ffb8 	bl	800155c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0a4      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003606:	4b51      	ldr	r3, [pc, #324]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <HAL_RCC_OscConfig+0x7c8>)
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003616:	3a01      	subs	r2, #1
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	4311      	orrs	r1, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003620:	0212      	lsls	r2, r2, #8
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003628:	0852      	lsrs	r2, r2, #1
 800362a:	3a01      	subs	r2, #1
 800362c:	0552      	lsls	r2, r2, #21
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003634:	0852      	lsrs	r2, r2, #1
 8003636:	3a01      	subs	r2, #1
 8003638:	0652      	lsls	r2, r2, #25
 800363a:	4311      	orrs	r1, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003640:	0912      	lsrs	r2, r2, #4
 8003642:	0452      	lsls	r2, r2, #17
 8003644:	430a      	orrs	r2, r1
 8003646:	4941      	ldr	r1, [pc, #260]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800364c:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a3e      	ldr	r2, [pc, #248]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003656:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a3b      	ldr	r2, [pc, #236]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003662:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003664:	f7fd ff7a 	bl	800155c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fd ff76 	bl	800155c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e062      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	4b33      	ldr	r3, [pc, #204]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800368a:	e05a      	b.n	8003742 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e059      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d152      	bne.n	8003742 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b4:	f7fd ff52 	bl	800155c <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fd ff4e 	bl	800155c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e03a      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x734>
 80036da:	e032      	b.n	8003742 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d02d      	beq.n	800373e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a19      	ldr	r2, [pc, #100]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003700:	f023 0303 	bic.w	r3, r3, #3
 8003704:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 800370c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003714:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fd ff21 	bl	800155c <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371e:	f7fd ff1d 	bl	800155c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e009      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCC_OscConfig+0x7c4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_OscConfig+0x796>
 800373c:	e001      	b.n	8003742 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	f99d808c 	.word	0xf99d808c

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0c8      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d910      	bls.n	8003798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4961      	ldr	r1, [pc, #388]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b5f      	ldr	r3, [pc, #380]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0b0      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d04c      	beq.n	800383e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ac:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d121      	bne.n	80037fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e09e      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d115      	bne.n	80037fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e092      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037dc:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e086      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ec:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e07e      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 0203 	bic.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	493f      	ldr	r1, [pc, #252]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd fea5 	bl	800155c <HAL_GetTick>
 8003812:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003814:	e00a      	b.n	800382c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003816:	f7fd fea1 	bl	800155c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e066      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382c:	4b36      	ldr	r3, [pc, #216]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 020c 	and.w	r2, r3, #12
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	429a      	cmp	r2, r3
 800383c:	d1eb      	bne.n	8003816 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384a:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	492c      	ldr	r1, [pc, #176]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d210      	bcs.n	800388c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0207 	bic.w	r2, r3, #7
 8003872:	4924      	ldr	r1, [pc, #144]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x1b0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e036      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4918      	ldr	r1, [pc, #96]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4910      	ldr	r1, [pc, #64]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ca:	f000 f825 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <HAL_RCC_ClockConfig+0x1b4>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	490c      	ldr	r1, [pc, #48]	; (800390c <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	5ccb      	ldrb	r3, [r1, r3]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fce2 	bl	80012b8 <HAL_InitTick>
 80038f4:	4603      	mov	r3, r0
 80038f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038f8:	7afb      	ldrb	r3, [r7, #11]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40022000 	.word	0x40022000
 8003908:	40021000 	.word	0x40021000
 800390c:	080094d4 	.word	0x080094d4
 8003910:	20000004 	.word	0x20000004
 8003914:	20000008 	.word	0x20000008

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003926:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003930:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x34>
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d121      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d11e      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800394c:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d107      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e005      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003968:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003974:	4a2b      	ldr	r2, [pc, #172]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d102      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e004      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800399e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d134      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0xa6>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d003      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0xac>
 80039bc:	e005      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80039c0:	617b      	str	r3, [r7, #20]
      break;
 80039c2:	e005      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80039c6:	617b      	str	r3, [r7, #20]
      break;
 80039c8:	e002      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	617b      	str	r3, [r7, #20]
      break;
 80039ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	3301      	adds	r3, #1
 80039dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	fb02 f203 	mul.w	r2, r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	0e5b      	lsrs	r3, r3, #25
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	3301      	adds	r3, #1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a10:	69bb      	ldr	r3, [r7, #24]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	080094ec 	.word	0x080094ec
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200

08003a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a4c:	f7ff fff0 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0adb      	lsrs	r3, r3, #11
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4904      	ldr	r1, [pc, #16]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	080094e4 	.word	0x080094e4

08003a74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	220f      	movs	r2, #15
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_RCC_GetClockConfig+0x60>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0207 	and.w	r2, r3, #7
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	601a      	str	r2, [r3, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40022000 	.word	0x40022000

08003ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af0:	f7ff f9e6 	bl	8002ec0 <HAL_PWREx_GetVoltageRange>
 8003af4:	6178      	str	r0, [r7, #20]
 8003af6:	e014      	b.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	; 0x58
 8003b04:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b10:	f7ff f9d6 	bl	8002ec0 <HAL_PWREx_GetVoltageRange>
 8003b14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d10b      	bne.n	8003b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d919      	bls.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2ba0      	cmp	r3, #160	; 0xa0
 8003b34:	d902      	bls.n	8003b3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b36:	2302      	movs	r3, #2
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e013      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e010      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d902      	bls.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b48:	2303      	movs	r3, #3
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e00a      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d102      	bne.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b54:	2302      	movs	r3, #2
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e004      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d101      	bne.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b60:	2301      	movs	r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f023 0207 	bic.w	r2, r3, #7
 8003b6c:	4909      	ldr	r1, [pc, #36]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b74:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40022000 	.word	0x40022000

08003b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d041      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bbc:	d02a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc2:	d824      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bce:	d81e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bda:	e018      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bdc:	4b86      	ldr	r3, [pc, #536]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a85      	ldr	r2, [pc, #532]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be8:	e015      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fabb 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfa:	e00c      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3320      	adds	r3, #32
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fba6 	bl	8004354 <RCCEx_PLLSAI2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	74fb      	strb	r3, [r7, #19]
      break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c1c:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c2a:	4973      	ldr	r1, [pc, #460]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d041      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c4c:	d02a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c52:	d824      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c58:	d008      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5e:	d81e      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c68:	d010      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c6a:	e018      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c6c:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a61      	ldr	r2, [pc, #388]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c78:	e015      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fa73 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c8a:	e00c      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3320      	adds	r3, #32
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fb5e 	bl	8004354 <RCCEx_PLLSAI2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cac:	4b52      	ldr	r3, [pc, #328]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cba:	494f      	ldr	r1, [pc, #316]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80a0 	beq.w	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfc:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3a      	ldr	r2, [pc, #232]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d18:	f7fd fc20 	bl	800155c <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fd fc1c 	bl	800155c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	74fb      	strb	r3, [r7, #19]
        break;
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ef      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d15c      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d46:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01f      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d019      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fd fbdb 	bl	800155c <HAL_GetTick>
 8003da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fbd7 	bl	800155c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d902      	bls.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc0:	e006      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ec      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	4904      	ldr	r1, [pc, #16]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	74bb      	strb	r3, [r7, #18]
 8003df4:	e006      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e04:	7c7b      	ldrb	r3, [r7, #17]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d105      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b9e      	ldr	r3, [pc, #632]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	4a9d      	ldr	r2, [pc, #628]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e22:	4b98      	ldr	r3, [pc, #608]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f023 0203 	bic.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	4994      	ldr	r1, [pc, #592]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e44:	4b8f      	ldr	r3, [pc, #572]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 020c 	bic.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	498c      	ldr	r1, [pc, #560]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e66:	4b87      	ldr	r3, [pc, #540]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	4983      	ldr	r1, [pc, #524]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e88:	4b7e      	ldr	r3, [pc, #504]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	497b      	ldr	r1, [pc, #492]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eaa:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb8:	4972      	ldr	r1, [pc, #456]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ecc:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	496a      	ldr	r1, [pc, #424]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eee:	4b65      	ldr	r3, [pc, #404]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	4961      	ldr	r1, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f10:	4b5c      	ldr	r3, [pc, #368]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	4959      	ldr	r1, [pc, #356]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f32:	4b54      	ldr	r3, [pc, #336]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	4950      	ldr	r1, [pc, #320]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	4948      	ldr	r1, [pc, #288]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f76:	4b43      	ldr	r3, [pc, #268]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	493f      	ldr	r1, [pc, #252]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d028      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f98:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa6:	4937      	ldr	r1, [pc, #220]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb8:	4b32      	ldr	r3, [pc, #200]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a31      	ldr	r2, [pc, #196]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc2:	60d3      	str	r3, [r2, #12]
 8003fc4:	e011      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fce:	d10c      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f8c8 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d028      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	491f      	ldr	r1, [pc, #124]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004014:	d106      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004016:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004020:	60d3      	str	r3, [r2, #12]
 8004022:	e011      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800402c:	d10c      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f899 	bl	800416c <RCCEx_PLLSAI1_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	4908      	ldr	r1, [pc, #32]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004072:	d109      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a02      	ldr	r2, [pc, #8]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407e:	60d3      	str	r3, [r2, #12]
 8004080:	e014      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004090:	d10c      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f867 	bl	800416c <RCCEx_PLLSAI1_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c6:	4928      	ldr	r1, [pc, #160]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d6:	d10d      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f844 	bl	800416c <RCCEx_PLLSAI1_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d014      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	74bb      	strb	r3, [r7, #18]
 80040f2:	e011      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3320      	adds	r3, #32
 8004102:	2102      	movs	r1, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f925 	bl	8004354 <RCCEx_PLLSAI2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004132:	490d      	ldr	r1, [pc, #52]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800415e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000

0800416c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417a:	4b75      	ldr	r3, [pc, #468]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004186:	4b72      	ldr	r3, [pc, #456]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0203 	and.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d10d      	bne.n	80041b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
       ||
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800419e:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
       ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d047      	beq.n	8004242 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e044      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d018      	beq.n	80041f2 <RCCEx_PLLSAI1_Config+0x86>
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d825      	bhi.n	8004210 <RCCEx_PLLSAI1_Config+0xa4>
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d002      	beq.n	80041ce <RCCEx_PLLSAI1_Config+0x62>
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d009      	beq.n	80041e0 <RCCEx_PLLSAI1_Config+0x74>
 80041cc:	e020      	b.n	8004210 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ce:	4b60      	ldr	r3, [pc, #384]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e01a      	b.n	8004216 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e0:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d116      	bne.n	800421a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f0:	e013      	b.n	800421a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f2:	4b57      	ldr	r3, [pc, #348]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10f      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041fe:	4b54      	ldr	r3, [pc, #336]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800420e:	e006      	b.n	800421e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e004      	b.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004216:	bf00      	nop
 8004218:	e002      	b.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004226:	4b4a      	ldr	r3, [pc, #296]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	430b      	orrs	r3, r1
 800423c:	4944      	ldr	r1, [pc, #272]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d17d      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004248:	4b41      	ldr	r3, [pc, #260]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a40      	ldr	r2, [pc, #256]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fd f982 	bl	800155c <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800425a:	e009      	b.n	8004270 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800425c:	f7fd f97e 	bl	800155c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	73fb      	strb	r3, [r7, #15]
        break;
 800426e:	e005      	b.n	800427c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004270:	4b37      	ldr	r3, [pc, #220]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ef      	bne.n	800425c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d160      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d111      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004288:	4b31      	ldr	r3, [pc, #196]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0211      	lsls	r1, r2, #8
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	0912      	lsrs	r2, r2, #4
 80042a0:	0452      	lsls	r2, r2, #17
 80042a2:	430a      	orrs	r2, r1
 80042a4:	492a      	ldr	r1, [pc, #168]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	610b      	str	r3, [r1, #16]
 80042aa:	e027      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d112      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b2:	4b27      	ldr	r3, [pc, #156]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6892      	ldr	r2, [r2, #8]
 80042c2:	0211      	lsls	r1, r2, #8
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6912      	ldr	r2, [r2, #16]
 80042c8:	0852      	lsrs	r2, r2, #1
 80042ca:	3a01      	subs	r2, #1
 80042cc:	0552      	lsls	r2, r2, #21
 80042ce:	430a      	orrs	r2, r1
 80042d0:	491f      	ldr	r1, [pc, #124]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
 80042d6:	e011      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	0211      	lsls	r1, r2, #8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6952      	ldr	r2, [r2, #20]
 80042ee:	0852      	lsrs	r2, r2, #1
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0652      	lsls	r2, r2, #25
 80042f4:	430a      	orrs	r2, r1
 80042f6:	4916      	ldr	r1, [pc, #88]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a13      	ldr	r2, [pc, #76]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fd f928 	bl	800155c <HAL_GetTick>
 800430c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800430e:	e009      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004310:	f7fd f924 	bl	800155c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	73fb      	strb	r3, [r7, #15]
          break;
 8004322:	e005      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ef      	beq.n	8004310 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	4904      	ldr	r1, [pc, #16]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000

08004354 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004362:	4b6a      	ldr	r3, [pc, #424]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800436e:	4b67      	ldr	r3, [pc, #412]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0203 	and.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d10d      	bne.n	800439a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
       ||
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004386:	4b61      	ldr	r3, [pc, #388]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
       ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d047      	beq.n	800442a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e044      	b.n	800442a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d018      	beq.n	80043da <RCCEx_PLLSAI2_Config+0x86>
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d825      	bhi.n	80043f8 <RCCEx_PLLSAI2_Config+0xa4>
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d002      	beq.n	80043b6 <RCCEx_PLLSAI2_Config+0x62>
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d009      	beq.n	80043c8 <RCCEx_PLLSAI2_Config+0x74>
 80043b4:	e020      	b.n	80043f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b6:	4b55      	ldr	r3, [pc, #340]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11d      	bne.n	80043fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c6:	e01a      	b.n	80043fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c8:	4b50      	ldr	r3, [pc, #320]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d116      	bne.n	8004402 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e013      	b.n	8004402 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043da:	4b4c      	ldr	r3, [pc, #304]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e6:	4b49      	ldr	r3, [pc, #292]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f6:	e006      	b.n	8004406 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      break;
 80043fc:	e004      	b.n	8004408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004406:	bf00      	nop
    }

    if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440e:	4b3f      	ldr	r3, [pc, #252]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	430b      	orrs	r3, r1
 8004424:	4939      	ldr	r1, [pc, #228]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d167      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004430:	4b36      	ldr	r3, [pc, #216]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a35      	ldr	r2, [pc, #212]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443c:	f7fd f88e 	bl	800155c <HAL_GetTick>
 8004440:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004442:	e009      	b.n	8004458 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004444:	f7fd f88a 	bl	800155c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d902      	bls.n	8004458 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	73fb      	strb	r3, [r7, #15]
        break;
 8004456:	e005      	b.n	8004464 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ef      	bne.n	8004444 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d14a      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d111      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004470:	4b26      	ldr	r3, [pc, #152]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	0211      	lsls	r1, r2, #8
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68d2      	ldr	r2, [r2, #12]
 8004486:	0912      	lsrs	r2, r2, #4
 8004488:	0452      	lsls	r2, r2, #17
 800448a:	430a      	orrs	r2, r1
 800448c:	491f      	ldr	r1, [pc, #124]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	614b      	str	r3, [r1, #20]
 8004492:	e011      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800449c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6892      	ldr	r2, [r2, #8]
 80044a4:	0211      	lsls	r1, r2, #8
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6912      	ldr	r2, [r2, #16]
 80044aa:	0852      	lsrs	r2, r2, #1
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0652      	lsls	r2, r2, #25
 80044b0:	430a      	orrs	r2, r1
 80044b2:	4916      	ldr	r1, [pc, #88]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a13      	ldr	r2, [pc, #76]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd f84a 	bl	800155c <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ca:	e009      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044cc:	f7fd f846 	bl	800155c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d902      	bls.n	80044e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	73fb      	strb	r3, [r7, #15]
          break;
 80044de:	e005      	b.n	80044ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ef      	beq.n	80044cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4904      	ldr	r1, [pc, #16]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000

08004510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e049      	b.n	80045b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fe50 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f000 fe2a 	bl	80051a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d001      	beq.n	80045d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e047      	b.n	8004668 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <HAL_TIM_Base_Start+0xb4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01d      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d018      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_TIM_Base_Start+0xb8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_TIM_Base_Start+0xbc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <HAL_TIM_Base_Start+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <HAL_TIM_Base_Start+0xc4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_TIM_Base_Start+0xc8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d115      	bne.n	8004652 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	4b17      	ldr	r3, [pc, #92]	; (800468c <HAL_TIM_Base_Start+0xcc>)
 800462e:	4013      	ands	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b06      	cmp	r3, #6
 8004636:	d015      	beq.n	8004664 <HAL_TIM_Base_Start+0xa4>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463e:	d011      	beq.n	8004664 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	e008      	b.n	8004664 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e000      	b.n	8004666 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40014000 	.word	0x40014000
 800468c:	00010007 	.word	0x00010007

08004690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e04f      	b.n	8004748 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a23      	ldr	r2, [pc, #140]	; (8004754 <HAL_TIM_Base_Start_IT+0xc4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_TIM_Base_Start_IT+0xc8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <HAL_TIM_Base_Start_IT+0xcc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_TIM_Base_Start_IT+0xd0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <HAL_TIM_Base_Start_IT+0xd4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_TIM_Base_Start_IT+0xd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d115      	bne.n	8004732 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_TIM_Base_Start_IT+0xdc>)
 800470e:	4013      	ands	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d015      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0xb4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d011      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	e008      	b.n	8004744 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e000      	b.n	8004746 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004744:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40000c00 	.word	0x40000c00
 8004764:	40013400 	.word	0x40013400
 8004768:	40014000 	.word	0x40014000
 800476c:	00010007 	.word	0x00010007

08004770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e049      	b.n	8004816 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f841 	bl	800481e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fcfa 	bl	80051a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_TIM_PWM_Start+0x24>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e03c      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d109      	bne.n	8004872 <HAL_TIM_PWM_Start+0x3e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e02f      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x58>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e022      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d109      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x72>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e015      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d109      	bne.n	80048c0 <HAL_TIM_PWM_Start+0x8c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e008      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e09c      	b.n	8004a14 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0xb6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e8:	e023      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xc6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f8:	e01b      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xd6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	e013      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xe6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004918:	e00b      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b10      	cmp	r3, #16
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xf6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004928:	e003      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f83e 	bl	80059bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <HAL_TIM_PWM_Start+0x1e8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a34      	ldr	r2, [pc, #208]	; (8004a20 <HAL_TIM_PWM_Start+0x1ec>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <HAL_TIM_PWM_Start+0x1f0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a31      	ldr	r2, [pc, #196]	; (8004a28 <HAL_TIM_PWM_Start+0x1f4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <HAL_TIM_PWM_Start+0x1f8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_TIM_PWM_Start+0x142>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_TIM_PWM_Start+0x144>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800498a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_TIM_PWM_Start+0x1e8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01d      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d018      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_TIM_PWM_Start+0x1fc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <HAL_TIM_PWM_Start+0x200>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <HAL_TIM_PWM_Start+0x204>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_TIM_PWM_Start+0x1ec>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <HAL_TIM_PWM_Start+0x1f0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d115      	bne.n	80049fe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <HAL_TIM_PWM_Start+0x208>)
 80049da:	4013      	ands	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b06      	cmp	r3, #6
 80049e2:	d015      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x1dc>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d011      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	e008      	b.n	8004a10 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e000      	b.n	8004a12 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40013400 	.word	0x40013400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	00010007 	.word	0x00010007

08004a40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 ffb2 	bl	80059bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3e      	ldr	r2, [pc, #248]	; (8004b58 <HAL_TIM_PWM_Stop+0x118>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIM_PWM_Stop+0x4a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a3d      	ldr	r2, [pc, #244]	; (8004b5c <HAL_TIM_PWM_Stop+0x11c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIM_PWM_Stop+0x4a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3b      	ldr	r2, [pc, #236]	; (8004b60 <HAL_TIM_PWM_Stop+0x120>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIM_PWM_Stop+0x4a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <HAL_TIM_PWM_Stop+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIM_PWM_Stop+0x4a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a38      	ldr	r2, [pc, #224]	; (8004b68 <HAL_TIM_PWM_Stop+0x128>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_Stop+0x4e>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_PWM_Stop+0x50>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6a1a      	ldr	r2, [r3, #32]
 8004a9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_TIM_PWM_Stop+0x84>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6a1a      	ldr	r2, [r3, #32]
 8004aaa:	f240 4344 	movw	r3, #1092	; 0x444
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d107      	bne.n	8004ac4 <HAL_TIM_PWM_Stop+0x84>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10f      	bne.n	8004af4 <HAL_TIM_PWM_Stop+0xb4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	f240 4344 	movw	r3, #1092	; 0x444
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_PWM_Stop+0xb4>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_TIM_PWM_Stop+0xc4>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b02:	e023      	b.n	8004b4c <HAL_TIM_PWM_Stop+0x10c>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d104      	bne.n	8004b14 <HAL_TIM_PWM_Stop+0xd4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b12:	e01b      	b.n	8004b4c <HAL_TIM_PWM_Stop+0x10c>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d104      	bne.n	8004b24 <HAL_TIM_PWM_Stop+0xe4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b22:	e013      	b.n	8004b4c <HAL_TIM_PWM_Stop+0x10c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d104      	bne.n	8004b34 <HAL_TIM_PWM_Stop+0xf4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b32:	e00b      	b.n	8004b4c <HAL_TIM_PWM_Stop+0x10c>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d104      	bne.n	8004b44 <HAL_TIM_PWM_Stop+0x104>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b42:	e003      	b.n	8004b4c <HAL_TIM_PWM_Stop+0x10c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40013400 	.word	0x40013400
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fadc 	bl	800516c <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 face 	bl	8005158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fadf 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0204 	mvn.w	r2, #4
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fab2 	bl	800516c <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 faa4 	bl	8005158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fab5 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0208 	mvn.w	r2, #8
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2204      	movs	r2, #4
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa88 	bl	800516c <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa7a 	bl	8005158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa8b 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0210 	mvn.w	r2, #16
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa5e 	bl	800516c <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa50 	bl	8005158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fa61 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0201 	mvn.w	r2, #1
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fc f9ce 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 ff08 	bl	8005b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2a:	d10e      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d107      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fefb 	bl	8005b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d10e      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d107      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa0f 	bl	8005194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d10e      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d107      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0220 	mvn.w	r2, #32
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 febb 	bl	8005b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e0fd      	b.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b14      	cmp	r3, #20
 8004dd2:	f200 80f0 	bhi.w	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004fb7 	.word	0x08004fb7
 8004de4:	08004fb7 	.word	0x08004fb7
 8004de8:	08004fb7 	.word	0x08004fb7
 8004dec:	08004e71 	.word	0x08004e71
 8004df0:	08004fb7 	.word	0x08004fb7
 8004df4:	08004fb7 	.word	0x08004fb7
 8004df8:	08004fb7 	.word	0x08004fb7
 8004dfc:	08004eb3 	.word	0x08004eb3
 8004e00:	08004fb7 	.word	0x08004fb7
 8004e04:	08004fb7 	.word	0x08004fb7
 8004e08:	08004fb7 	.word	0x08004fb7
 8004e0c:	08004ef3 	.word	0x08004ef3
 8004e10:	08004fb7 	.word	0x08004fb7
 8004e14:	08004fb7 	.word	0x08004fb7
 8004e18:	08004fb7 	.word	0x08004fb7
 8004e1c:	08004f35 	.word	0x08004f35
 8004e20:	08004fb7 	.word	0x08004fb7
 8004e24:	08004fb7 	.word	0x08004fb7
 8004e28:	08004fb7 	.word	0x08004fb7
 8004e2c:	08004f75 	.word	0x08004f75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa50 	bl	80052dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0208 	orr.w	r2, r2, #8
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0204 	bic.w	r2, r2, #4
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	619a      	str	r2, [r3, #24]
      break;
 8004e6e:	e0a3      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fac0 	bl	80053fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6999      	ldr	r1, [r3, #24]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	619a      	str	r2, [r3, #24]
      break;
 8004eb0:	e082      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fb29 	bl	8005510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0208 	orr.w	r2, r2, #8
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0204 	bic.w	r2, r2, #4
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	61da      	str	r2, [r3, #28]
      break;
 8004ef0:	e062      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fb91 	bl	8005620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69d9      	ldr	r1, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	021a      	lsls	r2, r3, #8
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	61da      	str	r2, [r3, #28]
      break;
 8004f32:	e041      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fbda 	bl	80056f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0208 	orr.w	r2, r2, #8
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0204 	bic.w	r2, r2, #4
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f72:	e021      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fc1e 	bl	80057bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fb4:	e000      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004fb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop

08004fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIM_ConfigClockSource+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e0b5      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x184>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005020:	d03e      	beq.n	80050a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005026:	f200 8087 	bhi.w	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	f000 8085 	beq.w	800513c <HAL_TIM_ConfigClockSource+0x170>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005036:	d87f      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d01a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0xa6>
 800503c:	2b70      	cmp	r3, #112	; 0x70
 800503e:	d87b      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b60      	cmp	r3, #96	; 0x60
 8005042:	d050      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005044:	2b60      	cmp	r3, #96	; 0x60
 8005046:	d877      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b50      	cmp	r3, #80	; 0x50
 800504a:	d03c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0xfa>
 800504c:	2b50      	cmp	r3, #80	; 0x50
 800504e:	d873      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d058      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x13a>
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d86f      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b30      	cmp	r3, #48	; 0x30
 800505a:	d064      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
 800505c:	2b30      	cmp	r3, #48	; 0x30
 800505e:	d86b      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b20      	cmp	r3, #32
 8005062:	d060      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b20      	cmp	r3, #32
 8005066:	d867      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05c      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b10      	cmp	r3, #16
 800506e:	d05a      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005070:	e062      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6899      	ldr	r1, [r3, #8]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f000 fc7b 	bl	800597c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005094:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	609a      	str	r2, [r3, #8]
      break;
 800509e:	e04e      	b.n	800513e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6899      	ldr	r1, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f000 fc64 	bl	800597c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c2:	609a      	str	r2, [r3, #8]
      break;
 80050c4:	e03b      	b.n	800513e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 fbd8 	bl	8005888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2150      	movs	r1, #80	; 0x50
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fc31 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80050e4:	e02b      	b.n	800513e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6859      	ldr	r1, [r3, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f000 fbf7 	bl	80058e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2160      	movs	r1, #96	; 0x60
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc21 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 8005104:	e01b      	b.n	800513e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	461a      	mov	r2, r3
 8005114:	f000 fbb8 	bl	8005888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2140      	movs	r1, #64	; 0x40
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fc11 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 8005124:	e00b      	b.n	800513e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f000 fc08 	bl	8005946 <TIM_ITRx_SetConfig>
        break;
 8005136:	e002      	b.n	800513e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800513c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a40      	ldr	r2, [pc, #256]	; (80052bc <TIM_Base_SetConfig+0x114>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <TIM_Base_SetConfig+0x40>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d00f      	beq.n	80051e8 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a3d      	ldr	r2, [pc, #244]	; (80052c0 <TIM_Base_SetConfig+0x118>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a3c      	ldr	r2, [pc, #240]	; (80052c4 <TIM_Base_SetConfig+0x11c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d007      	beq.n	80051e8 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a3b      	ldr	r2, [pc, #236]	; (80052c8 <TIM_Base_SetConfig+0x120>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a3a      	ldr	r2, [pc, #232]	; (80052cc <TIM_Base_SetConfig+0x124>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d108      	bne.n	80051fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2f      	ldr	r2, [pc, #188]	; (80052bc <TIM_Base_SetConfig+0x114>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01f      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005208:	d01b      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a2c      	ldr	r2, [pc, #176]	; (80052c0 <TIM_Base_SetConfig+0x118>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d017      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a2b      	ldr	r2, [pc, #172]	; (80052c4 <TIM_Base_SetConfig+0x11c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <TIM_Base_SetConfig+0x120>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <TIM_Base_SetConfig+0x124>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a28      	ldr	r2, [pc, #160]	; (80052d0 <TIM_Base_SetConfig+0x128>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a27      	ldr	r2, [pc, #156]	; (80052d4 <TIM_Base_SetConfig+0x12c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a26      	ldr	r2, [pc, #152]	; (80052d8 <TIM_Base_SetConfig+0x130>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a10      	ldr	r2, [pc, #64]	; (80052bc <TIM_Base_SetConfig+0x114>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00f      	beq.n	80052a0 <TIM_Base_SetConfig+0xf8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a12      	ldr	r2, [pc, #72]	; (80052cc <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00b      	beq.n	80052a0 <TIM_Base_SetConfig+0xf8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <TIM_Base_SetConfig+0x128>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_Base_SetConfig+0xf8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a10      	ldr	r2, [pc, #64]	; (80052d4 <TIM_Base_SetConfig+0x12c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_Base_SetConfig+0xf8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a0f      	ldr	r2, [pc, #60]	; (80052d8 <TIM_Base_SetConfig+0x130>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d103      	bne.n	80052a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	615a      	str	r2, [r3, #20]
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800
 80052c8:	40000c00 	.word	0x40000c00
 80052cc:	40013400 	.word	0x40013400
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800

080052dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 0302 	bic.w	r3, r3, #2
 8005328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <TIM_OC1_SetConfig+0x10c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00f      	beq.n	800535c <TIM_OC1_SetConfig+0x80>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a2b      	ldr	r2, [pc, #172]	; (80053ec <TIM_OC1_SetConfig+0x110>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00b      	beq.n	800535c <TIM_OC1_SetConfig+0x80>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <TIM_OC1_SetConfig+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d007      	beq.n	800535c <TIM_OC1_SetConfig+0x80>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <TIM_OC1_SetConfig+0x118>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_OC1_SetConfig+0x80>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a28      	ldr	r2, [pc, #160]	; (80053f8 <TIM_OC1_SetConfig+0x11c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10c      	bne.n	8005376 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0308 	bic.w	r3, r3, #8
 8005362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <TIM_OC1_SetConfig+0x10c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00f      	beq.n	800539e <TIM_OC1_SetConfig+0xc2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <TIM_OC1_SetConfig+0x110>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00b      	beq.n	800539e <TIM_OC1_SetConfig+0xc2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <TIM_OC1_SetConfig+0x114>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_OC1_SetConfig+0xc2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <TIM_OC1_SetConfig+0x118>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_OC1_SetConfig+0xc2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <TIM_OC1_SetConfig+0x11c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0210 	bic.w	r2, r3, #16
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a28      	ldr	r2, [pc, #160]	; (80054fc <TIM_OC2_SetConfig+0x100>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC2_SetConfig+0x6c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a27      	ldr	r2, [pc, #156]	; (8005500 <TIM_OC2_SetConfig+0x104>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10d      	bne.n	8005484 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a1d      	ldr	r2, [pc, #116]	; (80054fc <TIM_OC2_SetConfig+0x100>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00f      	beq.n	80054ac <TIM_OC2_SetConfig+0xb0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <TIM_OC2_SetConfig+0x104>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_OC2_SetConfig+0xb0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <TIM_OC2_SetConfig+0x108>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_OC2_SetConfig+0xb0>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <TIM_OC2_SetConfig+0x10c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC2_SetConfig+0xb0>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a19      	ldr	r2, [pc, #100]	; (800550c <TIM_OC2_SetConfig+0x110>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d113      	bne.n	80054d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40013400 	.word	0x40013400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800555c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <TIM_OC3_SetConfig+0xfc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_OC3_SetConfig+0x6a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a26      	ldr	r2, [pc, #152]	; (8005610 <TIM_OC3_SetConfig+0x100>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d10d      	bne.n	8005596 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a1c      	ldr	r2, [pc, #112]	; (800560c <TIM_OC3_SetConfig+0xfc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00f      	beq.n	80055be <TIM_OC3_SetConfig+0xae>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <TIM_OC3_SetConfig+0x100>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_OC3_SetConfig+0xae>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <TIM_OC3_SetConfig+0x104>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_OC3_SetConfig+0xae>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <TIM_OC3_SetConfig+0x108>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_OC3_SetConfig+0xae>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a18      	ldr	r2, [pc, #96]	; (800561c <TIM_OC3_SetConfig+0x10c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d113      	bne.n	80055e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	621a      	str	r2, [r3, #32]
}
 8005600:	bf00      	nop
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40013400 	.word	0x40013400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800566e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <TIM_OC4_SetConfig+0xc0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_OC4_SetConfig+0x84>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a17      	ldr	r2, [pc, #92]	; (80056e4 <TIM_OC4_SetConfig+0xc4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_OC4_SetConfig+0x84>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <TIM_OC4_SetConfig+0xc8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_OC4_SetConfig+0x84>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <TIM_OC4_SetConfig+0xcc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC4_SetConfig+0x84>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <TIM_OC4_SetConfig+0xd0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d109      	bne.n	80056b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <TIM_OC5_SetConfig+0xb4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <TIM_OC5_SetConfig+0xb8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <TIM_OC5_SetConfig+0xbc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a14      	ldr	r2, [pc, #80]	; (80057b4 <TIM_OC5_SetConfig+0xc0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <TIM_OC5_SetConfig+0xc4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d109      	bne.n	8005782 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800

080057bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	051b      	lsls	r3, r3, #20
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <TIM_OC6_SetConfig+0xb8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00f      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <TIM_OC6_SetConfig+0xbc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <TIM_OC6_SetConfig+0xc0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <TIM_OC6_SetConfig+0xc4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a14      	ldr	r2, [pc, #80]	; (8005884 <TIM_OC6_SetConfig+0xc8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d109      	bne.n	800584c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	029b      	lsls	r3, r3, #10
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40013400 	.word	0x40013400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 030a 	bic.w	r3, r3, #10
 80058c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0210 	bic.w	r2, r3, #16
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	f043 0307 	orr.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	431a      	orrs	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	2201      	movs	r2, #1
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1a      	ldr	r2, [r3, #32]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e068      	b.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d108      	bne.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01d      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d018      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40014000 	.word	0x40014000

08005b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b08b      	sub	sp, #44	; 0x2c
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	fa93 f3a3 	rbit	r3, r3
 8005b6e:	613b      	str	r3, [r7, #16]
  return result;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	e003      	b.n	8005b86 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	fab3 f383 	clz	r3, r3
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	2103      	movs	r1, #3
 8005b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	401a      	ands	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	fa93 f3a3 	rbit	r3, r3
 8005b9c:	61fb      	str	r3, [r7, #28]
  return result;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005ba8:	2320      	movs	r3, #32
 8005baa:	e003      	b.n	8005bb4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	fab3 f383 	clz	r3, r3
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	372c      	adds	r7, #44	; 0x2c
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	401a      	ands	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	fb01 f303 	mul.w	r3, r1, r3
 8005bec:	431a      	orrs	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b08b      	sub	sp, #44	; 0x2c
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	fa93 f3a3 	rbit	r3, r3
 8005c18:	613b      	str	r3, [r7, #16]
  return result;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005c24:	2320      	movs	r3, #32
 8005c26:	e003      	b.n	8005c30 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	fab3 f383 	clz	r3, r3
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	2103      	movs	r1, #3
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	fa93 f3a3 	rbit	r3, r3
 8005c46:	61fb      	str	r3, [r7, #28]
  return result;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005c52:	2320      	movs	r3, #32
 8005c54:	e003      	b.n	8005c5e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	fab3 f383 	clz	r3, r3
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	431a      	orrs	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005c6c:	bf00      	nop
 8005c6e:	372c      	adds	r7, #44	; 0x2c
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b08b      	sub	sp, #44	; 0x2c
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	fa93 f3a3 	rbit	r3, r3
 8005c92:	613b      	str	r3, [r7, #16]
  return result;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	e003      	b.n	8005caa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	fab3 f383 	clz	r3, r3
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	2103      	movs	r1, #3
 8005cae:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	401a      	ands	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	fa93 f3a3 	rbit	r3, r3
 8005cc0:	61fb      	str	r3, [r7, #28]
  return result;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005ccc:	2320      	movs	r3, #32
 8005cce:	e003      	b.n	8005cd8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	fab3 f383 	clz	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	60da      	str	r2, [r3, #12]
}
 8005ce6:	bf00      	nop
 8005ce8:	372c      	adds	r7, #44	; 0x2c
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b08b      	sub	sp, #44	; 0x2c
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1a      	ldr	r2, [r3, #32]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	fa93 f3a3 	rbit	r3, r3
 8005d0c:	613b      	str	r3, [r7, #16]
  return result;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005d18:	2320      	movs	r3, #32
 8005d1a:	e003      	b.n	8005d24 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	fab3 f383 	clz	r3, r3
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	210f      	movs	r1, #15
 8005d28:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	401a      	ands	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	fa93 f3a3 	rbit	r3, r3
 8005d3a:	61fb      	str	r3, [r7, #28]
  return result;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005d46:	2320      	movs	r3, #32
 8005d48:	e003      	b.n	8005d52 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	fab3 f383 	clz	r3, r3
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005d60:	bf00      	nop
 8005d62:	372c      	adds	r7, #44	; 0x2c
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b08b      	sub	sp, #44	; 0x2c
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	fa93 f3a3 	rbit	r3, r3
 8005d88:	613b      	str	r3, [r7, #16]
  return result;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005d94:	2320      	movs	r3, #32
 8005d96:	e003      	b.n	8005da0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	fab3 f383 	clz	r3, r3
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	210f      	movs	r1, #15
 8005da4:	fa01 f303 	lsl.w	r3, r1, r3
 8005da8:	43db      	mvns	r3, r3
 8005daa:	401a      	ands	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	fa93 f3a3 	rbit	r3, r3
 8005db8:	61fb      	str	r3, [r7, #28]
  return result;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	e003      	b.n	8005dd0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	fab3 f383 	clz	r3, r3
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005dde:	bf00      	nop
 8005de0:	372c      	adds	r7, #44	; 0x2c
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b088      	sub	sp, #32
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	fa93 f3a3 	rbit	r3, r3
 8005e00:	60fb      	str	r3, [r7, #12]
  return result;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <LL_GPIO_Init+0x26>
    return 32U;
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	e003      	b.n	8005e18 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	fab3 f383 	clz	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005e1a:	e048      	b.n	8005eae <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	2101      	movs	r1, #1
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	fa01 f303 	lsl.w	r3, r1, r3
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d03a      	beq.n	8005ea8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d003      	beq.n	8005e42 <LL_GPIO_Init+0x58>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d10e      	bne.n	8005e60 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	461a      	mov	r2, r3
 8005e48:	69b9      	ldr	r1, [r7, #24]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fed7 	bl	8005bfe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff feb7 	bl	8005bce <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	461a      	mov	r2, r3
 8005e66:	69b9      	ldr	r1, [r7, #24]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff05 	bl	8005c78 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d111      	bne.n	8005e9a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2bff      	cmp	r3, #255	; 0xff
 8005e7a:	d807      	bhi.n	8005e8c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	461a      	mov	r2, r3
 8005e82:	69b9      	ldr	r1, [r7, #24]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff34 	bl	8005cf2 <LL_GPIO_SetAFPin_0_7>
 8005e8a:	e006      	b.n	8005e9a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	461a      	mov	r2, r3
 8005e92:	69b9      	ldr	r1, [r7, #24]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff69 	bl	8005d6c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fe56 	bl	8005b54 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1af      	bne.n	8005e1c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3720      	adds	r7, #32
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005ecc:	4b07      	ldr	r3, [pc, #28]	; (8005eec <LL_RCC_HSI_IsReady+0x24>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed8:	d101      	bne.n	8005ede <LL_RCC_HSI_IsReady+0x16>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <LL_RCC_HSI_IsReady+0x18>
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000

08005ef0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005ef4:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <LL_RCC_LSE_IsReady+0x24>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d101      	bne.n	8005f06 <LL_RCC_LSE_IsReady+0x16>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <LL_RCC_LSE_IsReady+0x18>
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000

08005f18 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d101      	bne.n	8005f2c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40021000 	.word	0x40021000

08005f3c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <LL_RCC_MSI_GetRange+0x18>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000

08005f58 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f62:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	40021000 	.word	0x40021000

08005f74 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <LL_RCC_GetSysClkSource+0x18>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 030c 	and.w	r3, r3, #12
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000

08005f90 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <LL_RCC_GetAHBPrescaler+0x18>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000

08005fac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000

08005fc8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40021000 	.word	0x40021000

08005fe4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <LL_RCC_GetUSARTClockSource+0x24>)
 8005fee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	401a      	ands	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	4313      	orrs	r3, r2
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40021000 	.word	0x40021000

0800600c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <LL_RCC_GetUARTClockSource+0x24>)
 8006016:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	401a      	ands	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	4313      	orrs	r3, r2
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40021000 	.word	0x40021000

08006034 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <LL_RCC_PLL_GetMainSource+0x18>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0303 	and.w	r3, r3, #3
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000

08006050 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <LL_RCC_PLL_GetN+0x18>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800605e:	4618      	mov	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40021000 	.word	0x40021000

0800606c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006070:	4b04      	ldr	r3, [pc, #16]	; (8006084 <LL_RCC_PLL_GetR+0x18>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006078:	4618      	mov	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000

08006088 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800608c:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <LL_RCC_PLL_GetDivider+0x18>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006094:	4618      	mov	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40021000 	.word	0x40021000

080060a4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d137      	bne.n	8006126 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ff94 	bl	8005fe4 <LL_RCC_GetUSARTClockSource>
 80060bc:	4603      	mov	r3, r0
 80060be:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	f200 80b3 	bhi.w	800622e <LL_RCC_GetUSARTClockFreq+0x18a>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	0800610f 	.word	0x0800610f
 80060d4:	080060e1 	.word	0x080060e1
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	080060fb 	.word	0x080060fb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80060e0:	f000 f95c 	bl	800639c <RCC_GetSystemClockFreq>
 80060e4:	60f8      	str	r0, [r7, #12]
        break;
 80060e6:	e0b5      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80060e8:	f7ff feee 	bl	8005ec8 <LL_RCC_HSI_IsReady>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 809f 	beq.w	8006232 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80060f4:	4b5a      	ldr	r3, [pc, #360]	; (8006260 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80060f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060f8:	e09b      	b.n	8006232 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80060fa:	f7ff fef9 	bl	8005ef0 <LL_RCC_LSE_IsReady>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8098 	beq.w	8006236 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800610c:	e093      	b.n	8006236 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800610e:	f000 f945 	bl	800639c <RCC_GetSystemClockFreq>
 8006112:	4603      	mov	r3, r0
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f9d1 	bl	80064bc <RCC_GetHCLKClockFreq>
 800611a:	4603      	mov	r3, r0
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f9f7 	bl	8006510 <RCC_GetPCLK2ClockFreq>
 8006122:	60f8      	str	r0, [r7, #12]
        break;
 8006124:	e096      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b0c      	cmp	r3, #12
 800612a:	d146      	bne.n	80061ba <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff59 	bl	8005fe4 <LL_RCC_GetUSARTClockSource>
 8006132:	4603      	mov	r3, r0
 8006134:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d87e      	bhi.n	800623a <LL_RCC_GetUSARTClockFreq+0x196>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	080061a3 	.word	0x080061a3
 8006148:	0800623b 	.word	0x0800623b
 800614c:	0800623b 	.word	0x0800623b
 8006150:	0800623b 	.word	0x0800623b
 8006154:	08006179 	.word	0x08006179
 8006158:	0800623b 	.word	0x0800623b
 800615c:	0800623b 	.word	0x0800623b
 8006160:	0800623b 	.word	0x0800623b
 8006164:	08006181 	.word	0x08006181
 8006168:	0800623b 	.word	0x0800623b
 800616c:	0800623b 	.word	0x0800623b
 8006170:	0800623b 	.word	0x0800623b
 8006174:	08006191 	.word	0x08006191
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006178:	f000 f910 	bl	800639c <RCC_GetSystemClockFreq>
 800617c:	60f8      	str	r0, [r7, #12]
        break;
 800617e:	e069      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006180:	f7ff fea2 	bl	8005ec8 <LL_RCC_HSI_IsReady>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d059      	beq.n	800623e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800618a:	4b35      	ldr	r3, [pc, #212]	; (8006260 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800618c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800618e:	e056      	b.n	800623e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006190:	f7ff feae 	bl	8005ef0 <LL_RCC_LSE_IsReady>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d053      	beq.n	8006242 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800619a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619e:	60fb      	str	r3, [r7, #12]
        }
        break;
 80061a0:	e04f      	b.n	8006242 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80061a2:	f000 f8fb 	bl	800639c <RCC_GetSystemClockFreq>
 80061a6:	4603      	mov	r3, r0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f987 	bl	80064bc <RCC_GetHCLKClockFreq>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 f999 	bl	80064e8 <RCC_GetPCLK1ClockFreq>
 80061b6:	60f8      	str	r0, [r7, #12]
        break;
 80061b8:	e04c      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b30      	cmp	r3, #48	; 0x30
 80061be:	d142      	bne.n	8006246 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff0f 	bl	8005fe4 <LL_RCC_GetUSARTClockSource>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80061cc:	d01a      	beq.n	8006204 <LL_RCC_GetUSARTClockFreq+0x160>
 80061ce:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80061d2:	d83a      	bhi.n	800624a <LL_RCC_GetUSARTClockFreq+0x1a6>
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00c      	beq.n	80061f4 <LL_RCC_GetUSARTClockFreq+0x150>
 80061da:	4a22      	ldr	r2, [pc, #136]	; (8006264 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d834      	bhi.n	800624a <LL_RCC_GetUSARTClockFreq+0x1a6>
 80061e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061e4:	d017      	beq.n	8006216 <LL_RCC_GetUSARTClockFreq+0x172>
 80061e6:	4a20      	ldr	r2, [pc, #128]	; (8006268 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d12e      	bne.n	800624a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80061ec:	f000 f8d6 	bl	800639c <RCC_GetSystemClockFreq>
 80061f0:	60f8      	str	r0, [r7, #12]
          break;
 80061f2:	e02f      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80061f4:	f7ff fe68 	bl	8005ec8 <LL_RCC_HSI_IsReady>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d027      	beq.n	800624e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006200:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006202:	e024      	b.n	800624e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006204:	f7ff fe74 	bl	8005ef0 <LL_RCC_LSE_IsReady>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d021      	beq.n	8006252 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006214:	e01d      	b.n	8006252 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006216:	f000 f8c1 	bl	800639c <RCC_GetSystemClockFreq>
 800621a:	4603      	mov	r3, r0
 800621c:	4618      	mov	r0, r3
 800621e:	f000 f94d 	bl	80064bc <RCC_GetHCLKClockFreq>
 8006222:	4603      	mov	r3, r0
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f95f 	bl	80064e8 <RCC_GetPCLK1ClockFreq>
 800622a:	60f8      	str	r0, [r7, #12]
          break;
 800622c:	e012      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800622e:	bf00      	nop
 8006230:	e010      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006232:	bf00      	nop
 8006234:	e00e      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006236:	bf00      	nop
 8006238:	e00c      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800623a:	bf00      	nop
 800623c:	e00a      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800623e:	bf00      	nop
 8006240:	e008      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006242:	bf00      	nop
 8006244:	e006      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006252:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	00f42400 	.word	0x00f42400
 8006264:	00300020 	.word	0x00300020
 8006268:	00300010 	.word	0x00300010

0800626c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2bc0      	cmp	r3, #192	; 0xc0
 800627c:	d136      	bne.n	80062ec <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff fec4 	bl	800600c <LL_RCC_GetUARTClockSource>
 8006284:	4603      	mov	r3, r0
 8006286:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800628a:	d01a      	beq.n	80062c2 <LL_RCC_GetUARTClockFreq+0x56>
 800628c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006290:	d82e      	bhi.n	80062f0 <LL_RCC_GetUARTClockFreq+0x84>
 8006292:	4a3d      	ldr	r2, [pc, #244]	; (8006388 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00c      	beq.n	80062b2 <LL_RCC_GetUARTClockFreq+0x46>
 8006298:	4a3b      	ldr	r2, [pc, #236]	; (8006388 <LL_RCC_GetUARTClockFreq+0x11c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d828      	bhi.n	80062f0 <LL_RCC_GetUARTClockFreq+0x84>
 800629e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062a2:	d017      	beq.n	80062d4 <LL_RCC_GetUARTClockFreq+0x68>
 80062a4:	4a39      	ldr	r2, [pc, #228]	; (800638c <LL_RCC_GetUARTClockFreq+0x120>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d122      	bne.n	80062f0 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80062aa:	f000 f877 	bl	800639c <RCC_GetSystemClockFreq>
 80062ae:	60f8      	str	r0, [r7, #12]
        break;
 80062b0:	e023      	b.n	80062fa <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80062b2:	f7ff fe09 	bl	8005ec8 <LL_RCC_HSI_IsReady>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01b      	beq.n	80062f4 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 80062bc:	4b34      	ldr	r3, [pc, #208]	; (8006390 <LL_RCC_GetUARTClockFreq+0x124>)
 80062be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80062c0:	e018      	b.n	80062f4 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80062c2:	f7ff fe15 	bl	8005ef0 <LL_RCC_LSE_IsReady>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 80062cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80062d2:	e011      	b.n	80062f8 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80062d4:	f000 f862 	bl	800639c <RCC_GetSystemClockFreq>
 80062d8:	4603      	mov	r3, r0
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f8ee 	bl	80064bc <RCC_GetHCLKClockFreq>
 80062e0:	4603      	mov	r3, r0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f900 	bl	80064e8 <RCC_GetPCLK1ClockFreq>
 80062e8:	60f8      	str	r0, [r7, #12]
        break;
 80062ea:	e006      	b.n	80062fa <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80062ec:	bf00      	nop
 80062ee:	e004      	b.n	80062fa <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80062f0:	bf00      	nop
 80062f2:	e002      	b.n	80062fa <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80062f8:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006300:	d136      	bne.n	8006370 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fe82 	bl	800600c <LL_RCC_GetUARTClockSource>
 8006308:	4603      	mov	r3, r0
 800630a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800630e:	d01a      	beq.n	8006346 <LL_RCC_GetUARTClockFreq+0xda>
 8006310:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006314:	d82e      	bhi.n	8006374 <LL_RCC_GetUARTClockFreq+0x108>
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <LL_RCC_GetUARTClockFreq+0x128>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00c      	beq.n	8006336 <LL_RCC_GetUARTClockFreq+0xca>
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <LL_RCC_GetUARTClockFreq+0x128>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d828      	bhi.n	8006374 <LL_RCC_GetUARTClockFreq+0x108>
 8006322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006326:	d017      	beq.n	8006358 <LL_RCC_GetUARTClockFreq+0xec>
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <LL_RCC_GetUARTClockFreq+0x12c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d122      	bne.n	8006374 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800632e:	f000 f835 	bl	800639c <RCC_GetSystemClockFreq>
 8006332:	60f8      	str	r0, [r7, #12]
        break;
 8006334:	e023      	b.n	800637e <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006336:	f7ff fdc7 	bl	8005ec8 <LL_RCC_HSI_IsReady>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01b      	beq.n	8006378 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006340:	4b13      	ldr	r3, [pc, #76]	; (8006390 <LL_RCC_GetUARTClockFreq+0x124>)
 8006342:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006344:	e018      	b.n	8006378 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006346:	f7ff fdd3 	bl	8005ef0 <LL_RCC_LSE_IsReady>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d015      	beq.n	800637c <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006354:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006356:	e011      	b.n	800637c <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006358:	f000 f820 	bl	800639c <RCC_GetSystemClockFreq>
 800635c:	4603      	mov	r3, r0
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f8ac 	bl	80064bc <RCC_GetHCLKClockFreq>
 8006364:	4603      	mov	r3, r0
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f8be 	bl	80064e8 <RCC_GetPCLK1ClockFreq>
 800636c:	60f8      	str	r0, [r7, #12]
        break;
 800636e:	e006      	b.n	800637e <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006370:	bf00      	nop
 8006372:	e004      	b.n	800637e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006374:	bf00      	nop
 8006376:	e002      	b.n	800637e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800637c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800637e:	68fb      	ldr	r3, [r7, #12]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	00c00080 	.word	0x00c00080
 800638c:	00c00040 	.word	0x00c00040
 8006390:	00f42400 	.word	0x00f42400
 8006394:	03000200 	.word	0x03000200
 8006398:	03000100 	.word	0x03000100

0800639c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80063a2:	f7ff fde7 	bl	8005f74 <LL_RCC_GetSysClkSource>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b0c      	cmp	r3, #12
 80063aa:	d851      	bhi.n	8006450 <RCC_GetSystemClockFreq+0xb4>
 80063ac:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <RCC_GetSystemClockFreq+0x18>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063e9 	.word	0x080063e9
 80063b8:	08006451 	.word	0x08006451
 80063bc:	08006451 	.word	0x08006451
 80063c0:	08006451 	.word	0x08006451
 80063c4:	0800643d 	.word	0x0800643d
 80063c8:	08006451 	.word	0x08006451
 80063cc:	08006451 	.word	0x08006451
 80063d0:	08006451 	.word	0x08006451
 80063d4:	08006443 	.word	0x08006443
 80063d8:	08006451 	.word	0x08006451
 80063dc:	08006451 	.word	0x08006451
 80063e0:	08006451 	.word	0x08006451
 80063e4:	08006449 	.word	0x08006449
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80063e8:	f7ff fd96 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d111      	bne.n	8006416 <RCC_GetSystemClockFreq+0x7a>
 80063f2:	f7ff fd91 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <RCC_GetSystemClockFreq+0x6a>
 80063fc:	f7ff fd9e 	bl	8005f3c <LL_RCC_MSI_GetRange>
 8006400:	4603      	mov	r3, r0
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	e003      	b.n	800640e <RCC_GetSystemClockFreq+0x72>
 8006406:	f7ff fda7 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 800640a:	4603      	mov	r3, r0
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <RCC_GetSystemClockFreq+0x114>)
 8006410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006414:	e010      	b.n	8006438 <RCC_GetSystemClockFreq+0x9c>
 8006416:	f7ff fd7f 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <RCC_GetSystemClockFreq+0x8e>
 8006420:	f7ff fd8c 	bl	8005f3c <LL_RCC_MSI_GetRange>
 8006424:	4603      	mov	r3, r0
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	e003      	b.n	8006432 <RCC_GetSystemClockFreq+0x96>
 800642a:	f7ff fd95 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 800642e:	4603      	mov	r3, r0
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	4a1f      	ldr	r2, [pc, #124]	; (80064b0 <RCC_GetSystemClockFreq+0x114>)
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800643a:	e033      	b.n	80064a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800643c:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <RCC_GetSystemClockFreq+0x118>)
 800643e:	607b      	str	r3, [r7, #4]
      break;
 8006440:	e030      	b.n	80064a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <RCC_GetSystemClockFreq+0x11c>)
 8006444:	607b      	str	r3, [r7, #4]
      break;
 8006446:	e02d      	b.n	80064a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006448:	f000 f876 	bl	8006538 <RCC_PLL_GetFreqDomain_SYS>
 800644c:	6078      	str	r0, [r7, #4]
      break;
 800644e:	e029      	b.n	80064a4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006450:	f7ff fd62 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d111      	bne.n	800647e <RCC_GetSystemClockFreq+0xe2>
 800645a:	f7ff fd5d 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <RCC_GetSystemClockFreq+0xd2>
 8006464:	f7ff fd6a 	bl	8005f3c <LL_RCC_MSI_GetRange>
 8006468:	4603      	mov	r3, r0
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	e003      	b.n	8006476 <RCC_GetSystemClockFreq+0xda>
 800646e:	f7ff fd73 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 8006472:	4603      	mov	r3, r0
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	4a0e      	ldr	r2, [pc, #56]	; (80064b0 <RCC_GetSystemClockFreq+0x114>)
 8006478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647c:	e010      	b.n	80064a0 <RCC_GetSystemClockFreq+0x104>
 800647e:	f7ff fd4b 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <RCC_GetSystemClockFreq+0xf6>
 8006488:	f7ff fd58 	bl	8005f3c <LL_RCC_MSI_GetRange>
 800648c:	4603      	mov	r3, r0
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	e003      	b.n	800649a <RCC_GetSystemClockFreq+0xfe>
 8006492:	f7ff fd61 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 8006496:	4603      	mov	r3, r0
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <RCC_GetSystemClockFreq+0x114>)
 800649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80064a2:	bf00      	nop
  }

  return frequency;
 80064a4:	687b      	ldr	r3, [r7, #4]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	080094ec 	.word	0x080094ec
 80064b4:	00f42400 	.word	0x00f42400
 80064b8:	007a1200 	.word	0x007a1200

080064bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80064c4:	f7ff fd64 	bl	8005f90 <LL_RCC_GetAHBPrescaler>
 80064c8:	4603      	mov	r3, r0
 80064ca:	091b      	lsrs	r3, r3, #4
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	4a04      	ldr	r2, [pc, #16]	; (80064e4 <RCC_GetHCLKClockFreq+0x28>)
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	40d3      	lsrs	r3, r2
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	080094d4 	.word	0x080094d4

080064e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80064f0:	f7ff fd5c 	bl	8005fac <LL_RCC_GetAPB1Prescaler>
 80064f4:	4603      	mov	r3, r0
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	4a04      	ldr	r2, [pc, #16]	; (800650c <RCC_GetPCLK1ClockFreq+0x24>)
 80064fa:	5cd3      	ldrb	r3, [r2, r3]
 80064fc:	461a      	mov	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	40d3      	lsrs	r3, r2
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	080094e4 	.word	0x080094e4

08006510 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006518:	f7ff fd56 	bl	8005fc8 <LL_RCC_GetAPB2Prescaler>
 800651c:	4603      	mov	r3, r0
 800651e:	0adb      	lsrs	r3, r3, #11
 8006520:	4a04      	ldr	r2, [pc, #16]	; (8006534 <RCC_GetPCLK2ClockFreq+0x24>)
 8006522:	5cd3      	ldrb	r3, [r2, r3]
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	40d3      	lsrs	r3, r2
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	080094e4 	.word	0x080094e4

08006538 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800653e:	f7ff fd79 	bl	8006034 <LL_RCC_PLL_GetMainSource>
 8006542:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b03      	cmp	r3, #3
 8006548:	d036      	beq.n	80065b8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d836      	bhi.n	80065be <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d003      	beq.n	800655e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d02a      	beq.n	80065b2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800655c:	e02f      	b.n	80065be <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800655e:	f7ff fcdb 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d111      	bne.n	800658c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006568:	f7ff fcd6 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006572:	f7ff fce3 	bl	8005f3c <LL_RCC_MSI_GetRange>
 8006576:	4603      	mov	r3, r0
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	e003      	b.n	8006584 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800657c:	f7ff fcec 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 8006580:	4603      	mov	r3, r0
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	4a2f      	ldr	r2, [pc, #188]	; (8006644 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658a:	e010      	b.n	80065ae <RCC_PLL_GetFreqDomain_SYS+0x76>
 800658c:	f7ff fcc4 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006596:	f7ff fcd1 	bl	8005f3c <LL_RCC_MSI_GetRange>
 800659a:	4603      	mov	r3, r0
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	e003      	b.n	80065a8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80065a0:	f7ff fcda 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 80065a4:	4603      	mov	r3, r0
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	4a26      	ldr	r2, [pc, #152]	; (8006644 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80065aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ae:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80065b0:	e02f      	b.n	8006612 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80065b2:	4b25      	ldr	r3, [pc, #148]	; (8006648 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80065b4:	607b      	str	r3, [r7, #4]
      break;
 80065b6:	e02c      	b.n	8006612 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80065b8:	4b24      	ldr	r3, [pc, #144]	; (800664c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80065ba:	607b      	str	r3, [r7, #4]
      break;
 80065bc:	e029      	b.n	8006612 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80065be:	f7ff fcab 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d111      	bne.n	80065ec <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80065c8:	f7ff fca6 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80065d2:	f7ff fcb3 	bl	8005f3c <LL_RCC_MSI_GetRange>
 80065d6:	4603      	mov	r3, r0
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	e003      	b.n	80065e4 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80065dc:	f7ff fcbc 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 80065e0:	4603      	mov	r3, r0
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	4a17      	ldr	r2, [pc, #92]	; (8006644 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	e010      	b.n	800660e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80065ec:	f7ff fc94 	bl	8005f18 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80065f6:	f7ff fca1 	bl	8005f3c <LL_RCC_MSI_GetRange>
 80065fa:	4603      	mov	r3, r0
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	e003      	b.n	8006608 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006600:	f7ff fcaa 	bl	8005f58 <LL_RCC_MSI_GetRangeAfterStandby>
 8006604:	4603      	mov	r3, r0
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800660a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006610:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006612:	f7ff fd39 	bl	8006088 <LL_RCC_PLL_GetDivider>
 8006616:	4603      	mov	r3, r0
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	3301      	adds	r3, #1
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	fbb2 f4f3 	udiv	r4, r2, r3
 8006622:	f7ff fd15 	bl	8006050 <LL_RCC_PLL_GetN>
 8006626:	4603      	mov	r3, r0
 8006628:	fb03 f404 	mul.w	r4, r3, r4
 800662c:	f7ff fd1e 	bl	800606c <LL_RCC_PLL_GetR>
 8006630:	4603      	mov	r3, r0
 8006632:	0e5b      	lsrs	r3, r3, #25
 8006634:	3301      	adds	r3, #1
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bd90      	pop	{r4, r7, pc}
 8006644:	080094ec 	.word	0x080094ec
 8006648:	00f42400 	.word	0x00f42400
 800664c:	007a1200 	.word	0x007a1200

08006650 <LL_USART_IsEnabled>:
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <LL_USART_IsEnabled+0x18>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <LL_USART_IsEnabled+0x1a>
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <LL_USART_SetStopBitsLength>:
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	605a      	str	r2, [r3, #4]
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <LL_USART_SetHWFlowCtrl>:
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	609a      	str	r2, [r3, #8]
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <LL_USART_SetBaudRate>:
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d6:	d11a      	bne.n	800670e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	005a      	lsls	r2, r3, #1
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	441a      	add	r2, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80066f2:	4013      	ands	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	60da      	str	r2, [r3, #12]
}
 800670c:	e00a      	b.n	8006724 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	085a      	lsrs	r2, r3, #1
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	441a      	add	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	b29b      	uxth	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	60da      	str	r2, [r3, #12]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff ff84 	bl	8006650 <LL_USART_IsEnabled>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d15b      	bne.n	8006806 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <LL_USART_Init+0xe0>)
 8006754:	4013      	ands	r3, r2
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	6851      	ldr	r1, [r2, #4]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	68d2      	ldr	r2, [r2, #12]
 800675e:	4311      	orrs	r1, r2
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	6912      	ldr	r2, [r2, #16]
 8006764:	4311      	orrs	r1, r2
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	6992      	ldr	r2, [r2, #24]
 800676a:	430a      	orrs	r2, r1
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff ff7c 	bl	8006676 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff89 	bl	800669c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a21      	ldr	r2, [pc, #132]	; (8006814 <LL_USART_Init+0xe4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d104      	bne.n	800679c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006792:	2003      	movs	r0, #3
 8006794:	f7ff fc86 	bl	80060a4 <LL_RCC_GetUSARTClockFreq>
 8006798:	60b8      	str	r0, [r7, #8]
 800679a:	e023      	b.n	80067e4 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <LL_USART_Init+0xe8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d104      	bne.n	80067ae <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80067a4:	200c      	movs	r0, #12
 80067a6:	f7ff fc7d 	bl	80060a4 <LL_RCC_GetUSARTClockFreq>
 80067aa:	60b8      	str	r0, [r7, #8]
 80067ac:	e01a      	b.n	80067e4 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1a      	ldr	r2, [pc, #104]	; (800681c <LL_USART_Init+0xec>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d104      	bne.n	80067c0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80067b6:	2030      	movs	r0, #48	; 0x30
 80067b8:	f7ff fc74 	bl	80060a4 <LL_RCC_GetUSARTClockFreq>
 80067bc:	60b8      	str	r0, [r7, #8]
 80067be:	e011      	b.n	80067e4 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a17      	ldr	r2, [pc, #92]	; (8006820 <LL_USART_Init+0xf0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d104      	bne.n	80067d2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80067c8:	20c0      	movs	r0, #192	; 0xc0
 80067ca:	f7ff fd4f 	bl	800626c <LL_RCC_GetUARTClockFreq>
 80067ce:	60b8      	str	r0, [r7, #8]
 80067d0:	e008      	b.n	80067e4 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a13      	ldr	r2, [pc, #76]	; (8006824 <LL_USART_Init+0xf4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d104      	bne.n	80067e4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80067da:	f44f 7040 	mov.w	r0, #768	; 0x300
 80067de:	f7ff fd45 	bl	800626c <LL_RCC_GetUARTClockFreq>
 80067e2:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ff5e 	bl	80066c2 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	efff69f3 	.word	0xefff69f3
 8006814:	40013800 	.word	0x40013800
 8006818:	40004400 	.word	0x40004400
 800681c:	40004800 	.word	0x40004800
 8006820:	40004c00 	.word	0x40004c00
 8006824:	40005000 	.word	0x40005000

08006828 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800683a:	2b84      	cmp	r3, #132	; 0x84
 800683c:	d005      	beq.n	800684a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800683e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	3303      	adds	r3, #3
 8006848:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800685c:	f000 fff4 	bl	8007848 <vTaskStartScheduler>
  
  return osOK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	bd80      	pop	{r7, pc}

08006866 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006868:	b089      	sub	sp, #36	; 0x24
 800686a:	af04      	add	r7, sp, #16
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d020      	beq.n	80068ba <osThreadCreate+0x54>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01c      	beq.n	80068ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685c      	ldr	r4, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681d      	ldr	r5, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691e      	ldr	r6, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff ffc8 	bl	8006828 <makeFreeRtosPriority>
 8006898:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068a2:	9202      	str	r2, [sp, #8]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	9100      	str	r1, [sp, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	4632      	mov	r2, r6
 80068ac:	4629      	mov	r1, r5
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fdec 	bl	800748c <xTaskCreateStatic>
 80068b4:	4603      	mov	r3, r0
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e01c      	b.n	80068f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685c      	ldr	r4, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068c6:	b29e      	uxth	r6, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff ffaa 	bl	8006828 <makeFreeRtosPriority>
 80068d4:	4602      	mov	r2, r0
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	9200      	str	r2, [sp, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	4632      	mov	r2, r6
 80068e2:	4629      	mov	r1, r5
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fe2e 	bl	8007546 <xTaskCreate>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d001      	beq.n	80068f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e000      	b.n	80068f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <osDelay+0x16>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	e000      	b.n	8006916 <osDelay+0x18>
 8006914:	2301      	movs	r3, #1
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff62 	bl	80077e0 <vTaskDelay>
  
  return osOK;
 800691c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f103 0208 	add.w	r2, r3, #8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800693e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f103 0208 	add.w	r2, r3, #8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f103 0208 	add.w	r2, r3, #8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	601a      	str	r2, [r3, #0]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069de:	d103      	bne.n	80069e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	e00c      	b.n	8006a02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3308      	adds	r3, #8
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e002      	b.n	80069f6 <vListInsert+0x2e>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d2f6      	bcs.n	80069f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6892      	ldr	r2, [r2, #8]
 8006a50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6852      	ldr	r2, [r2, #4]
 8006a5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d103      	bne.n	8006a6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	1e5a      	subs	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006aba:	f001 fd0b 	bl	80084d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aca:	fb01 f303 	mul.w	r3, r1, r3
 8006ace:	441a      	add	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	3b01      	subs	r3, #1
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	22ff      	movs	r2, #255	; 0xff
 8006afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	22ff      	movs	r2, #255	; 0xff
 8006b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d114      	bne.n	8006b3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01a      	beq.n	8006b4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3310      	adds	r3, #16
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f8e5 	bl	8007cec <xTaskRemoveFromEventList>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d012      	beq.n	8006b4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <xQueueGenericReset+0xcc>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	e009      	b.n	8006b4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fef1 	bl	8006926 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3324      	adds	r3, #36	; 0x24
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff feec 	bl	8006926 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b4e:	f001 fcf1 	bl	8008534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b52:	2301      	movs	r3, #1
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	613b      	str	r3, [r7, #16]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	fb02 f303 	mul.w	r3, r2, r3
 8006b92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3348      	adds	r3, #72	; 0x48
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 fdbd 	bl	8008718 <pvPortMalloc>
 8006b9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d011      	beq.n	8006bca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	3348      	adds	r3, #72	; 0x48
 8006bae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bb8:	79fa      	ldrb	r2, [r7, #7]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f805 	bl	8006bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bca:	69bb      	ldr	r3, [r7, #24]
	}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d103      	bne.n	8006bf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e002      	b.n	8006bf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c02:	2101      	movs	r1, #1
 8006c04:	69b8      	ldr	r0, [r7, #24]
 8006c06:	f7ff ff43 	bl	8006a90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00e      	beq.n	8006c3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c32:	2300      	movs	r3, #0
 8006c34:	2200      	movs	r2, #0
 8006c36:	2100      	movs	r1, #0
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f81d 	bl	8006c78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c50:	2301      	movs	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	6939      	ldr	r1, [r7, #16]
 8006c5e:	6978      	ldr	r0, [r7, #20]
 8006c60:	f7ff ff7e 	bl	8006b60 <xQueueGenericCreate>
 8006c64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff ffd3 	bl	8006c12 <prvInitialiseMutex>

		return xNewQueue;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
	}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08e      	sub	sp, #56	; 0x38
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c86:	2300      	movs	r3, #0
 8006c88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueGenericSend+0x32>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d103      	bne.n	8006cb8 <xQueueGenericSend+0x40>
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <xQueueGenericSend+0x44>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <xQueueGenericSend+0x46>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <xQueueGenericSend+0x60>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d103      	bne.n	8006ce6 <xQueueGenericSend+0x6e>
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <xQueueGenericSend+0x72>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <xQueueGenericSend+0x74>
 8006cea:	2300      	movs	r3, #0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xQueueGenericSend+0x8e>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	623b      	str	r3, [r7, #32]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d06:	f001 f9b1 	bl	800806c <xTaskGetSchedulerState>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <xQueueGenericSend+0x9e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <xQueueGenericSend+0xa2>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <xQueueGenericSend+0xa4>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <xQueueGenericSend+0xbe>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	61fb      	str	r3, [r7, #28]
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d36:	f001 fbcd 	bl	80084d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d302      	bcc.n	8006d4c <xQueueGenericSend+0xd4>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d129      	bne.n	8006da0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d52:	f000 fa8b 	bl	800726c <prvCopyDataToQueue>
 8006d56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	3324      	adds	r3, #36	; 0x24
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 ffc1 	bl	8007cec <xTaskRemoveFromEventList>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d013      	beq.n	8006d98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d70:	4b3f      	ldr	r3, [pc, #252]	; (8006e70 <xQueueGenericSend+0x1f8>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	e00a      	b.n	8006d98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d007      	beq.n	8006d98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d88:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <xQueueGenericSend+0x1f8>)
 8006d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d98:	f001 fbcc 	bl	8008534 <vPortExitCritical>
				return pdPASS;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e063      	b.n	8006e68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d103      	bne.n	8006dae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006da6:	f001 fbc5 	bl	8008534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e05c      	b.n	8006e68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006db4:	f107 0314 	add.w	r3, r7, #20
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fff9 	bl	8007db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dc2:	f001 fbb7 	bl	8008534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dc6:	f000 fda9 	bl	800791c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dca:	f001 fb83 	bl	80084d4 <vPortEnterCritical>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd4:	b25b      	sxtb	r3, r3
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dda:	d103      	bne.n	8006de4 <xQueueGenericSend+0x16c>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dea:	b25b      	sxtb	r3, r3
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df0:	d103      	bne.n	8006dfa <xQueueGenericSend+0x182>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dfa:	f001 fb9b 	bl	8008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dfe:	1d3a      	adds	r2, r7, #4
 8006e00:	f107 0314 	add.w	r3, r7, #20
 8006e04:	4611      	mov	r1, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 ffe8 	bl	8007ddc <xTaskCheckForTimeOut>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d124      	bne.n	8006e5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e14:	f000 fb22 	bl	800745c <prvIsQueueFull>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d018      	beq.n	8006e50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	3310      	adds	r3, #16
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 ff3c 	bl	8007ca4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e2e:	f000 faad 	bl	800738c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e32:	f000 fd81 	bl	8007938 <xTaskResumeAll>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f47f af7c 	bne.w	8006d36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <xQueueGenericSend+0x1f8>)
 8006e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	e772      	b.n	8006d36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e52:	f000 fa9b 	bl	800738c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e56:	f000 fd6f 	bl	8007938 <xTaskResumeAll>
 8006e5a:	e76c      	b.n	8006d36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e5e:	f000 fa95 	bl	800738c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e62:	f000 fd69 	bl	8007938 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3738      	adds	r7, #56	; 0x38
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b090      	sub	sp, #64	; 0x40
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <xQueueGenericSendFromISR+0x3c>
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <xQueueGenericSendFromISR+0x40>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <xQueueGenericSendFromISR+0x42>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d103      	bne.n	8006ede <xQueueGenericSendFromISR+0x6a>
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <xQueueGenericSendFromISR+0x6e>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <xQueueGenericSendFromISR+0x70>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	623b      	str	r3, [r7, #32]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006efe:	f001 fbcb 	bl	8008698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f02:	f3ef 8211 	mrs	r2, BASEPRI
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	61fa      	str	r2, [r7, #28]
 8006f18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <xQueueGenericSendFromISR+0xbc>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d12f      	bne.n	8006f90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f46:	f000 f991 	bl	800726c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f52:	d112      	bne.n	8006f7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d016      	beq.n	8006f8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fec3 	bl	8007cec <xTaskRemoveFromEventList>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e007      	b.n	8006f8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f7e:	3301      	adds	r3, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	b25a      	sxtb	r2, r3
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f8e:	e001      	b.n	8006f94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3740      	adds	r7, #64	; 0x40
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08c      	sub	sp, #48	; 0x30
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <xQueueReceive+0x30>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	623b      	str	r3, [r7, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <xQueueReceive+0x3e>
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <xQueueReceive+0x42>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <xQueueReceive+0x44>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xQueueReceive+0x5e>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	61fb      	str	r3, [r7, #28]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800700a:	f001 f82f 	bl	800806c <xTaskGetSchedulerState>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <xQueueReceive+0x6e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <xQueueReceive+0x72>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <xQueueReceive+0x74>
 800701e:	2300      	movs	r3, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <xQueueReceive+0x8e>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	61bb      	str	r3, [r7, #24]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800703a:	f001 fa4b 	bl	80084d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01f      	beq.n	800708a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704e:	f000 f977 	bl	8007340 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	1e5a      	subs	r2, r3, #1
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00f      	beq.n	8007082 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	3310      	adds	r3, #16
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fe40 	bl	8007cec <xTaskRemoveFromEventList>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007072:	4b3d      	ldr	r3, [pc, #244]	; (8007168 <xQueueReceive+0x1bc>)
 8007074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007082:	f001 fa57 	bl	8008534 <vPortExitCritical>
				return pdPASS;
 8007086:	2301      	movs	r3, #1
 8007088:	e069      	b.n	800715e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007090:	f001 fa50 	bl	8008534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007094:	2300      	movs	r3, #0
 8007096:	e062      	b.n	800715e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800709e:	f107 0310 	add.w	r3, r7, #16
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fe84 	bl	8007db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070ac:	f001 fa42 	bl	8008534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070b0:	f000 fc34 	bl	800791c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070b4:	f001 fa0e 	bl	80084d4 <vPortEnterCritical>
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070be:	b25b      	sxtb	r3, r3
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c4:	d103      	bne.n	80070ce <xQueueReceive+0x122>
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070d4:	b25b      	sxtb	r3, r3
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070da:	d103      	bne.n	80070e4 <xQueueReceive+0x138>
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070e4:	f001 fa26 	bl	8008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070e8:	1d3a      	adds	r2, r7, #4
 80070ea:	f107 0310 	add.w	r3, r7, #16
 80070ee:	4611      	mov	r1, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fe73 	bl	8007ddc <xTaskCheckForTimeOut>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d123      	bne.n	8007144 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fe:	f000 f997 	bl	8007430 <prvIsQueueEmpty>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d017      	beq.n	8007138 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	3324      	adds	r3, #36	; 0x24
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4611      	mov	r1, r2
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fdc7 	bl	8007ca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007118:	f000 f938 	bl	800738c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800711c:	f000 fc0c 	bl	8007938 <xTaskResumeAll>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d189      	bne.n	800703a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007126:	4b10      	ldr	r3, [pc, #64]	; (8007168 <xQueueReceive+0x1bc>)
 8007128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	e780      	b.n	800703a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800713a:	f000 f927 	bl	800738c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800713e:	f000 fbfb 	bl	8007938 <xTaskResumeAll>
 8007142:	e77a      	b.n	800703a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007146:	f000 f921 	bl	800738c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800714a:	f000 fbf5 	bl	8007938 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800714e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007150:	f000 f96e 	bl	8007430 <prvIsQueueEmpty>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	f43f af6f 	beq.w	800703a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800715c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800715e:	4618      	mov	r0, r3
 8007160:	3730      	adds	r7, #48	; 0x30
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08e      	sub	sp, #56	; 0x38
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	623b      	str	r3, [r7, #32]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <xQueueReceiveFromISR+0x3a>
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <xQueueReceiveFromISR+0x3e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <xQueueReceiveFromISR+0x40>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	61fb      	str	r3, [r7, #28]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071c6:	f001 fa67 	bl	8008698 <vPortValidateInterruptPriority>
	__asm volatile
 80071ca:	f3ef 8211 	mrs	r2, BASEPRI
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	61ba      	str	r2, [r7, #24]
 80071e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d02f      	beq.n	8007252 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007200:	f000 f89e 	bl	8007340 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	1e5a      	subs	r2, r3, #1
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800720c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007214:	d112      	bne.n	800723c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d016      	beq.n	800724c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	3310      	adds	r3, #16
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fd62 	bl	8007cec <xTaskRemoveFromEventList>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00e      	beq.n	800724c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e007      	b.n	800724c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800723c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007240:	3301      	adds	r3, #1
 8007242:	b2db      	uxtb	r3, r3
 8007244:	b25a      	sxtb	r2, r3
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800724c:	2301      	movs	r3, #1
 800724e:	637b      	str	r3, [r7, #52]	; 0x34
 8007250:	e001      	b.n	8007256 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007252:	2300      	movs	r3, #0
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	613b      	str	r3, [r7, #16]
	__asm volatile
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f383 8811 	msr	BASEPRI, r3
}
 8007260:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007264:	4618      	mov	r0, r3
 8007266:	3738      	adds	r7, #56	; 0x38
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d14d      	bne.n	800732e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 ff06 	bl	80080a8 <xTaskPriorityDisinherit>
 800729c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	609a      	str	r2, [r3, #8]
 80072a4:	e043      	b.n	800732e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d119      	bne.n	80072e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6858      	ldr	r0, [r3, #4]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	461a      	mov	r2, r3
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	f001 fc44 	bl	8008b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d32b      	bcc.n	800732e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	605a      	str	r2, [r3, #4]
 80072de:	e026      	b.n	800732e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68d8      	ldr	r0, [r3, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	461a      	mov	r2, r3
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	f001 fc2a 	bl	8008b44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	425b      	negs	r3, r3
 80072fa:	441a      	add	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d207      	bcs.n	800731c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	425b      	negs	r3, r3
 8007316:	441a      	add	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d105      	bne.n	800732e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3b01      	subs	r3, #1
 800732c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007336:	697b      	ldr	r3, [r7, #20]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d018      	beq.n	8007384 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	441a      	add	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	429a      	cmp	r2, r3
 800736a:	d303      	bcc.n	8007374 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68d9      	ldr	r1, [r3, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	461a      	mov	r2, r3
 800737e:	6838      	ldr	r0, [r7, #0]
 8007380:	f001 fbe0 	bl	8008b44 <memcpy>
	}
}
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007394:	f001 f89e 	bl	80084d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800739e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073a0:	e011      	b.n	80073c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d012      	beq.n	80073d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3324      	adds	r3, #36	; 0x24
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fc9c 	bl	8007cec <xTaskRemoveFromEventList>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073ba:	f000 fd71 	bl	8007ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	dce9      	bgt.n	80073a2 <prvUnlockQueue+0x16>
 80073ce:	e000      	b.n	80073d2 <prvUnlockQueue+0x46>
					break;
 80073d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	22ff      	movs	r2, #255	; 0xff
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073da:	f001 f8ab 	bl	8008534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073de:	f001 f879 	bl	80084d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073ea:	e011      	b.n	8007410 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d012      	beq.n	800741a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3310      	adds	r3, #16
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fc77 	bl	8007cec <xTaskRemoveFromEventList>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007404:	f000 fd4c 	bl	8007ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	3b01      	subs	r3, #1
 800740c:	b2db      	uxtb	r3, r3
 800740e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	dce9      	bgt.n	80073ec <prvUnlockQueue+0x60>
 8007418:	e000      	b.n	800741c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800741a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	22ff      	movs	r2, #255	; 0xff
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007424:	f001 f886 	bl	8008534 <vPortExitCritical>
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007438:	f001 f84c 	bl	80084d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	2b00      	cmp	r3, #0
 8007442:	d102      	bne.n	800744a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e001      	b.n	800744e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800744e:	f001 f871 	bl	8008534 <vPortExitCritical>

	return xReturn;
 8007452:	68fb      	ldr	r3, [r7, #12]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007464:	f001 f836 	bl	80084d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	429a      	cmp	r2, r3
 8007472:	d102      	bne.n	800747a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007474:	2301      	movs	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e001      	b.n	800747e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800747e:	f001 f859 	bl	8008534 <vPortExitCritical>

	return xReturn;
 8007482:	68fb      	ldr	r3, [r7, #12]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08e      	sub	sp, #56	; 0x38
 8007490:	af04      	add	r7, sp, #16
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	623b      	str	r3, [r7, #32]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	61fb      	str	r3, [r7, #28]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074d2:	23b4      	movs	r3, #180	; 0xb4
 80074d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2bb4      	cmp	r3, #180	; 0xb4
 80074da:	d00a      	beq.n	80074f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	61bb      	str	r3, [r7, #24]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d01e      	beq.n	8007538 <xTaskCreateStatic+0xac>
 80074fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01b      	beq.n	8007538 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007508:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	2202      	movs	r2, #2
 800750e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007512:	2300      	movs	r3, #0
 8007514:	9303      	str	r3, [sp, #12]
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	9302      	str	r3, [sp, #8]
 800751a:	f107 0314 	add.w	r3, r7, #20
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 f850 	bl	80075d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007532:	f000 f8eb 	bl	800770c <prvAddNewTaskToReadyList>
 8007536:	e001      	b.n	800753c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800753c:	697b      	ldr	r3, [r7, #20]
	}
 800753e:	4618      	mov	r0, r3
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007546:	b580      	push	{r7, lr}
 8007548:	b08c      	sub	sp, #48	; 0x30
 800754a:	af04      	add	r7, sp, #16
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	4613      	mov	r3, r2
 8007554:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007556:	88fb      	ldrh	r3, [r7, #6]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4618      	mov	r0, r3
 800755c:	f001 f8dc 	bl	8008718 <pvPortMalloc>
 8007560:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00e      	beq.n	8007586 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007568:	20b4      	movs	r0, #180	; 0xb4
 800756a:	f001 f8d5 	bl	8008718 <pvPortMalloc>
 800756e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
 800757c:	e005      	b.n	800758a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800757e:	6978      	ldr	r0, [r7, #20]
 8007580:	f001 f996 	bl	80088b0 <vPortFree>
 8007584:	e001      	b.n	800758a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d017      	beq.n	80075c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	2300      	movs	r3, #0
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	9302      	str	r3, [sp, #8]
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 f80e 	bl	80075d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075b4:	69f8      	ldr	r0, [r7, #28]
 80075b6:	f000 f8a9 	bl	800770c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075ba:	2301      	movs	r3, #1
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e002      	b.n	80075c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075c6:	69bb      	ldr	r3, [r7, #24]
	}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075e8:	3b01      	subs	r3, #1
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f023 0307 	bic.w	r3, r3, #7
 80075f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	617b      	str	r3, [r7, #20]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01f      	beq.n	800765e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	e012      	b.n	800764a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	7819      	ldrb	r1, [r3, #0]
 800762c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	3334      	adds	r3, #52	; 0x34
 8007634:	460a      	mov	r2, r1
 8007636:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	3301      	adds	r3, #1
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b0f      	cmp	r3, #15
 800764e:	d9e9      	bls.n	8007624 <prvInitialiseNewTask+0x54>
 8007650:	e000      	b.n	8007654 <prvInitialiseNewTask+0x84>
			{
				break;
 8007652:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800765c:	e003      	b.n	8007666 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	2b06      	cmp	r3, #6
 800766a:	d901      	bls.n	8007670 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800766c:	2306      	movs	r3, #6
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007674:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800767a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	2200      	movs	r2, #0
 8007680:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	3304      	adds	r3, #4
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff f96d 	bl	8006966 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	3318      	adds	r3, #24
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff f968 	bl	8006966 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	f1c3 0207 	rsb	r2, r3, #7
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	334c      	adds	r3, #76	; 0x4c
 80076c0:	2260      	movs	r2, #96	; 0x60
 80076c2:	2100      	movs	r1, #0
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 fa4b 	bl	8008b60 <memset>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	4a0c      	ldr	r2, [pc, #48]	; (8007700 <prvInitialiseNewTask+0x130>)
 80076ce:	651a      	str	r2, [r3, #80]	; 0x50
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <prvInitialiseNewTask+0x134>)
 80076d4:	655a      	str	r2, [r3, #84]	; 0x54
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	4a0b      	ldr	r2, [pc, #44]	; (8007708 <prvInitialiseNewTask+0x138>)
 80076da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	68f9      	ldr	r1, [r7, #12]
 80076e0:	69b8      	ldr	r0, [r7, #24]
 80076e2:	f000 fdcd 	bl	8008280 <pxPortInitialiseStack>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076f8:	bf00      	nop
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	0800953c 	.word	0x0800953c
 8007704:	0800955c 	.word	0x0800955c
 8007708:	0800951c 	.word	0x0800951c

0800770c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007714:	f000 fede 	bl	80084d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007718:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <prvAddNewTaskToReadyList+0xb8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <prvAddNewTaskToReadyList+0xb8>)
 8007720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007722:	4b29      	ldr	r3, [pc, #164]	; (80077c8 <prvAddNewTaskToReadyList+0xbc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800772a:	4a27      	ldr	r2, [pc, #156]	; (80077c8 <prvAddNewTaskToReadyList+0xbc>)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007730:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <prvAddNewTaskToReadyList+0xb8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d110      	bne.n	800775a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007738:	f000 fbd6 	bl	8007ee8 <prvInitialiseTaskLists>
 800773c:	e00d      	b.n	800775a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800773e:	4b23      	ldr	r3, [pc, #140]	; (80077cc <prvAddNewTaskToReadyList+0xc0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007746:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <prvAddNewTaskToReadyList+0xbc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	429a      	cmp	r2, r3
 8007752:	d802      	bhi.n	800775a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007754:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <prvAddNewTaskToReadyList+0xbc>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800775a:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <prvAddNewTaskToReadyList+0xc4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <prvAddNewTaskToReadyList+0xc4>)
 8007762:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <prvAddNewTaskToReadyList+0xc8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4313      	orrs	r3, r2
 8007772:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <prvAddNewTaskToReadyList+0xc8>)
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <prvAddNewTaskToReadyList+0xcc>)
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3304      	adds	r3, #4
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f7ff f8f7 	bl	8006980 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007792:	f000 fecf 	bl	8008534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007796:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <prvAddNewTaskToReadyList+0xc0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800779e:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <prvAddNewTaskToReadyList+0xbc>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d207      	bcs.n	80077bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <prvAddNewTaskToReadyList+0xd0>)
 80077ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000454 	.word	0x20000454
 80077c8:	20000354 	.word	0x20000354
 80077cc:	20000460 	.word	0x20000460
 80077d0:	20000470 	.word	0x20000470
 80077d4:	2000045c 	.word	0x2000045c
 80077d8:	20000358 	.word	0x20000358
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d017      	beq.n	8007822 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <vTaskDelay+0x60>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <vTaskDelay+0x30>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	60bb      	str	r3, [r7, #8]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007810:	f000 f884 	bl	800791c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fccc 	bl	80081b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800781c:	f000 f88c 	bl	8007938 <xTaskResumeAll>
 8007820:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <vTaskDelay+0x64>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	2000047c 	.word	0x2000047c
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007856:	463a      	mov	r2, r7
 8007858:	1d39      	adds	r1, r7, #4
 800785a:	f107 0308 	add.w	r3, r7, #8
 800785e:	4618      	mov	r0, r3
 8007860:	f7f8 fd06 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	9202      	str	r2, [sp, #8]
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	2300      	movs	r3, #0
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	460a      	mov	r2, r1
 8007876:	4921      	ldr	r1, [pc, #132]	; (80078fc <vTaskStartScheduler+0xb4>)
 8007878:	4821      	ldr	r0, [pc, #132]	; (8007900 <vTaskStartScheduler+0xb8>)
 800787a:	f7ff fe07 	bl	800748c <xTaskCreateStatic>
 800787e:	4603      	mov	r3, r0
 8007880:	4a20      	ldr	r2, [pc, #128]	; (8007904 <vTaskStartScheduler+0xbc>)
 8007882:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007884:	4b1f      	ldr	r3, [pc, #124]	; (8007904 <vTaskStartScheduler+0xbc>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800788c:	2301      	movs	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e001      	b.n	8007896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d11b      	bne.n	80078d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	613b      	str	r3, [r7, #16]
}
 80078ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <vTaskStartScheduler+0xc0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	334c      	adds	r3, #76	; 0x4c
 80078b6:	4a15      	ldr	r2, [pc, #84]	; (800790c <vTaskStartScheduler+0xc4>)
 80078b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078ba:	4b15      	ldr	r3, [pc, #84]	; (8007910 <vTaskStartScheduler+0xc8>)
 80078bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078c2:	4b14      	ldr	r3, [pc, #80]	; (8007914 <vTaskStartScheduler+0xcc>)
 80078c4:	2201      	movs	r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078c8:	4b13      	ldr	r3, [pc, #76]	; (8007918 <vTaskStartScheduler+0xd0>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ce:	f000 fd5f 	bl	8008390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078d2:	e00e      	b.n	80078f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078da:	d10a      	bne.n	80078f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60fb      	str	r3, [r7, #12]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <vTaskStartScheduler+0xa8>
}
 80078f2:	bf00      	nop
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	080094cc 	.word	0x080094cc
 8007900:	08007eb9 	.word	0x08007eb9
 8007904:	20000478 	.word	0x20000478
 8007908:	20000354 	.word	0x20000354
 800790c:	20000014 	.word	0x20000014
 8007910:	20000474 	.word	0x20000474
 8007914:	20000460 	.word	0x20000460
 8007918:	20000458 	.word	0x20000458

0800791c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <vTaskSuspendAll+0x18>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3301      	adds	r3, #1
 8007926:	4a03      	ldr	r2, [pc, #12]	; (8007934 <vTaskSuspendAll+0x18>)
 8007928:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800792a:	bf00      	nop
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	2000047c 	.word	0x2000047c

08007938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007942:	2300      	movs	r3, #0
 8007944:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007946:	4b41      	ldr	r3, [pc, #260]	; (8007a4c <xTaskResumeAll+0x114>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <xTaskResumeAll+0x2c>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007964:	f000 fdb6 	bl	80084d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007968:	4b38      	ldr	r3, [pc, #224]	; (8007a4c <xTaskResumeAll+0x114>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3b01      	subs	r3, #1
 800796e:	4a37      	ldr	r2, [pc, #220]	; (8007a4c <xTaskResumeAll+0x114>)
 8007970:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007972:	4b36      	ldr	r3, [pc, #216]	; (8007a4c <xTaskResumeAll+0x114>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d161      	bne.n	8007a3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800797a:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <xTaskResumeAll+0x118>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d05d      	beq.n	8007a3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007982:	e02e      	b.n	80079e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007984:	4b33      	ldr	r3, [pc, #204]	; (8007a54 <xTaskResumeAll+0x11c>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3318      	adds	r3, #24
 8007990:	4618      	mov	r0, r3
 8007992:	f7ff f852 	bl	8006a3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3304      	adds	r3, #4
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff f84d 	bl	8006a3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	2201      	movs	r2, #1
 80079a6:	409a      	lsls	r2, r3
 80079a8:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <xTaskResumeAll+0x120>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	4a2a      	ldr	r2, [pc, #168]	; (8007a58 <xTaskResumeAll+0x120>)
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4a27      	ldr	r2, [pc, #156]	; (8007a5c <xTaskResumeAll+0x124>)
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3304      	adds	r3, #4
 80079c6:	4619      	mov	r1, r3
 80079c8:	4610      	mov	r0, r2
 80079ca:	f7fe ffd9 	bl	8006980 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <xTaskResumeAll+0x128>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	429a      	cmp	r2, r3
 80079da:	d302      	bcc.n	80079e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079dc:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <xTaskResumeAll+0x12c>)
 80079de:	2201      	movs	r2, #1
 80079e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <xTaskResumeAll+0x11c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1cc      	bne.n	8007984 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079f0:	f000 fb1c 	bl	800802c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079f4:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <xTaskResumeAll+0x130>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d010      	beq.n	8007a22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a00:	f000 f836 	bl	8007a70 <xTaskIncrementTick>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a0a:	4b16      	ldr	r3, [pc, #88]	; (8007a64 <xTaskResumeAll+0x12c>)
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f1      	bne.n	8007a00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a1c:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <xTaskResumeAll+0x130>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a22:	4b10      	ldr	r3, [pc, #64]	; (8007a64 <xTaskResumeAll+0x12c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <xTaskResumeAll+0x134>)
 8007a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a3e:	f000 fd79 	bl	8008534 <vPortExitCritical>

	return xAlreadyYielded;
 8007a42:	68bb      	ldr	r3, [r7, #8]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	2000047c 	.word	0x2000047c
 8007a50:	20000454 	.word	0x20000454
 8007a54:	20000414 	.word	0x20000414
 8007a58:	2000045c 	.word	0x2000045c
 8007a5c:	20000358 	.word	0x20000358
 8007a60:	20000354 	.word	0x20000354
 8007a64:	20000468 	.word	0x20000468
 8007a68:	20000464 	.word	0x20000464
 8007a6c:	e000ed04 	.word	0xe000ed04

08007a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a7a:	4b4e      	ldr	r3, [pc, #312]	; (8007bb4 <xTaskIncrementTick+0x144>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 808e 	bne.w	8007ba0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a84:	4b4c      	ldr	r3, [pc, #304]	; (8007bb8 <xTaskIncrementTick+0x148>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a8c:	4a4a      	ldr	r2, [pc, #296]	; (8007bb8 <xTaskIncrementTick+0x148>)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d120      	bne.n	8007ada <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a98:	4b48      	ldr	r3, [pc, #288]	; (8007bbc <xTaskIncrementTick+0x14c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	603b      	str	r3, [r7, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <xTaskIncrementTick+0x46>
 8007ab8:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <xTaskIncrementTick+0x14c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	4b40      	ldr	r3, [pc, #256]	; (8007bc0 <xTaskIncrementTick+0x150>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a3e      	ldr	r2, [pc, #248]	; (8007bbc <xTaskIncrementTick+0x14c>)
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	4a3e      	ldr	r2, [pc, #248]	; (8007bc0 <xTaskIncrementTick+0x150>)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	4b3d      	ldr	r3, [pc, #244]	; (8007bc4 <xTaskIncrementTick+0x154>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a3c      	ldr	r2, [pc, #240]	; (8007bc4 <xTaskIncrementTick+0x154>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	f000 faa9 	bl	800802c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ada:	4b3b      	ldr	r3, [pc, #236]	; (8007bc8 <xTaskIncrementTick+0x158>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d348      	bcc.n	8007b76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae4:	4b35      	ldr	r3, [pc, #212]	; (8007bbc <xTaskIncrementTick+0x14c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aee:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <xTaskIncrementTick+0x158>)
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af4:	601a      	str	r2, [r3, #0]
					break;
 8007af6:	e03e      	b.n	8007b76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af8:	4b30      	ldr	r3, [pc, #192]	; (8007bbc <xTaskIncrementTick+0x14c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d203      	bcs.n	8007b18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b10:	4a2d      	ldr	r2, [pc, #180]	; (8007bc8 <xTaskIncrementTick+0x158>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b16:	e02e      	b.n	8007b76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe ff8c 	bl	8006a3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe ff83 	bl	8006a3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	2201      	movs	r2, #1
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	4b23      	ldr	r3, [pc, #140]	; (8007bcc <xTaskIncrementTick+0x15c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	4a22      	ldr	r2, [pc, #136]	; (8007bcc <xTaskIncrementTick+0x15c>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a1f      	ldr	r2, [pc, #124]	; (8007bd0 <xTaskIncrementTick+0x160>)
 8007b54:	441a      	add	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7fe ff0f 	bl	8006980 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <xTaskIncrementTick+0x164>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d3b9      	bcc.n	8007ae4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b70:	2301      	movs	r3, #1
 8007b72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b74:	e7b6      	b.n	8007ae4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b76:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <xTaskIncrementTick+0x164>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	4914      	ldr	r1, [pc, #80]	; (8007bd0 <xTaskIncrementTick+0x160>)
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	440b      	add	r3, r1
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d901      	bls.n	8007b92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b92:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <xTaskIncrementTick+0x168>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	e004      	b.n	8007baa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ba0:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <xTaskIncrementTick+0x16c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <xTaskIncrementTick+0x16c>)
 8007ba8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007baa:	697b      	ldr	r3, [r7, #20]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	2000047c 	.word	0x2000047c
 8007bb8:	20000458 	.word	0x20000458
 8007bbc:	2000040c 	.word	0x2000040c
 8007bc0:	20000410 	.word	0x20000410
 8007bc4:	2000046c 	.word	0x2000046c
 8007bc8:	20000474 	.word	0x20000474
 8007bcc:	2000045c 	.word	0x2000045c
 8007bd0:	20000358 	.word	0x20000358
 8007bd4:	20000354 	.word	0x20000354
 8007bd8:	20000468 	.word	0x20000468
 8007bdc:	20000464 	.word	0x20000464

08007be0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007be6:	4b29      	ldr	r3, [pc, #164]	; (8007c8c <vTaskSwitchContext+0xac>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bee:	4b28      	ldr	r3, [pc, #160]	; (8007c90 <vTaskSwitchContext+0xb0>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf4:	e044      	b.n	8007c80 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007bf6:	4b26      	ldr	r3, [pc, #152]	; (8007c90 <vTaskSwitchContext+0xb0>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <vTaskSwitchContext+0xb4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	fab3 f383 	clz	r3, r3
 8007c08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	f1c3 031f 	rsb	r3, r3, #31
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	4921      	ldr	r1, [pc, #132]	; (8007c98 <vTaskSwitchContext+0xb8>)
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	440b      	add	r3, r1
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	607b      	str	r3, [r7, #4]
}
 8007c38:	bf00      	nop
 8007c3a:	e7fe      	b.n	8007c3a <vTaskSwitchContext+0x5a>
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4a14      	ldr	r2, [pc, #80]	; (8007c98 <vTaskSwitchContext+0xb8>)
 8007c48:	4413      	add	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	605a      	str	r2, [r3, #4]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d104      	bne.n	8007c6c <vTaskSwitchContext+0x8c>
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <vTaskSwitchContext+0xbc>)
 8007c74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <vTaskSwitchContext+0xbc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	334c      	adds	r3, #76	; 0x4c
 8007c7c:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <vTaskSwitchContext+0xc0>)
 8007c7e:	6013      	str	r3, [r2, #0]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	2000047c 	.word	0x2000047c
 8007c90:	20000468 	.word	0x20000468
 8007c94:	2000045c 	.word	0x2000045c
 8007c98:	20000358 	.word	0x20000358
 8007c9c:	20000354 	.word	0x20000354
 8007ca0:	20000014 	.word	0x20000014

08007ca4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	60fb      	str	r3, [r7, #12]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cca:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <vTaskPlaceOnEventList+0x44>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3318      	adds	r3, #24
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fe fe78 	bl	80069c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cd8:	2101      	movs	r1, #1
 8007cda:	6838      	ldr	r0, [r7, #0]
 8007cdc:	f000 fa6a 	bl	80081b4 <prvAddCurrentTaskToDelayedList>
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000354 	.word	0x20000354

08007cec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60fb      	str	r3, [r7, #12]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe fe8c 	bl	8006a3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d22:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <xTaskRemoveFromEventList+0xac>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d11c      	bne.n	8007d64 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fe83 	bl	8006a3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	4b17      	ldr	r3, [pc, #92]	; (8007d9c <xTaskRemoveFromEventList+0xb0>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	4a16      	ldr	r2, [pc, #88]	; (8007d9c <xTaskRemoveFromEventList+0xb0>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <xTaskRemoveFromEventList+0xb4>)
 8007d54:	441a      	add	r2, r3
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fe fe0f 	bl	8006980 <vListInsertEnd>
 8007d62:	e005      	b.n	8007d70 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	3318      	adds	r3, #24
 8007d68:	4619      	mov	r1, r3
 8007d6a:	480e      	ldr	r0, [pc, #56]	; (8007da4 <xTaskRemoveFromEventList+0xb8>)
 8007d6c:	f7fe fe08 	bl	8006980 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <xTaskRemoveFromEventList+0xbc>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d905      	bls.n	8007d8a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d82:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <xTaskRemoveFromEventList+0xc0>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	e001      	b.n	8007d8e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d8e:	697b      	ldr	r3, [r7, #20]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	2000047c 	.word	0x2000047c
 8007d9c:	2000045c 	.word	0x2000045c
 8007da0:	20000358 	.word	0x20000358
 8007da4:	20000414 	.word	0x20000414
 8007da8:	20000354 	.word	0x20000354
 8007dac:	20000468 	.word	0x20000468

08007db0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007db8:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <vTaskInternalSetTimeOutState+0x24>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <vTaskInternalSetTimeOutState+0x28>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	605a      	str	r2, [r3, #4]
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	2000046c 	.word	0x2000046c
 8007dd8:	20000458 	.word	0x20000458

08007ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	613b      	str	r3, [r7, #16]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	60fb      	str	r3, [r7, #12]
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e1e:	f000 fb59 	bl	80084d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e22:	4b1d      	ldr	r3, [pc, #116]	; (8007e98 <xTaskCheckForTimeOut+0xbc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e3a:	d102      	bne.n	8007e42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	e023      	b.n	8007e8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <xTaskCheckForTimeOut+0xc0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d007      	beq.n	8007e5e <xTaskCheckForTimeOut+0x82>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d302      	bcc.n	8007e5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e015      	b.n	8007e8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d20b      	bcs.n	8007e80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff ff9b 	bl	8007db0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	e004      	b.n	8007e8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e8a:	f000 fb53 	bl	8008534 <vPortExitCritical>

	return xReturn;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20000458 	.word	0x20000458
 8007e9c:	2000046c 	.word	0x2000046c

08007ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ea4:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <vTaskMissedYield+0x14>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	20000468 	.word	0x20000468

08007eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ec0:	f000 f852 	bl	8007f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <prvIdleTask+0x28>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d9f9      	bls.n	8007ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <prvIdleTask+0x2c>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007edc:	e7f0      	b.n	8007ec0 <prvIdleTask+0x8>
 8007ede:	bf00      	nop
 8007ee0:	20000358 	.word	0x20000358
 8007ee4:	e000ed04 	.word	0xe000ed04

08007ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eee:	2300      	movs	r3, #0
 8007ef0:	607b      	str	r3, [r7, #4]
 8007ef2:	e00c      	b.n	8007f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4a12      	ldr	r2, [pc, #72]	; (8007f48 <prvInitialiseTaskLists+0x60>)
 8007f00:	4413      	add	r3, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fd0f 	bl	8006926 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b06      	cmp	r3, #6
 8007f12:	d9ef      	bls.n	8007ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f14:	480d      	ldr	r0, [pc, #52]	; (8007f4c <prvInitialiseTaskLists+0x64>)
 8007f16:	f7fe fd06 	bl	8006926 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f1a:	480d      	ldr	r0, [pc, #52]	; (8007f50 <prvInitialiseTaskLists+0x68>)
 8007f1c:	f7fe fd03 	bl	8006926 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f20:	480c      	ldr	r0, [pc, #48]	; (8007f54 <prvInitialiseTaskLists+0x6c>)
 8007f22:	f7fe fd00 	bl	8006926 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f26:	480c      	ldr	r0, [pc, #48]	; (8007f58 <prvInitialiseTaskLists+0x70>)
 8007f28:	f7fe fcfd 	bl	8006926 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f2c:	480b      	ldr	r0, [pc, #44]	; (8007f5c <prvInitialiseTaskLists+0x74>)
 8007f2e:	f7fe fcfa 	bl	8006926 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <prvInitialiseTaskLists+0x78>)
 8007f34:	4a05      	ldr	r2, [pc, #20]	; (8007f4c <prvInitialiseTaskLists+0x64>)
 8007f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <prvInitialiseTaskLists+0x7c>)
 8007f3a:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <prvInitialiseTaskLists+0x68>)
 8007f3c:	601a      	str	r2, [r3, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000358 	.word	0x20000358
 8007f4c:	200003e4 	.word	0x200003e4
 8007f50:	200003f8 	.word	0x200003f8
 8007f54:	20000414 	.word	0x20000414
 8007f58:	20000428 	.word	0x20000428
 8007f5c:	20000440 	.word	0x20000440
 8007f60:	2000040c 	.word	0x2000040c
 8007f64:	20000410 	.word	0x20000410

08007f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f6e:	e019      	b.n	8007fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f70:	f000 fab0 	bl	80084d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <prvCheckTasksWaitingTermination+0x50>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fd5a 	bl	8006a3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <prvCheckTasksWaitingTermination+0x54>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <prvCheckTasksWaitingTermination+0x54>)
 8007f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f9a:	f000 facb 	bl	8008534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f810 	bl	8007fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e1      	bne.n	8007f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000428 	.word	0x20000428
 8007fbc:	20000454 	.word	0x20000454
 8007fc0:	2000043c 	.word	0x2000043c

08007fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	334c      	adds	r3, #76	; 0x4c
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fe35 	bl	8008c40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d108      	bne.n	8007ff2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fc63 	bl	80088b0 <vPortFree>
				vPortFree( pxTCB );
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc60 	bl	80088b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ff0:	e018      	b.n	8008024 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d103      	bne.n	8008004 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fc57 	bl	80088b0 <vPortFree>
	}
 8008002:	e00f      	b.n	8008024 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800800a:	2b02      	cmp	r3, #2
 800800c:	d00a      	beq.n	8008024 <prvDeleteTCB+0x60>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	60fb      	str	r3, [r7, #12]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <prvDeleteTCB+0x5e>
	}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008032:	4b0c      	ldr	r3, [pc, #48]	; (8008064 <prvResetNextTaskUnblockTime+0x38>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <prvResetNextTaskUnblockTime+0x3c>)
 800803e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008044:	e008      	b.n	8008058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008046:	4b07      	ldr	r3, [pc, #28]	; (8008064 <prvResetNextTaskUnblockTime+0x38>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	4a04      	ldr	r2, [pc, #16]	; (8008068 <prvResetNextTaskUnblockTime+0x3c>)
 8008056:	6013      	str	r3, [r2, #0]
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	2000040c 	.word	0x2000040c
 8008068:	20000474 	.word	0x20000474

0800806c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008072:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <xTaskGetSchedulerState+0x34>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800807a:	2301      	movs	r3, #1
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	e008      	b.n	8008092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008080:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <xTaskGetSchedulerState+0x38>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008088:	2302      	movs	r3, #2
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	e001      	b.n	8008092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800808e:	2300      	movs	r3, #0
 8008090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008092:	687b      	ldr	r3, [r7, #4]
	}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20000460 	.word	0x20000460
 80080a4:	2000047c 	.word	0x2000047c

080080a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d06e      	beq.n	800819c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080be:	4b3a      	ldr	r3, [pc, #232]	; (80081a8 <xTaskPriorityDisinherit+0x100>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d00a      	beq.n	80080de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	60fb      	str	r3, [r7, #12]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60bb      	str	r3, [r7, #8]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008100:	1e5a      	subs	r2, r3, #1
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	429a      	cmp	r2, r3
 8008110:	d044      	beq.n	800819c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008116:	2b00      	cmp	r3, #0
 8008118:	d140      	bne.n	800819c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	3304      	adds	r3, #4
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe fc8b 	bl	8006a3a <uxListRemove>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d115      	bne.n	8008156 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812e:	491f      	ldr	r1, [pc, #124]	; (80081ac <xTaskPriorityDisinherit+0x104>)
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xTaskPriorityDisinherit+0xae>
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	2201      	movs	r2, #1
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43da      	mvns	r2, r3
 800814c:	4b18      	ldr	r3, [pc, #96]	; (80081b0 <xTaskPriorityDisinherit+0x108>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4013      	ands	r3, r2
 8008152:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <xTaskPriorityDisinherit+0x108>)
 8008154:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	f1c3 0207 	rsb	r2, r3, #7
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	2201      	movs	r2, #1
 8008170:	409a      	lsls	r2, r3
 8008172:	4b0f      	ldr	r3, [pc, #60]	; (80081b0 <xTaskPriorityDisinherit+0x108>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4313      	orrs	r3, r2
 8008178:	4a0d      	ldr	r2, [pc, #52]	; (80081b0 <xTaskPriorityDisinherit+0x108>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4a08      	ldr	r2, [pc, #32]	; (80081ac <xTaskPriorityDisinherit+0x104>)
 800818a:	441a      	add	r2, r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7fe fbf4 	bl	8006980 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008198:	2301      	movs	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800819c:	697b      	ldr	r3, [r7, #20]
	}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000354 	.word	0x20000354
 80081ac:	20000358 	.word	0x20000358
 80081b0:	2000045c 	.word	0x2000045c

080081b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081be:	4b29      	ldr	r3, [pc, #164]	; (8008264 <prvAddCurrentTaskToDelayedList+0xb0>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081c4:	4b28      	ldr	r3, [pc, #160]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe fc35 	bl	8006a3a <uxListRemove>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10b      	bne.n	80081ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80081d6:	4b24      	ldr	r3, [pc, #144]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	2201      	movs	r2, #1
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	43da      	mvns	r2, r3
 80081e4:	4b21      	ldr	r3, [pc, #132]	; (800826c <prvAddCurrentTaskToDelayedList+0xb8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4013      	ands	r3, r2
 80081ea:	4a20      	ldr	r2, [pc, #128]	; (800826c <prvAddCurrentTaskToDelayedList+0xb8>)
 80081ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f4:	d10a      	bne.n	800820c <prvAddCurrentTaskToDelayedList+0x58>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3304      	adds	r3, #4
 8008202:	4619      	mov	r1, r3
 8008204:	481a      	ldr	r0, [pc, #104]	; (8008270 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008206:	f7fe fbbb 	bl	8006980 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800820a:	e026      	b.n	800825a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4413      	add	r3, r2
 8008212:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008214:	4b14      	ldr	r3, [pc, #80]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	429a      	cmp	r2, r3
 8008222:	d209      	bcs.n	8008238 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008224:	4b13      	ldr	r3, [pc, #76]	; (8008274 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3304      	adds	r3, #4
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f7fe fbc9 	bl	80069c8 <vListInsert>
}
 8008236:	e010      	b.n	800825a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <prvAddCurrentTaskToDelayedList+0xc4>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3304      	adds	r3, #4
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7fe fbbf 	bl	80069c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <prvAddCurrentTaskToDelayedList+0xc8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	429a      	cmp	r2, r3
 8008252:	d202      	bcs.n	800825a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008254:	4a09      	ldr	r2, [pc, #36]	; (800827c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6013      	str	r3, [r2, #0]
}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000458 	.word	0x20000458
 8008268:	20000354 	.word	0x20000354
 800826c:	2000045c 	.word	0x2000045c
 8008270:	20000440 	.word	0x20000440
 8008274:	20000410 	.word	0x20000410
 8008278:	2000040c 	.word	0x2000040c
 800827c:	20000474 	.word	0x20000474

08008280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3b04      	subs	r3, #4
 8008290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3b04      	subs	r3, #4
 800829e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f023 0201 	bic.w	r2, r3, #1
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3b04      	subs	r3, #4
 80082ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082b0:	4a0c      	ldr	r2, [pc, #48]	; (80082e4 <pxPortInitialiseStack+0x64>)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3b14      	subs	r3, #20
 80082ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3b04      	subs	r3, #4
 80082c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f06f 0202 	mvn.w	r2, #2
 80082ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3b20      	subs	r3, #32
 80082d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082d6:	68fb      	ldr	r3, [r7, #12]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	080082e9 	.word	0x080082e9

080082e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <prvTaskExitError+0x54>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082fa:	d00a      	beq.n	8008312 <prvTaskExitError+0x2a>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	60fb      	str	r3, [r7, #12]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <prvTaskExitError+0x28>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60bb      	str	r3, [r7, #8]
}
 8008324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008326:	bf00      	nop
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0fc      	beq.n	8008328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20000010 	.word	0x20000010

08008340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <pxCurrentTCBConst2>)
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	6808      	ldr	r0, [r1, #0]
 8008346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	f380 8809 	msr	PSP, r0
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8811 	msr	BASEPRI, r0
 800835a:	4770      	bx	lr
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst2>:
 8008360:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008368:	4808      	ldr	r0, [pc, #32]	; (800838c <prvPortStartFirstTask+0x24>)
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	6800      	ldr	r0, [r0, #0]
 800836e:	f380 8808 	msr	MSP, r0
 8008372:	f04f 0000 	mov.w	r0, #0
 8008376:	f380 8814 	msr	CONTROL, r0
 800837a:	b662      	cpsie	i
 800837c:	b661      	cpsie	f
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	df00      	svc	0
 8008388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800838a:	bf00      	nop
 800838c:	e000ed08 	.word	0xe000ed08

08008390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008396:	4b46      	ldr	r3, [pc, #280]	; (80084b0 <xPortStartScheduler+0x120>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a46      	ldr	r2, [pc, #280]	; (80084b4 <xPortStartScheduler+0x124>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10a      	bne.n	80083b6 <xPortStartScheduler+0x26>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	613b      	str	r3, [r7, #16]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083b6:	4b3e      	ldr	r3, [pc, #248]	; (80084b0 <xPortStartScheduler+0x120>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a3f      	ldr	r2, [pc, #252]	; (80084b8 <xPortStartScheduler+0x128>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d10a      	bne.n	80083d6 <xPortStartScheduler+0x46>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	60fb      	str	r3, [r7, #12]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083d6:	4b39      	ldr	r3, [pc, #228]	; (80084bc <xPortStartScheduler+0x12c>)
 80083d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4b31      	ldr	r3, [pc, #196]	; (80084c0 <xPortStartScheduler+0x130>)
 80083fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083fe:	4b31      	ldr	r3, [pc, #196]	; (80084c4 <xPortStartScheduler+0x134>)
 8008400:	2207      	movs	r2, #7
 8008402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008404:	e009      	b.n	800841a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008406:	4b2f      	ldr	r3, [pc, #188]	; (80084c4 <xPortStartScheduler+0x134>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3b01      	subs	r3, #1
 800840c:	4a2d      	ldr	r2, [pc, #180]	; (80084c4 <xPortStartScheduler+0x134>)
 800840e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	2b80      	cmp	r3, #128	; 0x80
 8008424:	d0ef      	beq.n	8008406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008426:	4b27      	ldr	r3, [pc, #156]	; (80084c4 <xPortStartScheduler+0x134>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1c3 0307 	rsb	r3, r3, #7
 800842e:	2b04      	cmp	r3, #4
 8008430:	d00a      	beq.n	8008448 <xPortStartScheduler+0xb8>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	60bb      	str	r3, [r7, #8]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008448:	4b1e      	ldr	r3, [pc, #120]	; (80084c4 <xPortStartScheduler+0x134>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <xPortStartScheduler+0x134>)
 8008450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <xPortStartScheduler+0x134>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800845a:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <xPortStartScheduler+0x134>)
 800845c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	b2da      	uxtb	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <xPortStartScheduler+0x138>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <xPortStartScheduler+0x138>)
 800846c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008472:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <xPortStartScheduler+0x138>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a14      	ldr	r2, [pc, #80]	; (80084c8 <xPortStartScheduler+0x138>)
 8008478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800847c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800847e:	f000 f8dd 	bl	800863c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008482:	4b12      	ldr	r3, [pc, #72]	; (80084cc <xPortStartScheduler+0x13c>)
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008488:	f000 f8fc 	bl	8008684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800848c:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <xPortStartScheduler+0x140>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a0f      	ldr	r2, [pc, #60]	; (80084d0 <xPortStartScheduler+0x140>)
 8008492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008498:	f7ff ff66 	bl	8008368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800849c:	f7ff fba0 	bl	8007be0 <vTaskSwitchContext>
	prvTaskExitError();
 80084a0:	f7ff ff22 	bl	80082e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	e000ed00 	.word	0xe000ed00
 80084b4:	410fc271 	.word	0x410fc271
 80084b8:	410fc270 	.word	0x410fc270
 80084bc:	e000e400 	.word	0xe000e400
 80084c0:	20000480 	.word	0x20000480
 80084c4:	20000484 	.word	0x20000484
 80084c8:	e000ed20 	.word	0xe000ed20
 80084cc:	20000010 	.word	0x20000010
 80084d0:	e000ef34 	.word	0xe000ef34

080084d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	607b      	str	r3, [r7, #4]
}
 80084ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <vPortEnterCritical+0x58>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	4a0d      	ldr	r2, [pc, #52]	; (800852c <vPortEnterCritical+0x58>)
 80084f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084f8:	4b0c      	ldr	r3, [pc, #48]	; (800852c <vPortEnterCritical+0x58>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d10f      	bne.n	8008520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <vPortEnterCritical+0x5c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <vPortEnterCritical+0x4c>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	603b      	str	r3, [r7, #0]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <vPortEnterCritical+0x4a>
	}
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20000010 	.word	0x20000010
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <vPortExitCritical+0x50>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <vPortExitCritical+0x24>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	607b      	str	r3, [r7, #4]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <vPortExitCritical+0x50>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3b01      	subs	r3, #1
 800855e:	4a09      	ldr	r2, [pc, #36]	; (8008584 <vPortExitCritical+0x50>)
 8008560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <vPortExitCritical+0x50>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <vPortExitCritical+0x42>
 800856a:	2300      	movs	r3, #0
 800856c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f383 8811 	msr	BASEPRI, r3
}
 8008574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000010 	.word	0x20000010
	...

08008590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008590:	f3ef 8009 	mrs	r0, PSP
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <pxCurrentTCBConst>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	f01e 0f10 	tst.w	lr, #16
 80085a0:	bf08      	it	eq
 80085a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	6010      	str	r0, [r2, #0]
 80085ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085b4:	f380 8811 	msr	BASEPRI, r0
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f7ff fb0e 	bl	8007be0 <vTaskSwitchContext>
 80085c4:	f04f 0000 	mov.w	r0, #0
 80085c8:	f380 8811 	msr	BASEPRI, r0
 80085cc:	bc09      	pop	{r0, r3}
 80085ce:	6819      	ldr	r1, [r3, #0]
 80085d0:	6808      	ldr	r0, [r1, #0]
 80085d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d6:	f01e 0f10 	tst.w	lr, #16
 80085da:	bf08      	it	eq
 80085dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085e0:	f380 8809 	msr	PSP, r0
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w

080085f0 <pxCurrentTCBConst>:
 80085f0:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	607b      	str	r3, [r7, #4]
}
 8008610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008612:	f7ff fa2d 	bl	8007a70 <xTaskIncrementTick>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <SysTick_Handler+0x40>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f383 8811 	msr	BASEPRI, r3
}
 800862e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008640:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <vPortSetupTimerInterrupt+0x38>)
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <vPortSetupTimerInterrupt+0x3c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0a      	ldr	r2, [pc, #40]	; (800867c <vPortSetupTimerInterrupt+0x40>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	099b      	lsrs	r3, r3, #6
 8008658:	4a09      	ldr	r2, [pc, #36]	; (8008680 <vPortSetupTimerInterrupt+0x44>)
 800865a:	3b01      	subs	r3, #1
 800865c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800865e:	4b04      	ldr	r3, [pc, #16]	; (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	e000e010 	.word	0xe000e010
 8008674:	e000e018 	.word	0xe000e018
 8008678:	20000004 	.word	0x20000004
 800867c:	10624dd3 	.word	0x10624dd3
 8008680:	e000e014 	.word	0xe000e014

08008684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008694 <vPortEnableVFP+0x10>
 8008688:	6801      	ldr	r1, [r0, #0]
 800868a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800868e:	6001      	str	r1, [r0, #0]
 8008690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008692:	bf00      	nop
 8008694:	e000ed88 	.word	0xe000ed88

08008698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800869e:	f3ef 8305 	mrs	r3, IPSR
 80086a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b0f      	cmp	r3, #15
 80086a8:	d914      	bls.n	80086d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086aa:	4a17      	ldr	r2, [pc, #92]	; (8008708 <vPortValidateInterruptPriority+0x70>)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086b4:	4b15      	ldr	r3, [pc, #84]	; (800870c <vPortValidateInterruptPriority+0x74>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	7afa      	ldrb	r2, [r7, #11]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d20a      	bcs.n	80086d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086d4:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <vPortValidateInterruptPriority+0x78>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086dc:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <vPortValidateInterruptPriority+0x7c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d90a      	bls.n	80086fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	603b      	str	r3, [r7, #0]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <vPortValidateInterruptPriority+0x60>
	}
 80086fa:	bf00      	nop
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	e000e3f0 	.word	0xe000e3f0
 800870c:	20000480 	.word	0x20000480
 8008710:	e000ed0c 	.word	0xe000ed0c
 8008714:	20000484 	.word	0x20000484

08008718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008724:	f7ff f8fa 	bl	800791c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008728:	4b5b      	ldr	r3, [pc, #364]	; (8008898 <pvPortMalloc+0x180>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008730:	f000 f920 	bl	8008974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008734:	4b59      	ldr	r3, [pc, #356]	; (800889c <pvPortMalloc+0x184>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 8093 	bne.w	8008868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01d      	beq.n	8008784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008748:	2208      	movs	r2, #8
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b00      	cmp	r3, #0
 8008758:	d014      	beq.n	8008784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f023 0307 	bic.w	r3, r3, #7
 8008760:	3308      	adds	r3, #8
 8008762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <pvPortMalloc+0x6c>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	617b      	str	r3, [r7, #20]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d06e      	beq.n	8008868 <pvPortMalloc+0x150>
 800878a:	4b45      	ldr	r3, [pc, #276]	; (80088a0 <pvPortMalloc+0x188>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d869      	bhi.n	8008868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008794:	4b43      	ldr	r3, [pc, #268]	; (80088a4 <pvPortMalloc+0x18c>)
 8008796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008798:	4b42      	ldr	r3, [pc, #264]	; (80088a4 <pvPortMalloc+0x18c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800879e:	e004      	b.n	80087aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d903      	bls.n	80087bc <pvPortMalloc+0xa4>
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f1      	bne.n	80087a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087bc:	4b36      	ldr	r3, [pc, #216]	; (8008898 <pvPortMalloc+0x180>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d050      	beq.n	8008868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2208      	movs	r2, #8
 80087cc:	4413      	add	r3, r2
 80087ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	2308      	movs	r3, #8
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d91f      	bls.n	8008828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <pvPortMalloc+0xf8>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	613b      	str	r3, [r7, #16]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008822:	69b8      	ldr	r0, [r7, #24]
 8008824:	f000 f908 	bl	8008a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008828:	4b1d      	ldr	r3, [pc, #116]	; (80088a0 <pvPortMalloc+0x188>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <pvPortMalloc+0x188>)
 8008834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008836:	4b1a      	ldr	r3, [pc, #104]	; (80088a0 <pvPortMalloc+0x188>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <pvPortMalloc+0x190>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d203      	bcs.n	800884a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008842:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <pvPortMalloc+0x188>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <pvPortMalloc+0x190>)
 8008848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <pvPortMalloc+0x184>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	431a      	orrs	r2, r3
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800885e:	4b13      	ldr	r3, [pc, #76]	; (80088ac <pvPortMalloc+0x194>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3301      	adds	r3, #1
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <pvPortMalloc+0x194>)
 8008866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008868:	f7ff f866 	bl	8007938 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <pvPortMalloc+0x174>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	60fb      	str	r3, [r7, #12]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <pvPortMalloc+0x172>
	return pvReturn;
 800888c:	69fb      	ldr	r3, [r7, #28]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3728      	adds	r7, #40	; 0x28
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20001048 	.word	0x20001048
 800889c:	2000105c 	.word	0x2000105c
 80088a0:	2000104c 	.word	0x2000104c
 80088a4:	20001040 	.word	0x20001040
 80088a8:	20001050 	.word	0x20001050
 80088ac:	20001054 	.word	0x20001054

080088b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d04d      	beq.n	800895e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088c2:	2308      	movs	r3, #8
 80088c4:	425b      	negs	r3, r3
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4413      	add	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	4b24      	ldr	r3, [pc, #144]	; (8008968 <vPortFree+0xb8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4013      	ands	r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <vPortFree+0x44>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	60fb      	str	r3, [r7, #12]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <vPortFree+0x62>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	60bb      	str	r3, [r7, #8]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	4b14      	ldr	r3, [pc, #80]	; (8008968 <vPortFree+0xb8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01e      	beq.n	800895e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11a      	bne.n	800895e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	4b0e      	ldr	r3, [pc, #56]	; (8008968 <vPortFree+0xb8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	43db      	mvns	r3, r3
 8008932:	401a      	ands	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008938:	f7fe fff0 	bl	800791c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	4b0a      	ldr	r3, [pc, #40]	; (800896c <vPortFree+0xbc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4413      	add	r3, r2
 8008946:	4a09      	ldr	r2, [pc, #36]	; (800896c <vPortFree+0xbc>)
 8008948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800894a:	6938      	ldr	r0, [r7, #16]
 800894c:	f000 f874 	bl	8008a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <vPortFree+0xc0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	4a06      	ldr	r2, [pc, #24]	; (8008970 <vPortFree+0xc0>)
 8008958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800895a:	f7fe ffed 	bl	8007938 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800895e:	bf00      	nop
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	2000105c 	.word	0x2000105c
 800896c:	2000104c 	.word	0x2000104c
 8008970:	20001058 	.word	0x20001058

08008974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800897a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800897e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008980:	4b27      	ldr	r3, [pc, #156]	; (8008a20 <prvHeapInit+0xac>)
 8008982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00c      	beq.n	80089a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3307      	adds	r3, #7
 8008992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0307 	bic.w	r3, r3, #7
 800899a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	4a1f      	ldr	r2, [pc, #124]	; (8008a20 <prvHeapInit+0xac>)
 80089a4:	4413      	add	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089ac:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <prvHeapInit+0xb0>)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <prvHeapInit+0xb0>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089c0:	2208      	movs	r2, #8
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 0307 	bic.w	r3, r3, #7
 80089ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <prvHeapInit+0xb4>)
 80089d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089d6:	4b14      	ldr	r3, [pc, #80]	; (8008a28 <prvHeapInit+0xb4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <prvHeapInit+0xb4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	1ad2      	subs	r2, r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089f4:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <prvHeapInit+0xb4>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <prvHeapInit+0xb8>)
 8008a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	4a09      	ldr	r2, [pc, #36]	; (8008a30 <prvHeapInit+0xbc>)
 8008a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <prvHeapInit+0xc0>)
 8008a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	20000488 	.word	0x20000488
 8008a24:	20001040 	.word	0x20001040
 8008a28:	20001048 	.word	0x20001048
 8008a2c:	20001050 	.word	0x20001050
 8008a30:	2000104c 	.word	0x2000104c
 8008a34:	2000105c 	.word	0x2000105c

08008a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a40:	4b28      	ldr	r3, [pc, #160]	; (8008ae4 <prvInsertBlockIntoFreeList+0xac>)
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e002      	b.n	8008a4c <prvInsertBlockIntoFreeList+0x14>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d8f7      	bhi.n	8008a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	4413      	add	r3, r2
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d108      	bne.n	8008a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	441a      	add	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	441a      	add	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d118      	bne.n	8008ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d00d      	beq.n	8008ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	441a      	add	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e008      	b.n	8008ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	e003      	b.n	8008ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d002      	beq.n	8008ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20001040 	.word	0x20001040
 8008ae8:	20001048 	.word	0x20001048

08008aec <__errno>:
 8008aec:	4b01      	ldr	r3, [pc, #4]	; (8008af4 <__errno+0x8>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000014 	.word	0x20000014

08008af8 <__libc_init_array>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4d0d      	ldr	r5, [pc, #52]	; (8008b30 <__libc_init_array+0x38>)
 8008afc:	4c0d      	ldr	r4, [pc, #52]	; (8008b34 <__libc_init_array+0x3c>)
 8008afe:	1b64      	subs	r4, r4, r5
 8008b00:	10a4      	asrs	r4, r4, #2
 8008b02:	2600      	movs	r6, #0
 8008b04:	42a6      	cmp	r6, r4
 8008b06:	d109      	bne.n	8008b1c <__libc_init_array+0x24>
 8008b08:	4d0b      	ldr	r5, [pc, #44]	; (8008b38 <__libc_init_array+0x40>)
 8008b0a:	4c0c      	ldr	r4, [pc, #48]	; (8008b3c <__libc_init_array+0x44>)
 8008b0c:	f000 fcb8 	bl	8009480 <_init>
 8008b10:	1b64      	subs	r4, r4, r5
 8008b12:	10a4      	asrs	r4, r4, #2
 8008b14:	2600      	movs	r6, #0
 8008b16:	42a6      	cmp	r6, r4
 8008b18:	d105      	bne.n	8008b26 <__libc_init_array+0x2e>
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b20:	4798      	blx	r3
 8008b22:	3601      	adds	r6, #1
 8008b24:	e7ee      	b.n	8008b04 <__libc_init_array+0xc>
 8008b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2a:	4798      	blx	r3
 8008b2c:	3601      	adds	r6, #1
 8008b2e:	e7f2      	b.n	8008b16 <__libc_init_array+0x1e>
 8008b30:	080095b0 	.word	0x080095b0
 8008b34:	080095b0 	.word	0x080095b0
 8008b38:	080095b0 	.word	0x080095b0
 8008b3c:	080095b4 	.word	0x080095b4

08008b40 <__retarget_lock_acquire_recursive>:
 8008b40:	4770      	bx	lr

08008b42 <__retarget_lock_release_recursive>:
 8008b42:	4770      	bx	lr

08008b44 <memcpy>:
 8008b44:	440a      	add	r2, r1
 8008b46:	4291      	cmp	r1, r2
 8008b48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b4c:	d100      	bne.n	8008b50 <memcpy+0xc>
 8008b4e:	4770      	bx	lr
 8008b50:	b510      	push	{r4, lr}
 8008b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	d1f9      	bne.n	8008b52 <memcpy+0xe>
 8008b5e:	bd10      	pop	{r4, pc}

08008b60 <memset>:
 8008b60:	4402      	add	r2, r0
 8008b62:	4603      	mov	r3, r0
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d100      	bne.n	8008b6a <memset+0xa>
 8008b68:	4770      	bx	lr
 8008b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6e:	e7f9      	b.n	8008b64 <memset+0x4>

08008b70 <_malloc_r>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	1ccd      	adds	r5, r1, #3
 8008b74:	f025 0503 	bic.w	r5, r5, #3
 8008b78:	3508      	adds	r5, #8
 8008b7a:	2d0c      	cmp	r5, #12
 8008b7c:	bf38      	it	cc
 8008b7e:	250c      	movcc	r5, #12
 8008b80:	2d00      	cmp	r5, #0
 8008b82:	4606      	mov	r6, r0
 8008b84:	db01      	blt.n	8008b8a <_malloc_r+0x1a>
 8008b86:	42a9      	cmp	r1, r5
 8008b88:	d903      	bls.n	8008b92 <_malloc_r+0x22>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	6033      	str	r3, [r6, #0]
 8008b8e:	2000      	movs	r0, #0
 8008b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b92:	f000 f8e1 	bl	8008d58 <__malloc_lock>
 8008b96:	4921      	ldr	r1, [pc, #132]	; (8008c1c <_malloc_r+0xac>)
 8008b98:	680a      	ldr	r2, [r1, #0]
 8008b9a:	4614      	mov	r4, r2
 8008b9c:	b99c      	cbnz	r4, 8008bc6 <_malloc_r+0x56>
 8008b9e:	4f20      	ldr	r7, [pc, #128]	; (8008c20 <_malloc_r+0xb0>)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	b923      	cbnz	r3, 8008bae <_malloc_r+0x3e>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 f8a6 	bl	8008cf8 <_sbrk_r>
 8008bac:	6038      	str	r0, [r7, #0]
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f000 f8a1 	bl	8008cf8 <_sbrk_r>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	d123      	bne.n	8008c02 <_malloc_r+0x92>
 8008bba:	230c      	movs	r3, #12
 8008bbc:	6033      	str	r3, [r6, #0]
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f000 f8d0 	bl	8008d64 <__malloc_unlock>
 8008bc4:	e7e3      	b.n	8008b8e <_malloc_r+0x1e>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	1b5b      	subs	r3, r3, r5
 8008bca:	d417      	bmi.n	8008bfc <_malloc_r+0x8c>
 8008bcc:	2b0b      	cmp	r3, #11
 8008bce:	d903      	bls.n	8008bd8 <_malloc_r+0x68>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	441c      	add	r4, r3
 8008bd4:	6025      	str	r5, [r4, #0]
 8008bd6:	e004      	b.n	8008be2 <_malloc_r+0x72>
 8008bd8:	6863      	ldr	r3, [r4, #4]
 8008bda:	42a2      	cmp	r2, r4
 8008bdc:	bf0c      	ite	eq
 8008bde:	600b      	streq	r3, [r1, #0]
 8008be0:	6053      	strne	r3, [r2, #4]
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f8be 	bl	8008d64 <__malloc_unlock>
 8008be8:	f104 000b 	add.w	r0, r4, #11
 8008bec:	1d23      	adds	r3, r4, #4
 8008bee:	f020 0007 	bic.w	r0, r0, #7
 8008bf2:	1ac2      	subs	r2, r0, r3
 8008bf4:	d0cc      	beq.n	8008b90 <_malloc_r+0x20>
 8008bf6:	1a1b      	subs	r3, r3, r0
 8008bf8:	50a3      	str	r3, [r4, r2]
 8008bfa:	e7c9      	b.n	8008b90 <_malloc_r+0x20>
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	6864      	ldr	r4, [r4, #4]
 8008c00:	e7cc      	b.n	8008b9c <_malloc_r+0x2c>
 8008c02:	1cc4      	adds	r4, r0, #3
 8008c04:	f024 0403 	bic.w	r4, r4, #3
 8008c08:	42a0      	cmp	r0, r4
 8008c0a:	d0e3      	beq.n	8008bd4 <_malloc_r+0x64>
 8008c0c:	1a21      	subs	r1, r4, r0
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f000 f872 	bl	8008cf8 <_sbrk_r>
 8008c14:	3001      	adds	r0, #1
 8008c16:	d1dd      	bne.n	8008bd4 <_malloc_r+0x64>
 8008c18:	e7cf      	b.n	8008bba <_malloc_r+0x4a>
 8008c1a:	bf00      	nop
 8008c1c:	20001060 	.word	0x20001060
 8008c20:	20001064 	.word	0x20001064

08008c24 <cleanup_glue>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	460c      	mov	r4, r1
 8008c28:	6809      	ldr	r1, [r1, #0]
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	b109      	cbz	r1, 8008c32 <cleanup_glue+0xe>
 8008c2e:	f7ff fff9 	bl	8008c24 <cleanup_glue>
 8008c32:	4621      	mov	r1, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c3a:	f000 b899 	b.w	8008d70 <_free_r>
	...

08008c40 <_reclaim_reent>:
 8008c40:	4b2c      	ldr	r3, [pc, #176]	; (8008cf4 <_reclaim_reent+0xb4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4283      	cmp	r3, r0
 8008c46:	b570      	push	{r4, r5, r6, lr}
 8008c48:	4604      	mov	r4, r0
 8008c4a:	d051      	beq.n	8008cf0 <_reclaim_reent+0xb0>
 8008c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c4e:	b143      	cbz	r3, 8008c62 <_reclaim_reent+0x22>
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d14a      	bne.n	8008cec <_reclaim_reent+0xac>
 8008c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	b111      	cbz	r1, 8008c62 <_reclaim_reent+0x22>
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 f887 	bl	8008d70 <_free_r>
 8008c62:	6961      	ldr	r1, [r4, #20]
 8008c64:	b111      	cbz	r1, 8008c6c <_reclaim_reent+0x2c>
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 f882 	bl	8008d70 <_free_r>
 8008c6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c6e:	b111      	cbz	r1, 8008c76 <_reclaim_reent+0x36>
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 f87d 	bl	8008d70 <_free_r>
 8008c76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c78:	b111      	cbz	r1, 8008c80 <_reclaim_reent+0x40>
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 f878 	bl	8008d70 <_free_r>
 8008c80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008c82:	b111      	cbz	r1, 8008c8a <_reclaim_reent+0x4a>
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 f873 	bl	8008d70 <_free_r>
 8008c8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008c8c:	b111      	cbz	r1, 8008c94 <_reclaim_reent+0x54>
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 f86e 	bl	8008d70 <_free_r>
 8008c94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008c96:	b111      	cbz	r1, 8008c9e <_reclaim_reent+0x5e>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 f869 	bl	8008d70 <_free_r>
 8008c9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ca0:	b111      	cbz	r1, 8008ca8 <_reclaim_reent+0x68>
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 f864 	bl	8008d70 <_free_r>
 8008ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008caa:	b111      	cbz	r1, 8008cb2 <_reclaim_reent+0x72>
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 f85f 	bl	8008d70 <_free_r>
 8008cb2:	69a3      	ldr	r3, [r4, #24]
 8008cb4:	b1e3      	cbz	r3, 8008cf0 <_reclaim_reent+0xb0>
 8008cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cb8:	4620      	mov	r0, r4
 8008cba:	4798      	blx	r3
 8008cbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008cbe:	b1b9      	cbz	r1, 8008cf0 <_reclaim_reent+0xb0>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008cc6:	f7ff bfad 	b.w	8008c24 <cleanup_glue>
 8008cca:	5949      	ldr	r1, [r1, r5]
 8008ccc:	b941      	cbnz	r1, 8008ce0 <_reclaim_reent+0xa0>
 8008cce:	3504      	adds	r5, #4
 8008cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cd2:	2d80      	cmp	r5, #128	; 0x80
 8008cd4:	68d9      	ldr	r1, [r3, #12]
 8008cd6:	d1f8      	bne.n	8008cca <_reclaim_reent+0x8a>
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f000 f849 	bl	8008d70 <_free_r>
 8008cde:	e7ba      	b.n	8008c56 <_reclaim_reent+0x16>
 8008ce0:	680e      	ldr	r6, [r1, #0]
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f844 	bl	8008d70 <_free_r>
 8008ce8:	4631      	mov	r1, r6
 8008cea:	e7ef      	b.n	8008ccc <_reclaim_reent+0x8c>
 8008cec:	2500      	movs	r5, #0
 8008cee:	e7ef      	b.n	8008cd0 <_reclaim_reent+0x90>
 8008cf0:	bd70      	pop	{r4, r5, r6, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000014 	.word	0x20000014

08008cf8 <_sbrk_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d06      	ldr	r5, [pc, #24]	; (8008d14 <_sbrk_r+0x1c>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7f8 fb64 	bl	80013d0 <_sbrk>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_sbrk_r+0x1a>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_sbrk_r+0x1a>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	200011d4 	.word	0x200011d4

08008d18 <siprintf>:
 8008d18:	b40e      	push	{r1, r2, r3}
 8008d1a:	b500      	push	{lr}
 8008d1c:	b09c      	sub	sp, #112	; 0x70
 8008d1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d20:	9002      	str	r0, [sp, #8]
 8008d22:	9006      	str	r0, [sp, #24]
 8008d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d28:	4809      	ldr	r0, [pc, #36]	; (8008d50 <siprintf+0x38>)
 8008d2a:	9107      	str	r1, [sp, #28]
 8008d2c:	9104      	str	r1, [sp, #16]
 8008d2e:	4909      	ldr	r1, [pc, #36]	; (8008d54 <siprintf+0x3c>)
 8008d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d34:	9105      	str	r1, [sp, #20]
 8008d36:	6800      	ldr	r0, [r0, #0]
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	a902      	add	r1, sp, #8
 8008d3c:	f000 f8c4 	bl	8008ec8 <_svfiprintf_r>
 8008d40:	9b02      	ldr	r3, [sp, #8]
 8008d42:	2200      	movs	r2, #0
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	b01c      	add	sp, #112	; 0x70
 8008d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d4c:	b003      	add	sp, #12
 8008d4e:	4770      	bx	lr
 8008d50:	20000014 	.word	0x20000014
 8008d54:	ffff0208 	.word	0xffff0208

08008d58 <__malloc_lock>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__malloc_lock+0x8>)
 8008d5a:	f7ff bef1 	b.w	8008b40 <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	200011cc 	.word	0x200011cc

08008d64 <__malloc_unlock>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__malloc_unlock+0x8>)
 8008d66:	f7ff beec 	b.w	8008b42 <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	200011cc 	.word	0x200011cc

08008d70 <_free_r>:
 8008d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d048      	beq.n	8008e08 <_free_r+0x98>
 8008d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d7a:	9001      	str	r0, [sp, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d82:	bfb8      	it	lt
 8008d84:	18e4      	addlt	r4, r4, r3
 8008d86:	f7ff ffe7 	bl	8008d58 <__malloc_lock>
 8008d8a:	4a20      	ldr	r2, [pc, #128]	; (8008e0c <_free_r+0x9c>)
 8008d8c:	9801      	ldr	r0, [sp, #4]
 8008d8e:	6813      	ldr	r3, [r2, #0]
 8008d90:	4615      	mov	r5, r2
 8008d92:	b933      	cbnz	r3, 8008da2 <_free_r+0x32>
 8008d94:	6063      	str	r3, [r4, #4]
 8008d96:	6014      	str	r4, [r2, #0]
 8008d98:	b003      	add	sp, #12
 8008d9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d9e:	f7ff bfe1 	b.w	8008d64 <__malloc_unlock>
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	d90b      	bls.n	8008dbe <_free_r+0x4e>
 8008da6:	6821      	ldr	r1, [r4, #0]
 8008da8:	1862      	adds	r2, r4, r1
 8008daa:	4293      	cmp	r3, r2
 8008dac:	bf04      	itt	eq
 8008dae:	681a      	ldreq	r2, [r3, #0]
 8008db0:	685b      	ldreq	r3, [r3, #4]
 8008db2:	6063      	str	r3, [r4, #4]
 8008db4:	bf04      	itt	eq
 8008db6:	1852      	addeq	r2, r2, r1
 8008db8:	6022      	streq	r2, [r4, #0]
 8008dba:	602c      	str	r4, [r5, #0]
 8008dbc:	e7ec      	b.n	8008d98 <_free_r+0x28>
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	b10b      	cbz	r3, 8008dc8 <_free_r+0x58>
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	d9fa      	bls.n	8008dbe <_free_r+0x4e>
 8008dc8:	6811      	ldr	r1, [r2, #0]
 8008dca:	1855      	adds	r5, r2, r1
 8008dcc:	42a5      	cmp	r5, r4
 8008dce:	d10b      	bne.n	8008de8 <_free_r+0x78>
 8008dd0:	6824      	ldr	r4, [r4, #0]
 8008dd2:	4421      	add	r1, r4
 8008dd4:	1854      	adds	r4, r2, r1
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	6011      	str	r1, [r2, #0]
 8008dda:	d1dd      	bne.n	8008d98 <_free_r+0x28>
 8008ddc:	681c      	ldr	r4, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	6053      	str	r3, [r2, #4]
 8008de2:	4421      	add	r1, r4
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	e7d7      	b.n	8008d98 <_free_r+0x28>
 8008de8:	d902      	bls.n	8008df0 <_free_r+0x80>
 8008dea:	230c      	movs	r3, #12
 8008dec:	6003      	str	r3, [r0, #0]
 8008dee:	e7d3      	b.n	8008d98 <_free_r+0x28>
 8008df0:	6825      	ldr	r5, [r4, #0]
 8008df2:	1961      	adds	r1, r4, r5
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf04      	itt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	6063      	str	r3, [r4, #4]
 8008dfe:	bf04      	itt	eq
 8008e00:	1949      	addeq	r1, r1, r5
 8008e02:	6021      	streq	r1, [r4, #0]
 8008e04:	6054      	str	r4, [r2, #4]
 8008e06:	e7c7      	b.n	8008d98 <_free_r+0x28>
 8008e08:	b003      	add	sp, #12
 8008e0a:	bd30      	pop	{r4, r5, pc}
 8008e0c:	20001060 	.word	0x20001060

08008e10 <__ssputs_r>:
 8008e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	688e      	ldr	r6, [r1, #8]
 8008e16:	429e      	cmp	r6, r3
 8008e18:	4682      	mov	sl, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	4690      	mov	r8, r2
 8008e1e:	461f      	mov	r7, r3
 8008e20:	d838      	bhi.n	8008e94 <__ssputs_r+0x84>
 8008e22:	898a      	ldrh	r2, [r1, #12]
 8008e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e28:	d032      	beq.n	8008e90 <__ssputs_r+0x80>
 8008e2a:	6825      	ldr	r5, [r4, #0]
 8008e2c:	6909      	ldr	r1, [r1, #16]
 8008e2e:	eba5 0901 	sub.w	r9, r5, r1
 8008e32:	6965      	ldr	r5, [r4, #20]
 8008e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	444b      	add	r3, r9
 8008e40:	106d      	asrs	r5, r5, #1
 8008e42:	429d      	cmp	r5, r3
 8008e44:	bf38      	it	cc
 8008e46:	461d      	movcc	r5, r3
 8008e48:	0553      	lsls	r3, r2, #21
 8008e4a:	d531      	bpl.n	8008eb0 <__ssputs_r+0xa0>
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7ff fe8f 	bl	8008b70 <_malloc_r>
 8008e52:	4606      	mov	r6, r0
 8008e54:	b950      	cbnz	r0, 8008e6c <__ssputs_r+0x5c>
 8008e56:	230c      	movs	r3, #12
 8008e58:	f8ca 3000 	str.w	r3, [sl]
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6c:	6921      	ldr	r1, [r4, #16]
 8008e6e:	464a      	mov	r2, r9
 8008e70:	f7ff fe68 	bl	8008b44 <memcpy>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	6126      	str	r6, [r4, #16]
 8008e82:	6165      	str	r5, [r4, #20]
 8008e84:	444e      	add	r6, r9
 8008e86:	eba5 0509 	sub.w	r5, r5, r9
 8008e8a:	6026      	str	r6, [r4, #0]
 8008e8c:	60a5      	str	r5, [r4, #8]
 8008e8e:	463e      	mov	r6, r7
 8008e90:	42be      	cmp	r6, r7
 8008e92:	d900      	bls.n	8008e96 <__ssputs_r+0x86>
 8008e94:	463e      	mov	r6, r7
 8008e96:	4632      	mov	r2, r6
 8008e98:	6820      	ldr	r0, [r4, #0]
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	f000 faa8 	bl	80093f0 <memmove>
 8008ea0:	68a3      	ldr	r3, [r4, #8]
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	1b9b      	subs	r3, r3, r6
 8008ea6:	4432      	add	r2, r6
 8008ea8:	60a3      	str	r3, [r4, #8]
 8008eaa:	6022      	str	r2, [r4, #0]
 8008eac:	2000      	movs	r0, #0
 8008eae:	e7db      	b.n	8008e68 <__ssputs_r+0x58>
 8008eb0:	462a      	mov	r2, r5
 8008eb2:	f000 fab7 	bl	8009424 <_realloc_r>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1e1      	bne.n	8008e80 <__ssputs_r+0x70>
 8008ebc:	6921      	ldr	r1, [r4, #16]
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	f7ff ff56 	bl	8008d70 <_free_r>
 8008ec4:	e7c7      	b.n	8008e56 <__ssputs_r+0x46>
	...

08008ec8 <_svfiprintf_r>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	4698      	mov	r8, r3
 8008ece:	898b      	ldrh	r3, [r1, #12]
 8008ed0:	061b      	lsls	r3, r3, #24
 8008ed2:	b09d      	sub	sp, #116	; 0x74
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	4614      	mov	r4, r2
 8008eda:	d50e      	bpl.n	8008efa <_svfiprintf_r+0x32>
 8008edc:	690b      	ldr	r3, [r1, #16]
 8008ede:	b963      	cbnz	r3, 8008efa <_svfiprintf_r+0x32>
 8008ee0:	2140      	movs	r1, #64	; 0x40
 8008ee2:	f7ff fe45 	bl	8008b70 <_malloc_r>
 8008ee6:	6028      	str	r0, [r5, #0]
 8008ee8:	6128      	str	r0, [r5, #16]
 8008eea:	b920      	cbnz	r0, 8008ef6 <_svfiprintf_r+0x2e>
 8008eec:	230c      	movs	r3, #12
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ef4:	e0d1      	b.n	800909a <_svfiprintf_r+0x1d2>
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	616b      	str	r3, [r5, #20]
 8008efa:	2300      	movs	r3, #0
 8008efc:	9309      	str	r3, [sp, #36]	; 0x24
 8008efe:	2320      	movs	r3, #32
 8008f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f08:	2330      	movs	r3, #48	; 0x30
 8008f0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090b4 <_svfiprintf_r+0x1ec>
 8008f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f12:	f04f 0901 	mov.w	r9, #1
 8008f16:	4623      	mov	r3, r4
 8008f18:	469a      	mov	sl, r3
 8008f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f1e:	b10a      	cbz	r2, 8008f24 <_svfiprintf_r+0x5c>
 8008f20:	2a25      	cmp	r2, #37	; 0x25
 8008f22:	d1f9      	bne.n	8008f18 <_svfiprintf_r+0x50>
 8008f24:	ebba 0b04 	subs.w	fp, sl, r4
 8008f28:	d00b      	beq.n	8008f42 <_svfiprintf_r+0x7a>
 8008f2a:	465b      	mov	r3, fp
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4638      	mov	r0, r7
 8008f32:	f7ff ff6d 	bl	8008e10 <__ssputs_r>
 8008f36:	3001      	adds	r0, #1
 8008f38:	f000 80aa 	beq.w	8009090 <_svfiprintf_r+0x1c8>
 8008f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f3e:	445a      	add	r2, fp
 8008f40:	9209      	str	r2, [sp, #36]	; 0x24
 8008f42:	f89a 3000 	ldrb.w	r3, [sl]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 80a2 	beq.w	8009090 <_svfiprintf_r+0x1c8>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f56:	f10a 0a01 	add.w	sl, sl, #1
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	9307      	str	r3, [sp, #28]
 8008f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f62:	931a      	str	r3, [sp, #104]	; 0x68
 8008f64:	4654      	mov	r4, sl
 8008f66:	2205      	movs	r2, #5
 8008f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6c:	4851      	ldr	r0, [pc, #324]	; (80090b4 <_svfiprintf_r+0x1ec>)
 8008f6e:	f7f7 f92f 	bl	80001d0 <memchr>
 8008f72:	9a04      	ldr	r2, [sp, #16]
 8008f74:	b9d8      	cbnz	r0, 8008fae <_svfiprintf_r+0xe6>
 8008f76:	06d0      	lsls	r0, r2, #27
 8008f78:	bf44      	itt	mi
 8008f7a:	2320      	movmi	r3, #32
 8008f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f80:	0711      	lsls	r1, r2, #28
 8008f82:	bf44      	itt	mi
 8008f84:	232b      	movmi	r3, #43	; 0x2b
 8008f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f90:	d015      	beq.n	8008fbe <_svfiprintf_r+0xf6>
 8008f92:	9a07      	ldr	r2, [sp, #28]
 8008f94:	4654      	mov	r4, sl
 8008f96:	2000      	movs	r0, #0
 8008f98:	f04f 0c0a 	mov.w	ip, #10
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa2:	3b30      	subs	r3, #48	; 0x30
 8008fa4:	2b09      	cmp	r3, #9
 8008fa6:	d94e      	bls.n	8009046 <_svfiprintf_r+0x17e>
 8008fa8:	b1b0      	cbz	r0, 8008fd8 <_svfiprintf_r+0x110>
 8008faa:	9207      	str	r2, [sp, #28]
 8008fac:	e014      	b.n	8008fd8 <_svfiprintf_r+0x110>
 8008fae:	eba0 0308 	sub.w	r3, r0, r8
 8008fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	46a2      	mov	sl, r4
 8008fbc:	e7d2      	b.n	8008f64 <_svfiprintf_r+0x9c>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	1d19      	adds	r1, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9103      	str	r1, [sp, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfbb      	ittet	lt
 8008fca:	425b      	neglt	r3, r3
 8008fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8008fd0:	9307      	strge	r3, [sp, #28]
 8008fd2:	9307      	strlt	r3, [sp, #28]
 8008fd4:	bfb8      	it	lt
 8008fd6:	9204      	strlt	r2, [sp, #16]
 8008fd8:	7823      	ldrb	r3, [r4, #0]
 8008fda:	2b2e      	cmp	r3, #46	; 0x2e
 8008fdc:	d10c      	bne.n	8008ff8 <_svfiprintf_r+0x130>
 8008fde:	7863      	ldrb	r3, [r4, #1]
 8008fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe2:	d135      	bne.n	8009050 <_svfiprintf_r+0x188>
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	1d1a      	adds	r2, r3, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	9203      	str	r2, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfb8      	it	lt
 8008ff0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ff4:	3402      	adds	r4, #2
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090c4 <_svfiprintf_r+0x1fc>
 8008ffc:	7821      	ldrb	r1, [r4, #0]
 8008ffe:	2203      	movs	r2, #3
 8009000:	4650      	mov	r0, sl
 8009002:	f7f7 f8e5 	bl	80001d0 <memchr>
 8009006:	b140      	cbz	r0, 800901a <_svfiprintf_r+0x152>
 8009008:	2340      	movs	r3, #64	; 0x40
 800900a:	eba0 000a 	sub.w	r0, r0, sl
 800900e:	fa03 f000 	lsl.w	r0, r3, r0
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	4303      	orrs	r3, r0
 8009016:	3401      	adds	r4, #1
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901e:	4826      	ldr	r0, [pc, #152]	; (80090b8 <_svfiprintf_r+0x1f0>)
 8009020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009024:	2206      	movs	r2, #6
 8009026:	f7f7 f8d3 	bl	80001d0 <memchr>
 800902a:	2800      	cmp	r0, #0
 800902c:	d038      	beq.n	80090a0 <_svfiprintf_r+0x1d8>
 800902e:	4b23      	ldr	r3, [pc, #140]	; (80090bc <_svfiprintf_r+0x1f4>)
 8009030:	bb1b      	cbnz	r3, 800907a <_svfiprintf_r+0x1b2>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	3307      	adds	r3, #7
 8009036:	f023 0307 	bic.w	r3, r3, #7
 800903a:	3308      	adds	r3, #8
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	4433      	add	r3, r6
 8009042:	9309      	str	r3, [sp, #36]	; 0x24
 8009044:	e767      	b.n	8008f16 <_svfiprintf_r+0x4e>
 8009046:	fb0c 3202 	mla	r2, ip, r2, r3
 800904a:	460c      	mov	r4, r1
 800904c:	2001      	movs	r0, #1
 800904e:	e7a5      	b.n	8008f9c <_svfiprintf_r+0xd4>
 8009050:	2300      	movs	r3, #0
 8009052:	3401      	adds	r4, #1
 8009054:	9305      	str	r3, [sp, #20]
 8009056:	4619      	mov	r1, r3
 8009058:	f04f 0c0a 	mov.w	ip, #10
 800905c:	4620      	mov	r0, r4
 800905e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009062:	3a30      	subs	r2, #48	; 0x30
 8009064:	2a09      	cmp	r2, #9
 8009066:	d903      	bls.n	8009070 <_svfiprintf_r+0x1a8>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0c5      	beq.n	8008ff8 <_svfiprintf_r+0x130>
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	e7c3      	b.n	8008ff8 <_svfiprintf_r+0x130>
 8009070:	fb0c 2101 	mla	r1, ip, r1, r2
 8009074:	4604      	mov	r4, r0
 8009076:	2301      	movs	r3, #1
 8009078:	e7f0      	b.n	800905c <_svfiprintf_r+0x194>
 800907a:	ab03      	add	r3, sp, #12
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	462a      	mov	r2, r5
 8009080:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <_svfiprintf_r+0x1f8>)
 8009082:	a904      	add	r1, sp, #16
 8009084:	4638      	mov	r0, r7
 8009086:	f3af 8000 	nop.w
 800908a:	1c42      	adds	r2, r0, #1
 800908c:	4606      	mov	r6, r0
 800908e:	d1d6      	bne.n	800903e <_svfiprintf_r+0x176>
 8009090:	89ab      	ldrh	r3, [r5, #12]
 8009092:	065b      	lsls	r3, r3, #25
 8009094:	f53f af2c 	bmi.w	8008ef0 <_svfiprintf_r+0x28>
 8009098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800909a:	b01d      	add	sp, #116	; 0x74
 800909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a0:	ab03      	add	r3, sp, #12
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	462a      	mov	r2, r5
 80090a6:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <_svfiprintf_r+0x1f8>)
 80090a8:	a904      	add	r1, sp, #16
 80090aa:	4638      	mov	r0, r7
 80090ac:	f000 f87a 	bl	80091a4 <_printf_i>
 80090b0:	e7eb      	b.n	800908a <_svfiprintf_r+0x1c2>
 80090b2:	bf00      	nop
 80090b4:	0800957c 	.word	0x0800957c
 80090b8:	08009586 	.word	0x08009586
 80090bc:	00000000 	.word	0x00000000
 80090c0:	08008e11 	.word	0x08008e11
 80090c4:	08009582 	.word	0x08009582

080090c8 <_printf_common>:
 80090c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	4616      	mov	r6, r2
 80090ce:	4699      	mov	r9, r3
 80090d0:	688a      	ldr	r2, [r1, #8]
 80090d2:	690b      	ldr	r3, [r1, #16]
 80090d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090d8:	4293      	cmp	r3, r2
 80090da:	bfb8      	it	lt
 80090dc:	4613      	movlt	r3, r2
 80090de:	6033      	str	r3, [r6, #0]
 80090e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090e4:	4607      	mov	r7, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	b10a      	cbz	r2, 80090ee <_printf_common+0x26>
 80090ea:	3301      	adds	r3, #1
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	0699      	lsls	r1, r3, #26
 80090f2:	bf42      	ittt	mi
 80090f4:	6833      	ldrmi	r3, [r6, #0]
 80090f6:	3302      	addmi	r3, #2
 80090f8:	6033      	strmi	r3, [r6, #0]
 80090fa:	6825      	ldr	r5, [r4, #0]
 80090fc:	f015 0506 	ands.w	r5, r5, #6
 8009100:	d106      	bne.n	8009110 <_printf_common+0x48>
 8009102:	f104 0a19 	add.w	sl, r4, #25
 8009106:	68e3      	ldr	r3, [r4, #12]
 8009108:	6832      	ldr	r2, [r6, #0]
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	42ab      	cmp	r3, r5
 800910e:	dc26      	bgt.n	800915e <_printf_common+0x96>
 8009110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009114:	1e13      	subs	r3, r2, #0
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	bf18      	it	ne
 800911a:	2301      	movne	r3, #1
 800911c:	0692      	lsls	r2, r2, #26
 800911e:	d42b      	bmi.n	8009178 <_printf_common+0xb0>
 8009120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009124:	4649      	mov	r1, r9
 8009126:	4638      	mov	r0, r7
 8009128:	47c0      	blx	r8
 800912a:	3001      	adds	r0, #1
 800912c:	d01e      	beq.n	800916c <_printf_common+0xa4>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	68e5      	ldr	r5, [r4, #12]
 8009132:	6832      	ldr	r2, [r6, #0]
 8009134:	f003 0306 	and.w	r3, r3, #6
 8009138:	2b04      	cmp	r3, #4
 800913a:	bf08      	it	eq
 800913c:	1aad      	subeq	r5, r5, r2
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	6922      	ldr	r2, [r4, #16]
 8009142:	bf0c      	ite	eq
 8009144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009148:	2500      	movne	r5, #0
 800914a:	4293      	cmp	r3, r2
 800914c:	bfc4      	itt	gt
 800914e:	1a9b      	subgt	r3, r3, r2
 8009150:	18ed      	addgt	r5, r5, r3
 8009152:	2600      	movs	r6, #0
 8009154:	341a      	adds	r4, #26
 8009156:	42b5      	cmp	r5, r6
 8009158:	d11a      	bne.n	8009190 <_printf_common+0xc8>
 800915a:	2000      	movs	r0, #0
 800915c:	e008      	b.n	8009170 <_printf_common+0xa8>
 800915e:	2301      	movs	r3, #1
 8009160:	4652      	mov	r2, sl
 8009162:	4649      	mov	r1, r9
 8009164:	4638      	mov	r0, r7
 8009166:	47c0      	blx	r8
 8009168:	3001      	adds	r0, #1
 800916a:	d103      	bne.n	8009174 <_printf_common+0xac>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009174:	3501      	adds	r5, #1
 8009176:	e7c6      	b.n	8009106 <_printf_common+0x3e>
 8009178:	18e1      	adds	r1, r4, r3
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	2030      	movs	r0, #48	; 0x30
 800917e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009182:	4422      	add	r2, r4
 8009184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800918c:	3302      	adds	r3, #2
 800918e:	e7c7      	b.n	8009120 <_printf_common+0x58>
 8009190:	2301      	movs	r3, #1
 8009192:	4622      	mov	r2, r4
 8009194:	4649      	mov	r1, r9
 8009196:	4638      	mov	r0, r7
 8009198:	47c0      	blx	r8
 800919a:	3001      	adds	r0, #1
 800919c:	d0e6      	beq.n	800916c <_printf_common+0xa4>
 800919e:	3601      	adds	r6, #1
 80091a0:	e7d9      	b.n	8009156 <_printf_common+0x8e>
	...

080091a4 <_printf_i>:
 80091a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	460c      	mov	r4, r1
 80091aa:	4691      	mov	r9, r2
 80091ac:	7e27      	ldrb	r7, [r4, #24]
 80091ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091b0:	2f78      	cmp	r7, #120	; 0x78
 80091b2:	4680      	mov	r8, r0
 80091b4:	469a      	mov	sl, r3
 80091b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091ba:	d807      	bhi.n	80091cc <_printf_i+0x28>
 80091bc:	2f62      	cmp	r7, #98	; 0x62
 80091be:	d80a      	bhi.n	80091d6 <_printf_i+0x32>
 80091c0:	2f00      	cmp	r7, #0
 80091c2:	f000 80d8 	beq.w	8009376 <_printf_i+0x1d2>
 80091c6:	2f58      	cmp	r7, #88	; 0x58
 80091c8:	f000 80a3 	beq.w	8009312 <_printf_i+0x16e>
 80091cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091d4:	e03a      	b.n	800924c <_printf_i+0xa8>
 80091d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091da:	2b15      	cmp	r3, #21
 80091dc:	d8f6      	bhi.n	80091cc <_printf_i+0x28>
 80091de:	a001      	add	r0, pc, #4	; (adr r0, 80091e4 <_printf_i+0x40>)
 80091e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80091e4:	0800923d 	.word	0x0800923d
 80091e8:	08009251 	.word	0x08009251
 80091ec:	080091cd 	.word	0x080091cd
 80091f0:	080091cd 	.word	0x080091cd
 80091f4:	080091cd 	.word	0x080091cd
 80091f8:	080091cd 	.word	0x080091cd
 80091fc:	08009251 	.word	0x08009251
 8009200:	080091cd 	.word	0x080091cd
 8009204:	080091cd 	.word	0x080091cd
 8009208:	080091cd 	.word	0x080091cd
 800920c:	080091cd 	.word	0x080091cd
 8009210:	0800935d 	.word	0x0800935d
 8009214:	08009281 	.word	0x08009281
 8009218:	0800933f 	.word	0x0800933f
 800921c:	080091cd 	.word	0x080091cd
 8009220:	080091cd 	.word	0x080091cd
 8009224:	0800937f 	.word	0x0800937f
 8009228:	080091cd 	.word	0x080091cd
 800922c:	08009281 	.word	0x08009281
 8009230:	080091cd 	.word	0x080091cd
 8009234:	080091cd 	.word	0x080091cd
 8009238:	08009347 	.word	0x08009347
 800923c:	680b      	ldr	r3, [r1, #0]
 800923e:	1d1a      	adds	r2, r3, #4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	600a      	str	r2, [r1, #0]
 8009244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800924c:	2301      	movs	r3, #1
 800924e:	e0a3      	b.n	8009398 <_printf_i+0x1f4>
 8009250:	6825      	ldr	r5, [r4, #0]
 8009252:	6808      	ldr	r0, [r1, #0]
 8009254:	062e      	lsls	r6, r5, #24
 8009256:	f100 0304 	add.w	r3, r0, #4
 800925a:	d50a      	bpl.n	8009272 <_printf_i+0xce>
 800925c:	6805      	ldr	r5, [r0, #0]
 800925e:	600b      	str	r3, [r1, #0]
 8009260:	2d00      	cmp	r5, #0
 8009262:	da03      	bge.n	800926c <_printf_i+0xc8>
 8009264:	232d      	movs	r3, #45	; 0x2d
 8009266:	426d      	negs	r5, r5
 8009268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800926c:	485e      	ldr	r0, [pc, #376]	; (80093e8 <_printf_i+0x244>)
 800926e:	230a      	movs	r3, #10
 8009270:	e019      	b.n	80092a6 <_printf_i+0x102>
 8009272:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009276:	6805      	ldr	r5, [r0, #0]
 8009278:	600b      	str	r3, [r1, #0]
 800927a:	bf18      	it	ne
 800927c:	b22d      	sxthne	r5, r5
 800927e:	e7ef      	b.n	8009260 <_printf_i+0xbc>
 8009280:	680b      	ldr	r3, [r1, #0]
 8009282:	6825      	ldr	r5, [r4, #0]
 8009284:	1d18      	adds	r0, r3, #4
 8009286:	6008      	str	r0, [r1, #0]
 8009288:	0628      	lsls	r0, r5, #24
 800928a:	d501      	bpl.n	8009290 <_printf_i+0xec>
 800928c:	681d      	ldr	r5, [r3, #0]
 800928e:	e002      	b.n	8009296 <_printf_i+0xf2>
 8009290:	0669      	lsls	r1, r5, #25
 8009292:	d5fb      	bpl.n	800928c <_printf_i+0xe8>
 8009294:	881d      	ldrh	r5, [r3, #0]
 8009296:	4854      	ldr	r0, [pc, #336]	; (80093e8 <_printf_i+0x244>)
 8009298:	2f6f      	cmp	r7, #111	; 0x6f
 800929a:	bf0c      	ite	eq
 800929c:	2308      	moveq	r3, #8
 800929e:	230a      	movne	r3, #10
 80092a0:	2100      	movs	r1, #0
 80092a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092a6:	6866      	ldr	r6, [r4, #4]
 80092a8:	60a6      	str	r6, [r4, #8]
 80092aa:	2e00      	cmp	r6, #0
 80092ac:	bfa2      	ittt	ge
 80092ae:	6821      	ldrge	r1, [r4, #0]
 80092b0:	f021 0104 	bicge.w	r1, r1, #4
 80092b4:	6021      	strge	r1, [r4, #0]
 80092b6:	b90d      	cbnz	r5, 80092bc <_printf_i+0x118>
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	d04d      	beq.n	8009358 <_printf_i+0x1b4>
 80092bc:	4616      	mov	r6, r2
 80092be:	fbb5 f1f3 	udiv	r1, r5, r3
 80092c2:	fb03 5711 	mls	r7, r3, r1, r5
 80092c6:	5dc7      	ldrb	r7, [r0, r7]
 80092c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092cc:	462f      	mov	r7, r5
 80092ce:	42bb      	cmp	r3, r7
 80092d0:	460d      	mov	r5, r1
 80092d2:	d9f4      	bls.n	80092be <_printf_i+0x11a>
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d10b      	bne.n	80092f0 <_printf_i+0x14c>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	07df      	lsls	r7, r3, #31
 80092dc:	d508      	bpl.n	80092f0 <_printf_i+0x14c>
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	6861      	ldr	r1, [r4, #4]
 80092e2:	4299      	cmp	r1, r3
 80092e4:	bfde      	ittt	le
 80092e6:	2330      	movle	r3, #48	; 0x30
 80092e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80092f0:	1b92      	subs	r2, r2, r6
 80092f2:	6122      	str	r2, [r4, #16]
 80092f4:	f8cd a000 	str.w	sl, [sp]
 80092f8:	464b      	mov	r3, r9
 80092fa:	aa03      	add	r2, sp, #12
 80092fc:	4621      	mov	r1, r4
 80092fe:	4640      	mov	r0, r8
 8009300:	f7ff fee2 	bl	80090c8 <_printf_common>
 8009304:	3001      	adds	r0, #1
 8009306:	d14c      	bne.n	80093a2 <_printf_i+0x1fe>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800930c:	b004      	add	sp, #16
 800930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009312:	4835      	ldr	r0, [pc, #212]	; (80093e8 <_printf_i+0x244>)
 8009314:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	680e      	ldr	r6, [r1, #0]
 800931c:	061f      	lsls	r7, r3, #24
 800931e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009322:	600e      	str	r6, [r1, #0]
 8009324:	d514      	bpl.n	8009350 <_printf_i+0x1ac>
 8009326:	07d9      	lsls	r1, r3, #31
 8009328:	bf44      	itt	mi
 800932a:	f043 0320 	orrmi.w	r3, r3, #32
 800932e:	6023      	strmi	r3, [r4, #0]
 8009330:	b91d      	cbnz	r5, 800933a <_printf_i+0x196>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	f023 0320 	bic.w	r3, r3, #32
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	2310      	movs	r3, #16
 800933c:	e7b0      	b.n	80092a0 <_printf_i+0xfc>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	f043 0320 	orr.w	r3, r3, #32
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	2378      	movs	r3, #120	; 0x78
 8009348:	4828      	ldr	r0, [pc, #160]	; (80093ec <_printf_i+0x248>)
 800934a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800934e:	e7e3      	b.n	8009318 <_printf_i+0x174>
 8009350:	065e      	lsls	r6, r3, #25
 8009352:	bf48      	it	mi
 8009354:	b2ad      	uxthmi	r5, r5
 8009356:	e7e6      	b.n	8009326 <_printf_i+0x182>
 8009358:	4616      	mov	r6, r2
 800935a:	e7bb      	b.n	80092d4 <_printf_i+0x130>
 800935c:	680b      	ldr	r3, [r1, #0]
 800935e:	6826      	ldr	r6, [r4, #0]
 8009360:	6960      	ldr	r0, [r4, #20]
 8009362:	1d1d      	adds	r5, r3, #4
 8009364:	600d      	str	r5, [r1, #0]
 8009366:	0635      	lsls	r5, r6, #24
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	d501      	bpl.n	8009370 <_printf_i+0x1cc>
 800936c:	6018      	str	r0, [r3, #0]
 800936e:	e002      	b.n	8009376 <_printf_i+0x1d2>
 8009370:	0671      	lsls	r1, r6, #25
 8009372:	d5fb      	bpl.n	800936c <_printf_i+0x1c8>
 8009374:	8018      	strh	r0, [r3, #0]
 8009376:	2300      	movs	r3, #0
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	4616      	mov	r6, r2
 800937c:	e7ba      	b.n	80092f4 <_printf_i+0x150>
 800937e:	680b      	ldr	r3, [r1, #0]
 8009380:	1d1a      	adds	r2, r3, #4
 8009382:	600a      	str	r2, [r1, #0]
 8009384:	681e      	ldr	r6, [r3, #0]
 8009386:	6862      	ldr	r2, [r4, #4]
 8009388:	2100      	movs	r1, #0
 800938a:	4630      	mov	r0, r6
 800938c:	f7f6 ff20 	bl	80001d0 <memchr>
 8009390:	b108      	cbz	r0, 8009396 <_printf_i+0x1f2>
 8009392:	1b80      	subs	r0, r0, r6
 8009394:	6060      	str	r0, [r4, #4]
 8009396:	6863      	ldr	r3, [r4, #4]
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	2300      	movs	r3, #0
 800939c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a0:	e7a8      	b.n	80092f4 <_printf_i+0x150>
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	4632      	mov	r2, r6
 80093a6:	4649      	mov	r1, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	47d0      	blx	sl
 80093ac:	3001      	adds	r0, #1
 80093ae:	d0ab      	beq.n	8009308 <_printf_i+0x164>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	079b      	lsls	r3, r3, #30
 80093b4:	d413      	bmi.n	80093de <_printf_i+0x23a>
 80093b6:	68e0      	ldr	r0, [r4, #12]
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	4298      	cmp	r0, r3
 80093bc:	bfb8      	it	lt
 80093be:	4618      	movlt	r0, r3
 80093c0:	e7a4      	b.n	800930c <_printf_i+0x168>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4632      	mov	r2, r6
 80093c6:	4649      	mov	r1, r9
 80093c8:	4640      	mov	r0, r8
 80093ca:	47d0      	blx	sl
 80093cc:	3001      	adds	r0, #1
 80093ce:	d09b      	beq.n	8009308 <_printf_i+0x164>
 80093d0:	3501      	adds	r5, #1
 80093d2:	68e3      	ldr	r3, [r4, #12]
 80093d4:	9903      	ldr	r1, [sp, #12]
 80093d6:	1a5b      	subs	r3, r3, r1
 80093d8:	42ab      	cmp	r3, r5
 80093da:	dcf2      	bgt.n	80093c2 <_printf_i+0x21e>
 80093dc:	e7eb      	b.n	80093b6 <_printf_i+0x212>
 80093de:	2500      	movs	r5, #0
 80093e0:	f104 0619 	add.w	r6, r4, #25
 80093e4:	e7f5      	b.n	80093d2 <_printf_i+0x22e>
 80093e6:	bf00      	nop
 80093e8:	0800958d 	.word	0x0800958d
 80093ec:	0800959e 	.word	0x0800959e

080093f0 <memmove>:
 80093f0:	4288      	cmp	r0, r1
 80093f2:	b510      	push	{r4, lr}
 80093f4:	eb01 0402 	add.w	r4, r1, r2
 80093f8:	d902      	bls.n	8009400 <memmove+0x10>
 80093fa:	4284      	cmp	r4, r0
 80093fc:	4623      	mov	r3, r4
 80093fe:	d807      	bhi.n	8009410 <memmove+0x20>
 8009400:	1e43      	subs	r3, r0, #1
 8009402:	42a1      	cmp	r1, r4
 8009404:	d008      	beq.n	8009418 <memmove+0x28>
 8009406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800940a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800940e:	e7f8      	b.n	8009402 <memmove+0x12>
 8009410:	4402      	add	r2, r0
 8009412:	4601      	mov	r1, r0
 8009414:	428a      	cmp	r2, r1
 8009416:	d100      	bne.n	800941a <memmove+0x2a>
 8009418:	bd10      	pop	{r4, pc}
 800941a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800941e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009422:	e7f7      	b.n	8009414 <memmove+0x24>

08009424 <_realloc_r>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	4607      	mov	r7, r0
 8009428:	4614      	mov	r4, r2
 800942a:	460e      	mov	r6, r1
 800942c:	b921      	cbnz	r1, 8009438 <_realloc_r+0x14>
 800942e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009432:	4611      	mov	r1, r2
 8009434:	f7ff bb9c 	b.w	8008b70 <_malloc_r>
 8009438:	b922      	cbnz	r2, 8009444 <_realloc_r+0x20>
 800943a:	f7ff fc99 	bl	8008d70 <_free_r>
 800943e:	4625      	mov	r5, r4
 8009440:	4628      	mov	r0, r5
 8009442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009444:	f000 f814 	bl	8009470 <_malloc_usable_size_r>
 8009448:	42a0      	cmp	r0, r4
 800944a:	d20f      	bcs.n	800946c <_realloc_r+0x48>
 800944c:	4621      	mov	r1, r4
 800944e:	4638      	mov	r0, r7
 8009450:	f7ff fb8e 	bl	8008b70 <_malloc_r>
 8009454:	4605      	mov	r5, r0
 8009456:	2800      	cmp	r0, #0
 8009458:	d0f2      	beq.n	8009440 <_realloc_r+0x1c>
 800945a:	4631      	mov	r1, r6
 800945c:	4622      	mov	r2, r4
 800945e:	f7ff fb71 	bl	8008b44 <memcpy>
 8009462:	4631      	mov	r1, r6
 8009464:	4638      	mov	r0, r7
 8009466:	f7ff fc83 	bl	8008d70 <_free_r>
 800946a:	e7e9      	b.n	8009440 <_realloc_r+0x1c>
 800946c:	4635      	mov	r5, r6
 800946e:	e7e7      	b.n	8009440 <_realloc_r+0x1c>

08009470 <_malloc_usable_size_r>:
 8009470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009474:	1f18      	subs	r0, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfbc      	itt	lt
 800947a:	580b      	ldrlt	r3, [r1, r0]
 800947c:	18c0      	addlt	r0, r0, r3
 800947e:	4770      	bx	lr

08009480 <_init>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr

0800948c <_fini>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	bf00      	nop
 8009490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009492:	bc08      	pop	{r3}
 8009494:	469e      	mov	lr, r3
 8009496:	4770      	bx	lr
