
smart_room.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800873c  0800873c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800873c  0800873c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800873c  0800873c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001114  20000074  080087b8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  080087b8  00021188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002044f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f32  00000000  00000000  000404f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00044428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  00045e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca74  00000000  00000000  00047670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afcb  00000000  00000000  000740e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116368  00000000  00000000  0008f0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a5417  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007290  00000000  00000000  001a546c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008600 	.word	0x08008600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008600 	.word	0x08008600

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	20000144 	.word	0x20000144

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b20      	cmp	r3, #32
 8000414:	d101      	bne.n	800041a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000416:	2301      	movs	r3, #1
 8000418:	e000      	b.n	800041c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d101      	bne.n	8000440 <LL_USART_IsActiveFlag_TXE+0x18>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 0220 	orr.w	r2, r3, #32
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	460b      	mov	r3, r1
 80004d4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	4907      	ldr	r1, [pc, #28]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000526:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <sendchar>:
QueueHandle_t tx_queue_2;
QueueHandle_t rx_queue_2;
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

void sendchar(char c, char usart){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10b      	bne.n	80005aa <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <sendchar+0x54>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	2300      	movs	r3, #0
 800059a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800059e:	f005 fc2b 	bl	8005df8 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <sendchar+0x58>)
 80005a4:	f7ff ff63 	bl	800046e <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 80005a8:	e00d      	b.n	80005c6 <sendchar+0x4a>
	else if( usart == USART_2){
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d10a      	bne.n	80005c6 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <sendchar+0x5c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	2300      	movs	r3, #0
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005bc:	f005 fc1c 	bl	8005df8 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <sendchar+0x60>)
 80005c2:	f7ff ff54 	bl	800046e <LL_USART_EnableIT_TXE>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20001124 	.word	0x20001124
 80005d4:	40013800 	.word	0x40013800
 80005d8:	2000111c 	.word	0x2000111c
 80005dc:	40004400 	.word	0x40004400

080005e0 <sendString>:

void sendString(char * str, char usart){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 80005ec:	e009      	b.n	8000602 <sendString+0x22>
		sendchar(*str, usart);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffc0 	bl	800057c <sendchar>
		str++;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f1      	bne.n	80005ee <sendString+0xe>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <readchar>:

char readchar(char usart){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d109      	bne.n	800063c <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <readchar+0x4c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 010f 	add.w	r1, r7, #15
 8000630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000634:	4618      	mov	r0, r3
 8000636:	f005 fd79 	bl	800612c <xQueueReceive>
 800063a:	e00b      	b.n	8000654 <readchar+0x40>
	else if(usart == USART_2)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d108      	bne.n	8000654 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <readchar+0x50>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f107 010f 	add.w	r1, r7, #15
 800064a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800064e:	4618      	mov	r0, r3
 8000650:	f005 fd6c 	bl	800612c <xQueueReceive>
	return caracter;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20001068 	.word	0x20001068
 8000664:	20001120 	.word	0x20001120

08000668 <cli>:

void cli(void * vParam)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	while(1)
	{
		caracter = readchar(USART_1);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ffcf 	bl	8000614 <readchar>
 8000676:	4603      	mov	r3, r0
 8000678:	75fb      	strb	r3, [r7, #23]

		char buff[8];
		uint8_t temp = readVoltage();
 800067a:	f000 f875 	bl	8000768 <readVoltage>
 800067e:	4603      	mov	r3, r0
 8000680:	75bb      	strb	r3, [r7, #22]
		sprintf(buff,"%d\r\n", temp);
 8000682:	7dba      	ldrb	r2, [r7, #22]
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	492e      	ldr	r1, [pc, #184]	; (8000744 <cli+0xdc>)
 800068a:	4618      	mov	r0, r3
 800068c:	f007 fc04 	bl	8007e98 <siprintf>
		sendString(buff, USART_2);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffa2 	bl	80005e0 <sendString>
		sendString(buff, USART_1);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2101      	movs	r1, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff9c 	bl	80005e0 <sendString>

		switch(caracter){
 80006a8:	7dfb      	ldrb	r3, [r7, #23]
 80006aa:	3b41      	subs	r3, #65	; 0x41
 80006ac:	2b19      	cmp	r3, #25
 80006ae:	d8df      	bhi.n	8000670 <cli+0x8>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <cli+0x50>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	08000671 	.word	0x08000671
 80006bc:	08000671 	.word	0x08000671
 80006c0:	08000739 	.word	0x08000739
 80006c4:	08000729 	.word	0x08000729
 80006c8:	08000671 	.word	0x08000671
 80006cc:	08000671 	.word	0x08000671
 80006d0:	08000671 	.word	0x08000671
 80006d4:	08000671 	.word	0x08000671
 80006d8:	08000671 	.word	0x08000671
 80006dc:	08000671 	.word	0x08000671
 80006e0:	08000671 	.word	0x08000671
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000671 	.word	0x08000671
 80006ec:	08000671 	.word	0x08000671
 80006f0:	08000731 	.word	0x08000731
 80006f4:	08000671 	.word	0x08000671
 80006f8:	08000671 	.word	0x08000671
 80006fc:	08000671 	.word	0x08000671
 8000700:	08000671 	.word	0x08000671
 8000704:	08000671 	.word	0x08000671
 8000708:	08000671 	.word	0x08000671
 800070c:	08000671 	.word	0x08000671
 8000710:	08000671 	.word	0x08000671
 8000714:	08000671 	.word	0x08000671
 8000718:	08000671 	.word	0x08000671
 800071c:	08000671 	.word	0x08000671
					case 'L':
						changeLedState(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 f811 	bl	8000748 <changeLedState>
						break;
 8000726:	e00b      	b.n	8000740 <cli+0xd8>
					case 'D':
						changeLedState(0);
 8000728:	2000      	movs	r0, #0
 800072a:	f000 f80d 	bl	8000748 <changeLedState>
						break;
 800072e:	e007      	b.n	8000740 <cli+0xd8>
					case 'O':
						changeDoorState(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 f833 	bl	800079c <changeDoorState>
						break;
 8000736:	e003      	b.n	8000740 <cli+0xd8>
					case 'C':
						changeDoorState(0);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f82f 	bl	800079c <changeDoorState>
						break;
 800073e:	bf00      	nop
	{
 8000740:	e796      	b.n	8000670 <cli+0x8>
 8000742:	bf00      	nop
 8000744:	08008624 	.word	0x08008624

08000748 <changeLedState>:
				}
	}

}

void changeLedState(uint8_t mode){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, mode);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	461a      	mov	r2, r3
 8000756:	2120      	movs	r1, #32
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f002 faca 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <readVoltage>:

int8_t readVoltage(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <readVoltage+0x2c>)
 800076e:	f001 f96d 	bl	8001a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <readVoltage+0x2c>)
 8000778:	f001 fa22 	bl	8001bc0 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1) / 25;
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <readVoltage+0x2c>)
 800077e:	f001 faf7 	bl	8001d70 <HAL_ADC_GetValue>
 8000782:	4603      	mov	r3, r0
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <readVoltage+0x30>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	08db      	lsrs	r3, r3, #3
 800078c:	b25b      	sxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200010b8 	.word	0x200010b8
 8000798:	51eb851f 	.word	0x51eb851f

0800079c <changeDoorState>:

void changeDoorState(uint8_t mode){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, mode);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	461a      	mov	r2, r3
 80007aa:	2102      	movs	r1, #2
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f002 faa0 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <usart_1_fcn>:

//IMPORTANTE: Esta taska deve ser removida no projeto final
void usart_1_fcn(void * vParam){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	char c;
	while(1){
		c = readchar(USART_1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff ff25 	bl	8000614 <readchar>
 80007ca:	4603      	mov	r3, r0
 80007cc:	73fb      	strb	r3, [r7, #15]
		if( c != 0){
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0f7      	beq.n	80007c4 <usart_1_fcn+0x8>
			sendchar(c, USART_2);
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2102      	movs	r1, #2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fecf 	bl	800057c <sendchar>
		c = readchar(USART_1);
 80007de:	e7f1      	b.n	80007c4 <usart_1_fcn+0x8>

080007e0 <USART_2_IRQHandler>:
		}
	}
}
//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007e6:	482a      	ldr	r0, [pc, #168]	; (8000890 <USART_2_IRQHandler+0xb0>)
 80007e8:	f7ff fe1e 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d026      	beq.n	8000840 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007f2:	e014      	b.n	800081e <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <USART_2_IRQHandler+0xb4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f107 020c 	add.w	r2, r7, #12
 80007fc:	f107 010b 	add.w	r1, r7, #11
 8000800:	4618      	mov	r0, r3
 8000802:	f005 fd73 	bl	80062ec <xQueueReceiveFromISR>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 800080c:	4820      	ldr	r0, [pc, #128]	; (8000890 <USART_2_IRQHandler+0xb0>)
 800080e:	f7ff fe3e 	bl	800048e <LL_USART_DisableIT_TXE>
 8000812:	e00a      	b.n	800082a <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8000814:	7afb      	ldrb	r3, [r7, #11]
 8000816:	4619      	mov	r1, r3
 8000818:	481d      	ldr	r0, [pc, #116]	; (8000890 <USART_2_IRQHandler+0xb0>)
 800081a:	f7ff fe56 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 800081e:	481c      	ldr	r0, [pc, #112]	; (8000890 <USART_2_IRQHandler+0xb0>)
 8000820:	f7ff fe02 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1e4      	bne.n	80007f4 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d007      	beq.n	8000840 <USART_2_IRQHandler+0x60>
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <USART_2_IRQHandler+0xb8>)
 8000832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	f3bf 8f4f 	dsb	sy
 800083c:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000840:	4813      	ldr	r0, [pc, #76]	; (8000890 <USART_2_IRQHandler+0xb0>)
 8000842:	f7ff fdde 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d01d      	beq.n	8000888 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800084c:	e00b      	b.n	8000866 <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <USART_2_IRQHandler+0xb0>)
 8000850:	f7ff fe2d 	bl	80004ae <LL_USART_ReceiveData8>
 8000854:	4603      	mov	r3, r0
        	uint8_t byte =
 8000856:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <USART_2_IRQHandler+0xbc>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	1d3a      	adds	r2, r7, #4
 800085e:	1cf9      	adds	r1, r7, #3
 8000860:	2300      	movs	r3, #0
 8000862:	f005 fbc7 	bl	8005ff4 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <USART_2_IRQHandler+0xb0>)
 8000868:	f7ff fdcb 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1ed      	bne.n	800084e <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d007      	beq.n	8000888 <USART_2_IRQHandler+0xa8>
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <USART_2_IRQHandler+0xb8>)
 800087a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	f3bf 8f6f 	isb	sy
    }
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	2000111c 	.word	0x2000111c
 8000898:	e000ed04 	.word	0xe000ed04
 800089c:	20001120 	.word	0x20001120

080008a0 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <USART_1_IRQHandler+0xb0>)
 80008a8:	f7ff fdbe 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d026      	beq.n	8000900 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008b2:	e014      	b.n	80008de <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <USART_1_IRQHandler+0xb4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f107 020c 	add.w	r2, r7, #12
 80008bc:	f107 010b 	add.w	r1, r7, #11
 80008c0:	4618      	mov	r0, r3
 80008c2:	f005 fd13 	bl	80062ec <xQueueReceiveFromISR>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 80008cc:	4820      	ldr	r0, [pc, #128]	; (8000950 <USART_1_IRQHandler+0xb0>)
 80008ce:	f7ff fdde 	bl	800048e <LL_USART_DisableIT_TXE>
 80008d2:	e00a      	b.n	80008ea <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	4619      	mov	r1, r3
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <USART_1_IRQHandler+0xb0>)
 80008da:	f7ff fdf6 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008de:	481c      	ldr	r0, [pc, #112]	; (8000950 <USART_1_IRQHandler+0xb0>)
 80008e0:	f7ff fda2 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1e4      	bne.n	80008b4 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <USART_1_IRQHandler+0x60>
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <USART_1_IRQHandler+0xb8>)
 80008f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <USART_1_IRQHandler+0xb0>)
 8000902:	f7ff fd7e 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d01d      	beq.n	8000948 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800090c:	e00b      	b.n	8000926 <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 800090e:	4810      	ldr	r0, [pc, #64]	; (8000950 <USART_1_IRQHandler+0xb0>)
 8000910:	f7ff fdcd 	bl	80004ae <LL_USART_ReceiveData8>
 8000914:	4603      	mov	r3, r0
        	uint8_t byte =
 8000916:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <USART_1_IRQHandler+0xbc>)
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	1d3a      	adds	r2, r7, #4
 800091e:	1cf9      	adds	r1, r7, #3
 8000920:	2300      	movs	r3, #0
 8000922:	f005 fb67 	bl	8005ff4 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000926:	480a      	ldr	r0, [pc, #40]	; (8000950 <USART_1_IRQHandler+0xb0>)
 8000928:	f7ff fd6b 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1ed      	bne.n	800090e <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d007      	beq.n	8000948 <USART_1_IRQHandler+0xa8>
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <USART_1_IRQHandler+0xb8>)
 800093a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	f3bf 8f6f 	isb	sy
    }
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40013800 	.word	0x40013800
 8000954:	20001124 	.word	0x20001124
 8000958:	e000ed04 	.word	0xe000ed04
 800095c:	20001068 	.word	0x20001068

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000966:	f000 fcf7 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f84f 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f000 fa97 	bl	8000ea0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000972:	f000 f9fd 	bl	8000d70 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000976:	f000 f89b 	bl	8000ab0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800097a:	f000 f95f 	bl	8000c3c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800097e:	f000 f90d 	bl	8000b9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 8000982:	2001      	movs	r0, #1
 8000984:	f005 fa1f 	bl	8005dc6 <xQueueCreateMutex>
 8000988:	4603      	mov	r3, r0
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <main+0x8c>)
 800098c:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 800098e:	2001      	movs	r0, #1
 8000990:	f005 fa19 	bl	8005dc6 <xQueueCreateMutex>
 8000994:	4603      	mov	r3, r0
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <main+0x90>)
 8000998:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <main+0x94>)
 800099c:	1d3c      	adds	r4, r7, #4
 800099e:	461d      	mov	r5, r3
 80009a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f005 f818 	bl	80059e6 <osThreadCreate>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <main+0x98>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 80009bc:	2300      	movs	r3, #0
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	2301      	movs	r3, #1
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2300      	movs	r3, #0
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <main+0x9c>)
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <main+0xa0>)
 80009cc:	f005 fe7b 	bl	80066c6 <xTaskCreate>
			  NULL,       /* parametro para a task */
			  1,          /* nivel de prioridade */
			  NULL);      /* ponteiro para o handle da task */

  //IMPORTANTE: Esta taska deve ser removida no projeto final
  xTaskCreate(usart_1_fcn,    /* Nome da funcao que contem a task */
 80009d0:	2300      	movs	r3, #0
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	2301      	movs	r3, #1
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2300      	movs	r3, #0
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	4909      	ldr	r1, [pc, #36]	; (8000a04 <main+0xa4>)
 80009de:	480a      	ldr	r0, [pc, #40]	; (8000a08 <main+0xa8>)
 80009e0:	f005 fe71 	bl	80066c6 <xTaskCreate>
			  1,          /* nivel de prioridade */
			  NULL);      /* ponteiro para o handle da task */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009e4:	f004 fff8 	bl	80059d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <main+0x88>
 80009ea:	bf00      	nop
 80009ec:	20000344 	.word	0x20000344
 80009f0:	20000348 	.word	0x20000348
 80009f4:	0800863c 	.word	0x0800863c
 80009f8:	20001064 	.word	0x20001064
 80009fc:	0800862c 	.word	0x0800862c
 8000a00:	08000669 	.word	0x08000669
 8000a04:	08008630 	.word	0x08008630
 8000a08:	080007bd 	.word	0x080007bd

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b096      	sub	sp, #88	; 0x58
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2244      	movs	r2, #68	; 0x44
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f007 f960 	bl	8007ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a32:	f002 f985 	bl	8002d40 <HAL_PWREx_ControlVoltageScaling>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a3c:	f000 fab2 	bl	8000fa4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a52:	2302      	movs	r3, #2
 8000a54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 f9bc 	bl	8002dec <HAL_RCC_OscConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a7a:	f000 fa93 	bl	8000fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7e:	230f      	movs	r3, #15
 8000a80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a82:	2303      	movs	r3, #3
 8000a84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	2104      	movs	r1, #4
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fd8e 	bl	80035b8 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aa2:	f000 fa7f 	bl	8000fa4 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	; 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000ad4:	4a2f      	ldr	r2, [pc, #188]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000ad6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	4817      	ldr	r0, [pc, #92]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b34:	f000 fe34 	bl	80017a0 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b3e:	f000 fa31 	bl	8000fa4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4810      	ldr	r0, [pc, #64]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b4e:	f001 fd95 	bl	800267c <HAL_ADCEx_MultiModeConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b58:	f000 fa24 	bl	8000fa4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_ADC1_Init+0xe8>)
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b60:	2306      	movs	r3, #6
 8000b62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b68:	237f      	movs	r3, #127	; 0x7f
 8000b6a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_ADC1_Init+0xe0>)
 8000b7a:	f001 f907 	bl	8001d8c <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b84:	f000 fa0e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200010b8 	.word	0x200010b8
 8000b94:	50040000 	.word	0x50040000
 8000b98:	14f00020 	.word	0x14f00020

08000b9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <MX_TIM3_Init+0x9c>)
 8000bbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000bc2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000bd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000be2:	4814      	ldr	r0, [pc, #80]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000be4:	f003 fbc6 	bl	8004374 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000bee:	f000 f9d9 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000c00:	f003 fd9f 	bl	8004742 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000c0a:	f000 f9cb 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_TIM3_Init+0x98>)
 8000c1c:	f003 ffb4 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000c26:	f000 f9bd 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000106c 	.word	0x2000106c
 8000c38:	40000400 	.word	0x40000400

08000c3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0b0      	sub	sp, #192	; 0xc0
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2288      	movs	r2, #136	; 0x88
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f007 f836 	bl	8007ce0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 febc 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f000 f98b 	bl	8000fa4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000c8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c92:	f7ff fc5b 	bl	800054c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fc28 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000c9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ca0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f004 f94d 	bl	8004f6a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000cd0:	f7ff fae8 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb38 	bl	8000350 <NVIC_EncodePriority>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2025      	movs	r0, #37	; 0x25
 8000ce6:	f7ff fb09 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000cea:	2025      	movs	r0, #37	; 0x25
 8000cec:	f7ff fae8 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000cf0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 8000d1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4810      	ldr	r0, [pc, #64]	; (8000d64 <MX_USART1_UART_Init+0x128>)
 8000d24:	f004 fdc4 	bl	80058b0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <MX_USART1_UART_Init+0x128>)
 8000d2a:	f7ff fb54 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_USART1_UART_Init+0x128>)
 8000d30:	f7ff fb41 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000d34:	2200      	movs	r2, #0
 8000d36:	2101      	movs	r1, #1
 8000d38:	2080      	movs	r0, #128	; 0x80
 8000d3a:	f004 ffd1 	bl	8005ce0 <xQueueGenericCreate>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <MX_USART1_UART_Init+0x12c>)
 8000d42:	6013      	str	r3, [r2, #0]
   rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000d44:	2200      	movs	r2, #0
 8000d46:	2101      	movs	r1, #1
 8000d48:	2005      	movs	r0, #5
 8000d4a:	f004 ffc9 	bl	8005ce0 <xQueueGenericCreate>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <MX_USART1_UART_Init+0x130>)
 8000d52:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART1);
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <MX_USART1_UART_Init+0x128>)
 8000d56:	f7ff fb7a 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	37c0      	adds	r7, #192	; 0xc0
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40013800 	.word	0x40013800
 8000d68:	20001124 	.word	0x20001124
 8000d6c:	20001068 	.word	0x20001068

08000d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0b0      	sub	sp, #192	; 0xc0
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2288      	movs	r2, #136	; 0x88
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 ff9c 	bl	8007ce0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fe22 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f000 f8f1 	bl	8000fa4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000dc2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000dc6:	f7ff fba9 	bl	800051c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fb8e 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000dee:	2307      	movs	r3, #7
 8000df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f004 f8b4 	bl	8004f6a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000e02:	f7ff fa4f 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fa9f 	bl	8000350 <NVIC_EncodePriority>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4619      	mov	r1, r3
 8000e16:	2026      	movs	r0, #38	; 0x26
 8000e18:	f7ff fa70 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000e1c:	2026      	movs	r0, #38	; 0x26
 8000e1e:	f7ff fa4f 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e22:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8000e4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e52:	4619      	mov	r1, r3
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <MX_USART2_UART_Init+0x124>)
 8000e56:	f004 fd2b 	bl	80058b0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <MX_USART2_UART_Init+0x124>)
 8000e5c:	f7ff fabb 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_USART2_UART_Init+0x124>)
 8000e62:	f7ff faa8 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000e66:	2200      	movs	r2, #0
 8000e68:	2101      	movs	r1, #1
 8000e6a:	2080      	movs	r0, #128	; 0x80
 8000e6c:	f004 ff38 	bl	8005ce0 <xQueueGenericCreate>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <MX_USART2_UART_Init+0x128>)
 8000e74:	6013      	str	r3, [r2, #0]
   rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000e76:	2200      	movs	r2, #0
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2005      	movs	r0, #5
 8000e7c:	f004 ff30 	bl	8005ce0 <xQueueGenericCreate>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <MX_USART2_UART_Init+0x12c>)
 8000e84:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART2);
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <MX_USART2_UART_Init+0x124>)
 8000e88:	f7ff fae1 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	37c0      	adds	r7, #192	; 0xc0
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40004400 	.word	0x40004400
 8000e98:	2000111c 	.word	0x2000111c
 8000e9c:	20001120 	.word	0x20001120

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a2a      	ldr	r2, [pc, #168]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2132      	movs	r1, #50	; 0x32
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f001 fee9 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_GPIO_Init+0xcc>)
 8000f38:	f001 fd32 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8000f3c:	2332      	movs	r3, #50	; 0x32
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f001 fd23 	bl	80029a0 <HAL_GPIO_Init>

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	48000800 	.word	0x48000800

08000f70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f004 fd80 	bl	8005a7e <osDelay>
 8000f7e:	e7fb      	b.n	8000f78 <StartDefaultTask+0x8>

08000f80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f92:	f000 fa01 	bl	8001398 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40012c00 	.word	0x40012c00

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	210f      	movs	r1, #15
 8000fea:	f06f 0001 	mvn.w	r0, #1
 8000fee:	f001 fcad 	bl	800294c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ac      	sub	sp, #176	; 0xb0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2288      	movs	r2, #136	; 0x88
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f006 fe5d 	bl	8007ce0 <memset>
  if(hadc->Instance==ADC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_ADC_MspInit+0xc8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d147      	bne.n	80010c0 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001034:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001036:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800103a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001042:	2301      	movs	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001046:	2308      	movs	r3, #8
 8001048:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800104a:	2307      	movs	r3, #7
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fccb 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800106c:	f7ff ff9a 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_ADC_MspInit+0xcc>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_ADC_MspInit+0xcc>)
 8001076:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800107a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_ADC_MspInit+0xcc>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_ADC_MspInit+0xcc>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_ADC_MspInit+0xcc>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_ADC_MspInit+0xcc>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010a6:	230b      	movs	r3, #11
 80010a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f001 fc70 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	37b0      	adds	r7, #176	; 0xb0
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	50040000 	.word	0x50040000
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_TIM_Base_MspInit+0x44>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d113      	bne.n	800110a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_TIM_Base_MspInit+0x48>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_TIM_Base_MspInit+0x48>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_TIM_Base_MspInit+0x48>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	201d      	movs	r0, #29
 8001100:	f001 fc24 	bl	800294c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001104:	201d      	movs	r0, #29
 8001106:	f001 fc3d 	bl	8002984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40000400 	.word	0x40000400
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2019      	movs	r0, #25
 8001132:	f001 fc0b 	bl	800294c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001136:	2019      	movs	r0, #25
 8001138:	f001 fc24 	bl	8002984 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_InitTick+0x9c>)
 800113e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001140:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <HAL_InitTick+0x9c>)
 8001142:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001146:	6613      	str	r3, [r2, #96]	; 0x60
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_InitTick+0x9c>)
 800114a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001154:	f107 0210 	add.w	r2, r7, #16
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fbba 	bl	80038d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001164:	f002 fba2 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8001168:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_InitTick+0xa0>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9b      	lsrs	r3, r3, #18
 8001174:	3b01      	subs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_InitTick+0xa4>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <HAL_InitTick+0xa8>)
 800117c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_InitTick+0xa4>)
 8001180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001184:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_InitTick+0xa4>)
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_InitTick+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_InitTick+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <HAL_InitTick+0xa4>)
 800119a:	f003 f8eb 	bl	8004374 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d104      	bne.n	80011ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <HAL_InitTick+0xa4>)
 80011a6:	f003 f93d 	bl	8004424 <HAL_TIM_Base_Start_IT>
 80011aa:	4603      	mov	r3, r0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	20001128 	.word	0x20001128
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011fa:	f003 f983 	bl	8004504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20001128 	.word	0x20001128

08001208 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM3_IRQHandler+0x10>)
 800120e:	f003 f979 	bl	8004504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000106c 	.word	0x2000106c

0800121c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8001220:	f7ff fb3e 	bl	80008a0 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 800122c:	f7ff fad8 	bl	80007e0 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f006 fd02 	bl	8007c6c <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20018000 	.word	0x20018000
 8001294:	00000400 	.word	0x00000400
 8001298:	2000034c 	.word	0x2000034c
 800129c:	20001188 	.word	0x20001188

080012a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <SystemInit+0x5c>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <SystemInit+0x5c>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <SystemInit+0x60>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <SystemInit+0x60>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <SystemInit+0x60>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <SystemInit+0x60>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <SystemInit+0x60>)
 80012cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <SystemInit+0x60>)
 80012d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <SystemInit+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <SystemInit+0x60>)
 80012e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SystemInit+0x60>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	40021000 	.word	0x40021000

08001304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001308:	f7ff ffca 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800130c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800130e:	e003      	b.n	8001318 <LoopCopyDataInit>

08001310 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001312:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001314:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001316:	3104      	adds	r1, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <LoopForever+0xa>)
	ldr	r3, =_edata
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LoopForever+0xe>)
	adds	r2, r0, r1
 800131c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800131e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001320:	d3f6      	bcc.n	8001310 <CopyDataInit>
	ldr	r2, =_sbss
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001324:	e002      	b.n	800132c <LoopFillZerobss>

08001326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001326:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001328:	f842 3b04 	str.w	r3, [r2], #4

0800132c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <LoopForever+0x16>)
	cmp	r2, r3
 800132e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001330:	d3f9      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001332:	f006 fca1 	bl	8007c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001336:	f7ff fb13 	bl	8000960 <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800133c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001340:	08008744 	.word	0x08008744
	ldr	r0, =_sdata
 8001344:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001348:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800134c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001350:	20001188 	.word	0x20001188

08001354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_2_IRQHandler>
	...

08001358 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_Init+0x3c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_Init+0x3c>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136e:	2003      	movs	r0, #3
 8001370:	f001 fae1 	bl	8002936 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001374:	200f      	movs	r0, #15
 8001376:	f7ff fed1 	bl	800111c <HAL_InitTick>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	e001      	b.n	800138a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001386:	f7ff fe13 	bl	8000fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800138a:	79fb      	ldrb	r3, [r7, #7]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20001174 	.word	0x20001174

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20001174 	.word	0x20001174

080013d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	609a      	str	r2, [r3, #8]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3360      	adds	r3, #96	; 0x60
 8001452:	461a      	mov	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LL_ADC_SetOffset+0x44>)
 8001462:	4013      	ands	r3, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	4313      	orrs	r3, r2
 8001470:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	03fff000 	.word	0x03fff000

08001488 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3360      	adds	r3, #96	; 0x60
 8001496:	461a      	mov	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3360      	adds	r3, #96	; 0x60
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3330      	adds	r3, #48	; 0x30
 8001520:	461a      	mov	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	4413      	add	r3, r2
 800152e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	211f      	movs	r1, #31
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	401a      	ands	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	0e9b      	lsrs	r3, r3, #26
 8001548:	f003 011f 	and.w	r1, r3, #31
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	431a      	orrs	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800155c:	bf00      	nop
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3314      	adds	r3, #20
 8001578:	461a      	mov	r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	0e5b      	lsrs	r3, r3, #25
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	4413      	add	r3, r2
 8001586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	0d1b      	lsrs	r3, r3, #20
 8001590:	f003 031f 	and.w	r3, r3, #31
 8001594:	2107      	movs	r1, #7
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	401a      	ands	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0d1b      	lsrs	r3, r3, #20
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0318 	and.w	r3, r3, #24
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015e4:	40d9      	lsrs	r1, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	400b      	ands	r3, r1
 80015ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ee:	431a      	orrs	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	0007ffff 	.word	0x0007ffff

08001608 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 031f 	and.w	r3, r3, #31
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6093      	str	r3, [r2, #8]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001678:	d101      	bne.n	800167e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800169c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016c8:	d101      	bne.n	80016ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <LL_ADC_IsEnabled+0x18>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_ADC_IsEnabled+0x1a>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800173a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800173e:	f043 0204 	orr.w	r2, r3, #4
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b04      	cmp	r3, #4
 8001764:	d101      	bne.n	800176a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b08      	cmp	r3, #8
 800178a:	d101      	bne.n	8001790 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e136      	b.n	8001a28 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fc19 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff3f 	bl	8001664 <LL_ADC_IsDeepPowerDownEnabled>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff25 	bl	8001640 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff5a 	bl	80016b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff3e 	bl	800168c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001810:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <HAL_ADC_Init+0x290>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	4a87      	ldr	r2, [pc, #540]	; (8001a34 <HAL_ADC_Init+0x294>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001824:	e002      	b.n	800182c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3b01      	subs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff3c 	bl	80016b4 <LL_ADC_IsInternalRegulatorEnabled>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff75 	bl	8001752 <LL_ADC_REG_IsConversionOngoing>
 8001868:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 80cf 	bne.w	8001a16 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 80cb 	bne.w	8001a16 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001888:	f043 0202 	orr.w	r2, r3, #2
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff35 	bl	8001704 <LL_ADC_IsEnabled>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d115      	bne.n	80018cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018a0:	4865      	ldr	r0, [pc, #404]	; (8001a38 <HAL_ADC_Init+0x298>)
 80018a2:	f7ff ff2f 	bl	8001704 <LL_ADC_IsEnabled>
 80018a6:	4604      	mov	r4, r0
 80018a8:	4864      	ldr	r0, [pc, #400]	; (8001a3c <HAL_ADC_Init+0x29c>)
 80018aa:	f7ff ff2b 	bl	8001704 <LL_ADC_IsEnabled>
 80018ae:	4603      	mov	r3, r0
 80018b0:	431c      	orrs	r4, r3
 80018b2:	4863      	ldr	r0, [pc, #396]	; (8001a40 <HAL_ADC_Init+0x2a0>)
 80018b4:	f7ff ff26 	bl	8001704 <LL_ADC_IsEnabled>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4323      	orrs	r3, r4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4619      	mov	r1, r3
 80018c6:	485f      	ldr	r0, [pc, #380]	; (8001a44 <HAL_ADC_Init+0x2a4>)
 80018c8:	f7ff fd86 	bl	80013d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7e5b      	ldrb	r3, [r3, #25]
 80018d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d106      	bne.n	8001908 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	3b01      	subs	r3, #1
 8001900:	045b      	lsls	r3, r3, #17
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_ADC_Init+0x2a8>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	430b      	orrs	r3, r1
 8001936:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff08 	bl	8001752 <LL_ADC_REG_IsConversionOngoing>
 8001942:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff15 	bl	8001778 <LL_ADC_INJ_IsConversionOngoing>
 800194e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d13d      	bne.n	80019d2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d13a      	bne.n	80019d2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001960:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001968:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001978:	f023 0302 	bic.w	r3, r3, #2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	69b9      	ldr	r1, [r7, #24]
 8001982:	430b      	orrs	r3, r1
 8001984:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800198c:	2b01      	cmp	r3, #1
 800198e:	d118      	bne.n	80019c2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019b2:	430a      	orrs	r2, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	e007      	b.n	80019d2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10c      	bne.n	80019f4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	f023 010f 	bic.w	r1, r3, #15
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
 80019f2:	e007      	b.n	8001a04 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020f 	bic.w	r2, r2, #15
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f023 0303 	bic.w	r3, r3, #3
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
 8001a14:	e007      	b.n	8001a26 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	f043 0210 	orr.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3724      	adds	r7, #36	; 0x24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	053e2d63 	.word	0x053e2d63
 8001a38:	50040000 	.word	0x50040000
 8001a3c:	50040100 	.word	0x50040100
 8001a40:	50040200 	.word	0x50040200
 8001a44:	50040300 	.word	0x50040300
 8001a48:	fff0c007 	.word	0xfff0c007

08001a4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a54:	4857      	ldr	r0, [pc, #348]	; (8001bb4 <HAL_ADC_Start+0x168>)
 8001a56:	f7ff fdd7 	bl	8001608 <LL_ADC_GetMultimode>
 8001a5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fe76 	bl	8001752 <LL_ADC_REG_IsConversionOngoing>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 809c 	bne.w	8001ba6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_Start+0x30>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e097      	b.n	8001bac <HAL_ADC_Start+0x160>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fd71 	bl	800256c <ADC_Enable>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 8083 	bne.w	8001b9c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <HAL_ADC_Start+0x16c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d002      	beq.n	8001aba <HAL_ADC_Start+0x6e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e000      	b.n	8001abc <HAL_ADC_Start+0x70>
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_ADC_Start+0x170>)
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d002      	beq.n	8001aca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	f023 0206 	bic.w	r2, r3, #6
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	659a      	str	r2, [r3, #88]	; 0x58
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	221c      	movs	r2, #28
 8001afe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <HAL_ADC_Start+0x16c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d002      	beq.n	8001b18 <HAL_ADC_Start+0xcc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e000      	b.n	8001b1a <HAL_ADC_Start+0xce>
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_ADC_Start+0x170>)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d008      	beq.n	8001b34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d002      	beq.n	8001b34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d114      	bne.n	8001b5e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fde7 	bl	800172a <LL_ADC_REG_StartConversion>
 8001b5c:	e025      	b.n	8001baa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_ADC_Start+0x16c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d002      	beq.n	8001b7a <HAL_ADC_Start+0x12e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e000      	b.n	8001b7c <HAL_ADC_Start+0x130>
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_ADC_Start+0x170>)
 8001b7c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00f      	beq.n	8001baa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
 8001b9a:	e006      	b.n	8001baa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ba4:	e001      	b.n	8001baa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	50040300 	.word	0x50040300
 8001bb8:	50040100 	.word	0x50040100
 8001bbc:	50040000 	.word	0x50040000

08001bc0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bca:	4866      	ldr	r0, [pc, #408]	; (8001d64 <HAL_ADC_PollForConversion+0x1a4>)
 8001bcc:	f7ff fd1c 	bl	8001608 <LL_ADC_GetMultimode>
 8001bd0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d102      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001bda:	2308      	movs	r3, #8
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e02a      	b.n	8001c36 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d002      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b09      	cmp	r3, #9
 8001bf0:	d111      	bne.n	8001c16 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c04:	f043 0220 	orr.w	r2, r3, #32
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0a4      	b.n	8001d5a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c10:	2304      	movs	r3, #4
 8001c12:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c14:	e00f      	b.n	8001c36 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c16:	4853      	ldr	r0, [pc, #332]	; (8001d64 <HAL_ADC_PollForConversion+0x1a4>)
 8001c18:	f7ff fd04 	bl	8001624 <LL_ADC_GetMultiDMATransfer>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f043 0220 	orr.w	r2, r3, #32
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e093      	b.n	8001d5a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c32:	2304      	movs	r3, #4
 8001c34:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c36:	f7ff fbc3 	bl	80013c0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c3c:	e021      	b.n	8001c82 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c44:	d01d      	beq.n	8001c82 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c46:	f7ff fbbb 	bl	80013c0 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d302      	bcc.n	8001c5c <HAL_ADC_PollForConversion+0x9c>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d112      	bne.n	8001c82 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10b      	bne.n	8001c82 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	f043 0204 	orr.w	r2, r3, #4
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e06b      	b.n	8001d5a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0d6      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc22 	bl	80014ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01c      	beq.n	8001ce6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e5b      	ldrb	r3, [r3, #25]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d118      	bne.n	8001ce6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d111      	bne.n	8001ce6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_ADC_PollForConversion+0x1a8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d002      	beq.n	8001cf6 <HAL_ADC_PollForConversion+0x136>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	e000      	b.n	8001cf8 <HAL_ADC_PollForConversion+0x138>
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_ADC_PollForConversion+0x1ac>)
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d008      	beq.n	8001d12 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	d104      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	e00c      	b.n	8001d36 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_ADC_PollForConversion+0x1a8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d002      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x16c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e000      	b.n	8001d2e <HAL_ADC_PollForConversion+0x16e>
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_ADC_PollForConversion+0x1ac>)
 8001d2e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d104      	bne.n	8001d46 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2208      	movs	r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e008      	b.n	8001d58 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d103      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	220c      	movs	r2, #12
 8001d56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	50040300 	.word	0x50040300
 8001d68:	50040100 	.word	0x50040100
 8001d6c:	50040000 	.word	0x50040000

08001d70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0b6      	sub	sp, #216	; 0xd8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x22>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e3c7      	b.n	800253e <HAL_ADC_ConfigChannel+0x7b2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fcc9 	bl	8001752 <LL_ADC_REG_IsConversionOngoing>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 83a8 	bne.w	8002518 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d824      	bhi.n	8001e1a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	3b02      	subs	r3, #2
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d81b      	bhi.n	8001e12 <HAL_ADC_ConfigChannel+0x86>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_ADC_ConfigChannel+0x54>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001df9 	.word	0x08001df9
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e09 	.word	0x08001e09
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	220c      	movs	r2, #12
 8001df4:	605a      	str	r2, [r3, #4]
          break;
 8001df6:	e011      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2212      	movs	r2, #18
 8001dfc:	605a      	str	r2, [r3, #4]
          break;
 8001dfe:	e00d      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2218      	movs	r2, #24
 8001e04:	605a      	str	r2, [r3, #4]
          break;
 8001e06:	e009      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	605a      	str	r2, [r3, #4]
          break;
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2206      	movs	r2, #6
 8001e16:	605a      	str	r2, [r3, #4]
          break;
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e1a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f7ff fb71 	bl	8001510 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fc8d 	bl	8001752 <LL_ADC_REG_IsConversionOngoing>
 8001e38:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fc99 	bl	8001778 <LL_ADC_INJ_IsConversionOngoing>
 8001e46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 81a6 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 81a1 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7ff fb7c 	bl	8001568 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d00a      	beq.n	8001ea8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6919      	ldr	r1, [r3, #16]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ea2:	f7ff facd 	bl	8001440 <LL_ADC_SetOffset>
 8001ea6:	e17b      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff faea 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x148>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fadf 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	f003 021f 	and.w	r2, r3, #31
 8001ed2:	e01e      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x186>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fad4 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e004      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x19e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	e018      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff faa3 	bl	80014b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fa87 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x20e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fa7c 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	0e9b      	lsrs	r3, r3, #26
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	e01e      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x24c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fa71 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001fb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e004      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x264>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	e018      	b.n	8002022 <HAL_ADC_ConfigChannel+0x296>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800200c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fa40 	bl	80014b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fa24 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x2d4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2102      	movs	r1, #2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fa19 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	0e9b      	lsrs	r3, r3, #26
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	e01e      	b.n	800209e <HAL_ADC_ConfigChannel+0x312>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2102      	movs	r1, #2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fa0e 	bl	8001488 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800207e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e004      	b.n	800209c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x32a>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	e016      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x358>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e004      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f9df 	bl	80014b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2103      	movs	r1, #3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f9c3 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x396>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2103      	movs	r1, #3
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f9b8 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	0e9b      	lsrs	r3, r3, #26
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	e017      	b.n	8002152 <HAL_ADC_ConfigChannel+0x3c6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2103      	movs	r1, #3
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f9ad 	bl	8001488 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800213a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800213e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e003      	b.n	8002150 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_ADC_ConfigChannel+0x3de>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0e9b      	lsrs	r3, r3, #26
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	e011      	b.n	800218e <HAL_ADC_ConfigChannel+0x402>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800217a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800217c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e003      	b.n	800218e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800218e:	429a      	cmp	r2, r3
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	2103      	movs	r1, #3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f98a 	bl	80014b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff faad 	bl	8001704 <LL_ADC_IsEnabled>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 813f 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7ff f9fe 	bl	80015c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a8e      	ldr	r2, [pc, #568]	; (8002404 <HAL_ADC_ConfigChannel+0x678>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	f040 8130 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x46c>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2b09      	cmp	r3, #9
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e019      	b.n	800222c <HAL_ADC_ConfigChannel+0x4a0>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800220a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2b09      	cmp	r3, #9
 8002224:	bf94      	ite	ls
 8002226:	2301      	movls	r3, #1
 8002228:	2300      	movhi	r3, #0
 800222a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800222c:	2b00      	cmp	r3, #0
 800222e:	d079      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x4c0>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	3301      	adds	r3, #1
 8002244:	069b      	lsls	r3, r3, #26
 8002246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224a:	e015      	b.n	8002278 <HAL_ADC_ConfigChannel+0x4ec>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800225a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	069b      	lsls	r3, r3, #26
 8002274:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x50c>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	e017      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x53c>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80022b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	ea42 0103 	orr.w	r1, r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x562>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	051b      	lsls	r3, r3, #20
 80022ec:	e018      	b.n	8002320 <HAL_ADC_ConfigChannel+0x594>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	430b      	orrs	r3, r1
 8002322:	e080      	b.n	8002426 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x5b4>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	069b      	lsls	r3, r3, #26
 800233a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233e:	e015      	b.n	800236c <HAL_ADC_ConfigChannel+0x5e0>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	069b      	lsls	r3, r3, #26
 8002368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_ADC_ConfigChannel+0x600>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	e017      	b.n	80023bc <HAL_ADC_ConfigChannel+0x630>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	61fb      	str	r3, [r7, #28]
  return result;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x65c>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	3301      	adds	r3, #1
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	3b1e      	subs	r3, #30
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023e6:	e01d      	b.n	8002424 <HAL_ADC_ConfigChannel+0x698>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	613b      	str	r3, [r7, #16]
  return result;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e005      	b.n	8002410 <HAL_ADC_ConfigChannel+0x684>
 8002404:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	3b1e      	subs	r3, #30
 800241e:	051b      	lsls	r3, r3, #20
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002424:	430b      	orrs	r3, r1
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	4619      	mov	r1, r3
 800242c:	f7ff f89c 	bl	8001568 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b44      	ldr	r3, [pc, #272]	; (8002548 <HAL_ADC_ConfigChannel+0x7bc>)
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d07a      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800243c:	4843      	ldr	r0, [pc, #268]	; (800254c <HAL_ADC_ConfigChannel+0x7c0>)
 800243e:	f7fe fff1 	bl	8001424 <LL_ADC_GetCommonPathInternalCh>
 8002442:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_ADC_ConfigChannel+0x7c4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d12c      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d126      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <HAL_ADC_ConfigChannel+0x7c8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x6e4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_ADC_ConfigChannel+0x7cc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d15d      	bne.n	800252c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002474:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002478:	4619      	mov	r1, r3
 800247a:	4834      	ldr	r0, [pc, #208]	; (800254c <HAL_ADC_ConfigChannel+0x7c0>)
 800247c:	f7fe ffbf 	bl	80013fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_ADC_ConfigChannel+0x7d0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	4a36      	ldr	r2, [pc, #216]	; (8002560 <HAL_ADC_ConfigChannel+0x7d4>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800249a:	e002      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3b01      	subs	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f9      	bne.n	800249c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a8:	e040      	b.n	800252c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <HAL_ADC_ConfigChannel+0x7d8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d118      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x75a>
 80024b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d112      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_ADC_ConfigChannel+0x7c8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x748>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_ADC_ConfigChannel+0x7cc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d12d      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024dc:	4619      	mov	r1, r3
 80024de:	481b      	ldr	r0, [pc, #108]	; (800254c <HAL_ADC_ConfigChannel+0x7c0>)
 80024e0:	f7fe ff8d 	bl	80013fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e4:	e024      	b.n	8002530 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_ADC_ConfigChannel+0x7dc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d120      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11a      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_ADC_ConfigChannel+0x7c8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d115      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800250e:	4619      	mov	r1, r3
 8002510:	480e      	ldr	r0, [pc, #56]	; (800254c <HAL_ADC_ConfigChannel+0x7c0>)
 8002512:	f7fe ff74 	bl	80013fe <LL_ADC_SetCommonPathInternalCh>
 8002516:	e00c      	b.n	8002532 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800252a:	e002      	b.n	8002532 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800252c:	bf00      	nop
 800252e:	e000      	b.n	8002532 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002530:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800253a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800253e:	4618      	mov	r0, r3
 8002540:	37d8      	adds	r7, #216	; 0xd8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	80080000 	.word	0x80080000
 800254c:	50040300 	.word	0x50040300
 8002550:	c7520000 	.word	0xc7520000
 8002554:	50040000 	.word	0x50040000
 8002558:	50040200 	.word	0x50040200
 800255c:	20000000 	.word	0x20000000
 8002560:	053e2d63 	.word	0x053e2d63
 8002564:	cb840000 	.word	0xcb840000
 8002568:	80000001 	.word	0x80000001

0800256c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f8c3 	bl	8001704 <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d14d      	bne.n	8002620 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	4b28      	ldr	r3, [pc, #160]	; (800262c <ADC_Enable+0xc0>)
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e039      	b.n	8002622 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f892 	bl	80016dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025b8:	f7fe ff02 	bl	80013c0 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025be:	e028      	b.n	8002612 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f89d 	bl	8001704 <LL_ADC_IsEnabled>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff f881 	bl	80016dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025da:	f7fe fef1 	bl	80013c0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d914      	bls.n	8002612 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d00d      	beq.n	8002612 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e007      	b.n	8002622 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d1cf      	bne.n	80025c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	8000003f 	.word	0x8000003f

08002630 <LL_ADC_IsEnabled>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <LL_ADC_IsEnabled+0x18>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_ADC_IsEnabled+0x1a>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_REG_IsConversionOngoing>:
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d101      	bne.n	800266e <LL_ADC_REG_IsConversionOngoing+0x18>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b09f      	sub	sp, #124	; 0x7c
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002696:	2302      	movs	r3, #2
 8002698:	e093      	b.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80026a2:	2300      	movs	r3, #0
 80026a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80026a6:	2300      	movs	r3, #0
 80026a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	e001      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e072      	b.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ffb9 	bl	8002656 <LL_ADC_REG_IsConversionOngoing>
 80026e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ffb3 	bl	8002656 <LL_ADC_REG_IsConversionOngoing>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d154      	bne.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d151      	bne.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026fc:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80026fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02c      	beq.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800271a:	035b      	lsls	r3, r3, #13
 800271c:	430b      	orrs	r3, r1
 800271e:	431a      	orrs	r2, r3
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002724:	4829      	ldr	r0, [pc, #164]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002726:	f7ff ff83 	bl	8002630 <LL_ADC_IsEnabled>
 800272a:	4604      	mov	r4, r0
 800272c:	4828      	ldr	r0, [pc, #160]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800272e:	f7ff ff7f 	bl	8002630 <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	431c      	orrs	r4, r3
 8002736:	4828      	ldr	r0, [pc, #160]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002738:	f7ff ff7a 	bl	8002630 <LL_ADC_IsEnabled>
 800273c:	4603      	mov	r3, r0
 800273e:	4323      	orrs	r3, r4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d137      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800274c:	f023 030f 	bic.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	6811      	ldr	r1, [r2, #0]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	6892      	ldr	r2, [r2, #8]
 8002758:	430a      	orrs	r2, r1
 800275a:	431a      	orrs	r2, r3
 800275c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002760:	e028      	b.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800276e:	4817      	ldr	r0, [pc, #92]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002770:	f7ff ff5e 	bl	8002630 <LL_ADC_IsEnabled>
 8002774:	4604      	mov	r4, r0
 8002776:	4816      	ldr	r0, [pc, #88]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002778:	f7ff ff5a 	bl	8002630 <LL_ADC_IsEnabled>
 800277c:	4603      	mov	r3, r0
 800277e:	431c      	orrs	r4, r3
 8002780:	4815      	ldr	r0, [pc, #84]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002782:	f7ff ff55 	bl	8002630 <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	4323      	orrs	r3, r4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d112      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800278e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800279c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800279e:	e009      	b.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80027b2:	e000      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	377c      	adds	r7, #124	; 0x7c
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	50040000 	.word	0x50040000
 80027d0:	50040100 	.word	0x50040100
 80027d4:	50040300 	.word	0x50040300
 80027d8:	50040200 	.word	0x50040200

080027dc <__NVIC_SetPriorityGrouping>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ff4c 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800295e:	f7ff ff61 	bl	8002824 <__NVIC_GetPriorityGrouping>
 8002962:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f7ff ffb1 	bl	80028d0 <NVIC_EncodePriority>
 800296e:	4602      	mov	r2, r0
 8002970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff80 	bl	800287c <__NVIC_SetPriority>
}
 800297c:	bf00      	nop
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff54 	bl	8002840 <__NVIC_EnableIRQ>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ae:	e17f      	b.n	8002cb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8171 	beq.w	8002caa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d00b      	beq.n	80029e8 <HAL_GPIO_Init+0x48>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029dc:	2b11      	cmp	r3, #17
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d130      	bne.n	8002a4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a1e:	2201      	movs	r2, #1
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0201 	and.w	r2, r3, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d118      	bne.n	8002a88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	f003 0201 	and.w	r2, r3, #1
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x128>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b12      	cmp	r3, #18
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	6939      	ldr	r1, [r7, #16]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80ac 	beq.w	8002caa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <HAL_GPIO_Init+0x330>)
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	4a5e      	ldr	r2, [pc, #376]	; (8002cd0 <HAL_GPIO_Init+0x330>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <HAL_GPIO_Init+0x330>)
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b6a:	4a5a      	ldr	r2, [pc, #360]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b94:	d025      	beq.n	8002be2 <HAL_GPIO_Init+0x242>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4f      	ldr	r2, [pc, #316]	; (8002cd8 <HAL_GPIO_Init+0x338>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <HAL_GPIO_Init+0x23e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	; (8002cdc <HAL_GPIO_Init+0x33c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x23a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4d      	ldr	r2, [pc, #308]	; (8002ce0 <HAL_GPIO_Init+0x340>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x236>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <HAL_GPIO_Init+0x344>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x232>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_GPIO_Init+0x348>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x22e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4a      	ldr	r2, [pc, #296]	; (8002cec <HAL_GPIO_Init+0x34c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x22a>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e00c      	b.n	8002be4 <HAL_GPIO_Init+0x244>
 8002bca:	2307      	movs	r3, #7
 8002bcc:	e00a      	b.n	8002be4 <HAL_GPIO_Init+0x244>
 8002bce:	2305      	movs	r3, #5
 8002bd0:	e008      	b.n	8002be4 <HAL_GPIO_Init+0x244>
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	e006      	b.n	8002be4 <HAL_GPIO_Init+0x244>
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e004      	b.n	8002be4 <HAL_GPIO_Init+0x244>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e002      	b.n	8002be4 <HAL_GPIO_Init+0x244>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_GPIO_Init+0x244>
 8002be2:	2300      	movs	r3, #0
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	f002 0203 	and.w	r2, r2, #3
 8002bea:	0092      	lsls	r2, r2, #2
 8002bec:	4093      	lsls	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bf4:	4937      	ldr	r1, [pc, #220]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	089b      	lsrs	r3, r3, #2
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c26:	4a32      	ldr	r2, [pc, #200]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ca4:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3301      	adds	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f47f ae78 	bne.w	80029b0 <HAL_GPIO_Init+0x10>
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	48000400 	.word	0x48000400
 8002cdc:	48000800 	.word	0x48000800
 8002ce0:	48000c00 	.word	0x48000c00
 8002ce4:	48001000 	.word	0x48001000
 8002ce8:	48001400 	.word	0x48001400
 8002cec:	48001800 	.word	0x48001800
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
 8002d00:	4613      	mov	r3, r2
 8002d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d04:	787b      	ldrb	r3, [r7, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40007000 	.word	0x40007000

08002d40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4e:	d130      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d50:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5c:	d038      	beq.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2232      	movs	r2, #50	; 0x32
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	3301      	adds	r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d84:	e002      	b.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d98:	d102      	bne.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f2      	bne.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d110      	bne.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e00f      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d007      	beq.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dc8:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40007000 	.word	0x40007000
 8002de4:	20000000 	.word	0x20000000
 8002de8:	431bde83 	.word	0x431bde83

08002dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e3d4      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	4ba1      	ldr	r3, [pc, #644]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e08:	4b9e      	ldr	r3, [pc, #632]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80e4 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4a>
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b0c      	cmp	r3, #12
 8002e2a:	f040 808b 	bne.w	8002f44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	f040 8087 	bne.w	8002f44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e36:	4b93      	ldr	r3, [pc, #588]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e3ac      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	4b8c      	ldr	r3, [pc, #560]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_RCC_OscConfig+0x7c>
 8002e5e:	4b89      	ldr	r3, [pc, #548]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e66:	e005      	b.n	8002e74 <HAL_RCC_OscConfig+0x88>
 8002e68:	4b86      	ldr	r3, [pc, #536]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d223      	bcs.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fd5d 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e38d      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8c:	4b7d      	ldr	r3, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a7c      	ldr	r2, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e92:	f043 0308 	orr.w	r3, r3, #8
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4977      	ldr	r1, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4972      	ldr	r1, [pc, #456]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
 8002ebe:	e025      	b.n	8002f0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec0:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6f      	ldr	r2, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	496a      	ldr	r1, [pc, #424]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ede:	4b69      	ldr	r3, [pc, #420]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	4965      	ldr	r1, [pc, #404]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fd1d 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e34d      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f0c:	f000 fc36 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	495a      	ldr	r1, [pc, #360]	; (8003088 <HAL_RCC_OscConfig+0x29c>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_OscConfig+0x2a0>)
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f2c:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_RCC_OscConfig+0x2a4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe f8f3 	bl	800111c <HAL_InitTick>
 8002f36:	4603      	mov	r3, r0
 8002f38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d052      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	e331      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d032      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a4c      	ldr	r2, [pc, #304]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f58:	f7fe fa32 	bl	80013c0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f60:	f7fe fa2e 	bl	80013c0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e31a      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f72:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f7e:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	493b      	ldr	r1, [pc, #236]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	4936      	ldr	r1, [pc, #216]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
 8002fb0:	e01a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a33      	ldr	r2, [pc, #204]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe f9ff 	bl	80013c0 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc6:	f7fe f9fb 	bl	80013c0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e2e7      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x1da>
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fe6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d074      	beq.n	80030de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x21a>
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d10e      	bne.n	800301e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d10b      	bne.n	800301e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d064      	beq.n	80030dc <HAL_RCC_OscConfig+0x2f0>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d160      	bne.n	80030dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e2c4      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x24a>
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a15      	ldr	r2, [pc, #84]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	e01d      	b.n	8003072 <HAL_RCC_OscConfig+0x286>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x26e>
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8003046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0x286>
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x298>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe f9a1 	bl	80013c0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003080:	e011      	b.n	80030a6 <HAL_RCC_OscConfig+0x2ba>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	08008660 	.word	0x08008660
 800308c:	20000000 	.word	0x20000000
 8003090:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe f994 	bl	80013c0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e280      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a6:	4baf      	ldr	r3, [pc, #700]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x2a8>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f984 	bl	80013c0 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030bc:	f7fe f980 	bl	80013c0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	; 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e26c      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ce:	4ba5      	ldr	r3, [pc, #660]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x2d0>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d060      	beq.n	80031ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x310>
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d119      	bne.n	800312a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d116      	bne.n	800312a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030fc:	4b99      	ldr	r3, [pc, #612]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x328>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e249      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b93      	ldr	r3, [pc, #588]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	4990      	ldr	r1, [pc, #576]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003128:	e040      	b.n	80031ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d023      	beq.n	800317a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003132:	4b8c      	ldr	r3, [pc, #560]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a8b      	ldr	r2, [pc, #556]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe f93f 	bl	80013c0 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe f93b 	bl	80013c0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e227      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003158:	4b82      	ldr	r3, [pc, #520]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b7f      	ldr	r3, [pc, #508]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	497c      	ldr	r1, [pc, #496]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
 8003178:	e018      	b.n	80031ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b7a      	ldr	r3, [pc, #488]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a79      	ldr	r2, [pc, #484]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe f91b 	bl	80013c0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318e:	f7fe f917 	bl	80013c0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e203      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a0:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d03c      	beq.n	8003232 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01c      	beq.n	80031fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c6:	4a67      	ldr	r2, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fe f8f6 	bl	80013c0 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d8:	f7fe f8f2 	bl	80013c0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1de      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ea:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80031ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ef      	beq.n	80031d8 <HAL_RCC_OscConfig+0x3ec>
 80031f8:	e01b      	b.n	8003232 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fa:	4b5a      	ldr	r3, [pc, #360]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80031fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003200:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320a:	f7fe f8d9 	bl	80013c0 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003212:	f7fe f8d5 	bl	80013c0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1c1      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003224:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ef      	bne.n	8003212 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80a6 	beq.w	800338c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003240:	2300      	movs	r3, #0
 8003242:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003244:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10d      	bne.n	800326c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003250:	4b44      	ldr	r3, [pc, #272]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	4a43      	ldr	r2, [pc, #268]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	; 0x58
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003268:	2301      	movs	r3, #1
 800326a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326c:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_RCC_OscConfig+0x57c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d118      	bne.n	80032aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003278:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x57c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <HAL_RCC_OscConfig+0x57c>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003284:	f7fe f89c 	bl	80013c0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fe f898 	bl	80013c0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e184      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_RCC_OscConfig+0x57c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4d8>
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c2:	e024      	b.n	800330e <HAL_RCC_OscConfig+0x522>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d110      	bne.n	80032ee <HAL_RCC_OscConfig+0x502>
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a20      	ldr	r2, [pc, #128]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ec:	e00f      	b.n	800330e <HAL_RCC_OscConfig+0x522>
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	4a17      	ldr	r2, [pc, #92]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003306:	f023 0304 	bic.w	r3, r3, #4
 800330a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d016      	beq.n	8003344 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7fe f853 	bl	80013c0 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe f84f 	bl	80013c0 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e139      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_OscConfig+0x578>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ed      	beq.n	800331e <HAL_RCC_OscConfig+0x532>
 8003342:	e01a      	b.n	800337a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe f83c 	bl	80013c0 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800334a:	e00f      	b.n	800336c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe f838 	bl	80013c0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d906      	bls.n	800336c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e122      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800336c:	4b90      	ldr	r3, [pc, #576]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e8      	bne.n	800334c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337a:	7ffb      	ldrb	r3, [r7, #31]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b8b      	ldr	r3, [pc, #556]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	4a8a      	ldr	r2, [pc, #552]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8108 	beq.w	80035a6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	2b02      	cmp	r3, #2
 800339c:	f040 80d0 	bne.w	8003540 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033a0:	4b83      	ldr	r3, [pc, #524]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d130      	bne.n	8003416 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	3b01      	subs	r3, #1
 80033c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d127      	bne.n	8003416 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d11f      	bne.n	8003416 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e0:	2a07      	cmp	r2, #7
 80033e2:	bf14      	ite	ne
 80033e4:	2201      	movne	r2, #1
 80033e6:	2200      	moveq	r2, #0
 80033e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d113      	bne.n	8003416 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	085b      	lsrs	r3, r3, #1
 80033fa:	3b01      	subs	r3, #1
 80033fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d109      	bne.n	8003416 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d06e      	beq.n	80034f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d069      	beq.n	80034f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800341c:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003428:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b7      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003438:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a5c      	ldr	r2, [pc, #368]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800343e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003444:	f7fd ffbc 	bl	80013c0 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd ffb8 	bl	80013c0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0a4      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346a:	4b51      	ldr	r3, [pc, #324]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_RCC_OscConfig+0x7c8>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800347a:	3a01      	subs	r2, #1
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003484:	0212      	lsls	r2, r2, #8
 8003486:	4311      	orrs	r1, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800348c:	0852      	lsrs	r2, r2, #1
 800348e:	3a01      	subs	r2, #1
 8003490:	0552      	lsls	r2, r2, #21
 8003492:	4311      	orrs	r1, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003498:	0852      	lsrs	r2, r2, #1
 800349a:	3a01      	subs	r2, #1
 800349c:	0652      	lsls	r2, r2, #25
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034a4:	0912      	lsrs	r2, r2, #4
 80034a6:	0452      	lsls	r2, r2, #17
 80034a8:	430a      	orrs	r2, r1
 80034aa:	4941      	ldr	r1, [pc, #260]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3e      	ldr	r2, [pc, #248]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034bc:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034c8:	f7fd ff7a 	bl	80013c0 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fd ff76 	bl	80013c0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e062      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ee:	e05a      	b.n	80035a6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e059      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f4:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d152      	bne.n	80035a6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003516:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003518:	f7fd ff52 	bl	80013c0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd ff4e 	bl	80013c0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e03a      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x734>
 800353e:	e032      	b.n	80035a6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d02d      	beq.n	80035a2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800354c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003550:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003570:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fd ff21 	bl	80013c0 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003582:	f7fd ff1d 	bl	80013c0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e009      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_OscConfig+0x7c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x796>
 80035a0:	e001      	b.n	80035a6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	f99d808c 	.word	0xf99d808c

080035b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0c8      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b63      	ldr	r3, [pc, #396]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 0207 	bic.w	r2, r3, #7
 80035e2:	4961      	ldr	r1, [pc, #388]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b5f      	ldr	r3, [pc, #380]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b0      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d04c      	beq.n	80036a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d107      	bne.n	8003620 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003610:	4b56      	ldr	r3, [pc, #344]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d121      	bne.n	8003660 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e09e      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d107      	bne.n	8003638 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d115      	bne.n	8003660 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e092      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003640:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e086      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003650:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e07e      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003660:	4b42      	ldr	r3, [pc, #264]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 0203 	bic.w	r2, r3, #3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	493f      	ldr	r1, [pc, #252]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fd fea5 	bl	80013c0 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003678:	e00a      	b.n	8003690 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367a:	f7fd fea1 	bl	80013c0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e066      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 020c 	and.w	r2, r3, #12
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	429a      	cmp	r2, r3
 80036a0:	d1eb      	bne.n	800367a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ae:	4b2f      	ldr	r3, [pc, #188]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	492c      	ldr	r1, [pc, #176]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b29      	ldr	r3, [pc, #164]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d210      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0207 	bic.w	r2, r3, #7
 80036d6:	4924      	ldr	r1, [pc, #144]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCC_ClockConfig+0x1b0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e036      	b.n	800375e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4918      	ldr	r1, [pc, #96]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4910      	ldr	r1, [pc, #64]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800372e:	f000 f825 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <HAL_RCC_ClockConfig+0x1b4>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490c      	ldr	r1, [pc, #48]	; (8003770 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fce2 	bl	800111c <HAL_InitTick>
 8003758:	4603      	mov	r3, r0
 800375a:	72fb      	strb	r3, [r7, #11]

  return status;
 800375c:	7afb      	ldrb	r3, [r7, #11]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40022000 	.word	0x40022000
 800376c:	40021000 	.word	0x40021000
 8003770:	08008660 	.word	0x08008660
 8003774:	20000000 	.word	0x20000000
 8003778:	20000004 	.word	0x20000004

0800377c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378a:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003794:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x34>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d121      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d11e      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037b0:	4b34      	ldr	r3, [pc, #208]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e005      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037cc:	4b2d      	ldr	r3, [pc, #180]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037d8:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_RCC_GetSysClockFreq+0x110>)
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e004      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_RCC_GetSysClockFreq+0x114>)
 8003802:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d134      	bne.n	8003874 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0xa6>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d003      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0xac>
 8003820:	e005      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_GetSysClockFreq+0x110>)
 8003824:	617b      	str	r3, [r7, #20]
      break;
 8003826:	e005      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCC_GetSysClockFreq+0x114>)
 800382a:	617b      	str	r3, [r7, #20]
      break;
 800382c:	e002      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	617b      	str	r3, [r7, #20]
      break;
 8003832:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	3301      	adds	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	fb02 f203 	mul.w	r2, r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	0e5b      	lsrs	r3, r3, #25
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	3301      	adds	r3, #1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003874:	69bb      	ldr	r3, [r7, #24]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	08008678 	.word	0x08008678
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0adb      	lsrs	r3, r3, #11
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08008670 	.word	0x08008670

080038d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	220f      	movs	r2, #15
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80038e8:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_RCC_GetClockConfig+0x60>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0207 	and.w	r2, r3, #7
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	40022000 	.word	0x40022000

0800393c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003954:	f7ff f9e6 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003958:	6178      	str	r0, [r7, #20]
 800395a:	e014      	b.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003974:	f7ff f9d6 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d10b      	bne.n	80039a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d919      	bls.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2ba0      	cmp	r3, #160	; 0xa0
 8003998:	d902      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800399a:	2302      	movs	r3, #2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e013      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a0:	2301      	movs	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	e010      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d902      	bls.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039ac:	2303      	movs	r3, #3
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e00a      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d102      	bne.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b8:	2302      	movs	r3, #2
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e004      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d101      	bne.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039c4:	2301      	movs	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 0207 	bic.w	r2, r3, #7
 80039d0:	4909      	ldr	r1, [pc, #36]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a04:	2300      	movs	r3, #0
 8003a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a08:	2300      	movs	r3, #0
 8003a0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d041      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a26:	d824      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a32:	d81e      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a40:	4b86      	ldr	r3, [pc, #536]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a85      	ldr	r2, [pc, #532]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a4c:	e015      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fabb 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3320      	adds	r3, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fba6 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	74fb      	strb	r3, [r7, #19]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8e:	4973      	ldr	r1, [pc, #460]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d041      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab0:	d02a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab6:	d824      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac2:	d81e      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003acc:	d010      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ad0:	4b62      	ldr	r3, [pc, #392]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a61      	ldr	r2, [pc, #388]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003adc:	e015      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa73 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aee:	e00c      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3320      	adds	r3, #32
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fb5e 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	74fb      	strb	r3, [r7, #19]
      break;
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b10:	4b52      	ldr	r3, [pc, #328]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1e:	494f      	ldr	r1, [pc, #316]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b26:	e001      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a0 	beq.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3a      	ldr	r2, [pc, #232]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fc20 	bl	80013c0 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b82:	e009      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fd fc1c 	bl	80013c0 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	74fb      	strb	r3, [r7, #19]
        break;
 8003b96:	e005      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d15c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01f      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d019      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd fbdb 	bl	80013c0 <HAL_GetTick>
 8003c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd fbd7 	bl	80013c0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d902      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	74fb      	strb	r3, [r7, #19]
            break;
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ec      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c52:	e009      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	74bb      	strb	r3, [r7, #18]
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c68:	7c7b      	ldrb	r3, [r7, #17]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b9e      	ldr	r3, [pc, #632]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	4a9d      	ldr	r2, [pc, #628]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c86:	4b98      	ldr	r3, [pc, #608]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 0203 	bic.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	4994      	ldr	r1, [pc, #592]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca8:	4b8f      	ldr	r3, [pc, #572]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 020c 	bic.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	498c      	ldr	r1, [pc, #560]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cca:	4b87      	ldr	r3, [pc, #540]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4983      	ldr	r1, [pc, #524]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cec:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	497b      	ldr	r1, [pc, #492]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	4972      	ldr	r1, [pc, #456]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d30:	4b6d      	ldr	r3, [pc, #436]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	496a      	ldr	r1, [pc, #424]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	4961      	ldr	r1, [pc, #388]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d74:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	4959      	ldr	r1, [pc, #356]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d96:	4b54      	ldr	r3, [pc, #336]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	4950      	ldr	r1, [pc, #320]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	4948      	ldr	r1, [pc, #288]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dda:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	493f      	ldr	r1, [pc, #252]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0a:	4937      	ldr	r1, [pc, #220]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e26:	60d3      	str	r3, [r2, #12]
 8003e28:	e011      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f8c8 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d028      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e84:	60d3      	str	r3, [r2, #12]
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2101      	movs	r1, #1
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f899 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	4908      	ldr	r1, [pc, #32]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed6:	d109      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a02      	ldr	r2, [pc, #8]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee2:	60d3      	str	r3, [r2, #12]
 8003ee4:	e014      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f867 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2a:	4928      	ldr	r1, [pc, #160]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3a:	d10d      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2102      	movs	r1, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f844 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	74bb      	strb	r3, [r7, #18]
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3320      	adds	r3, #32
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f925 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f96:	490d      	ldr	r1, [pc, #52]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fba:	4904      	ldr	r1, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fde:	4b75      	ldr	r3, [pc, #468]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d018      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0203 	and.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d10d      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004002:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
       ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d047      	beq.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e044      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d018      	beq.n	8004056 <RCCEx_PLLSAI1_Config+0x86>
 8004024:	2b03      	cmp	r3, #3
 8004026:	d825      	bhi.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <RCCEx_PLLSAI1_Config+0x62>
 800402c:	2b02      	cmp	r3, #2
 800402e:	d009      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x74>
 8004030:	e020      	b.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004032:	4b60      	ldr	r3, [pc, #384]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11d      	bne.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e01a      	b.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004044:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d116      	bne.n	800407e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004054:	e013      	b.n	800407e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004056:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004062:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004072:	e006      	b.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e004      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004082:	bf00      	nop
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	430b      	orrs	r3, r1
 80040a0:	4944      	ldr	r1, [pc, #272]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d17d      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a40      	ldr	r2, [pc, #256]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fd f982 	bl	80013c0 <HAL_GetTick>
 80040bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040be:	e009      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c0:	f7fd f97e 	bl	80013c0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d902      	bls.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	73fb      	strb	r3, [r7, #15]
        break;
 80040d2:	e005      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ef      	bne.n	80040c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d160      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d111      	bne.n	8004110 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ec:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	0211      	lsls	r1, r2, #8
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	0912      	lsrs	r2, r2, #4
 8004104:	0452      	lsls	r2, r2, #17
 8004106:	430a      	orrs	r2, r1
 8004108:	492a      	ldr	r1, [pc, #168]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	610b      	str	r3, [r1, #16]
 800410e:	e027      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d112      	bne.n	800413c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800411e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6892      	ldr	r2, [r2, #8]
 8004126:	0211      	lsls	r1, r2, #8
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6912      	ldr	r2, [r2, #16]
 800412c:	0852      	lsrs	r2, r2, #1
 800412e:	3a01      	subs	r2, #1
 8004130:	0552      	lsls	r2, r2, #21
 8004132:	430a      	orrs	r2, r1
 8004134:	491f      	ldr	r1, [pc, #124]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]
 800413a:	e011      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004144:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6892      	ldr	r2, [r2, #8]
 800414c:	0211      	lsls	r1, r2, #8
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6952      	ldr	r2, [r2, #20]
 8004152:	0852      	lsrs	r2, r2, #1
 8004154:	3a01      	subs	r2, #1
 8004156:	0652      	lsls	r2, r2, #25
 8004158:	430a      	orrs	r2, r1
 800415a:	4916      	ldr	r1, [pc, #88]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fd f928 	bl	80013c0 <HAL_GetTick>
 8004170:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004172:	e009      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004174:	f7fd f924 	bl	80013c0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d902      	bls.n	8004188 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	73fb      	strb	r3, [r7, #15]
          break;
 8004186:	e005      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ef      	beq.n	8004174 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	4904      	ldr	r1, [pc, #16]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000

080041b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0203 	and.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10d      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
       ||
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041ea:	4b61      	ldr	r3, [pc, #388]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
       ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d047      	beq.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
 8004202:	e044      	b.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d018      	beq.n	800423e <RCCEx_PLLSAI2_Config+0x86>
 800420c:	2b03      	cmp	r3, #3
 800420e:	d825      	bhi.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
 8004210:	2b01      	cmp	r3, #1
 8004212:	d002      	beq.n	800421a <RCCEx_PLLSAI2_Config+0x62>
 8004214:	2b02      	cmp	r3, #2
 8004216:	d009      	beq.n	800422c <RCCEx_PLLSAI2_Config+0x74>
 8004218:	e020      	b.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800421a:	4b55      	ldr	r3, [pc, #340]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d11d      	bne.n	8004262 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422a:	e01a      	b.n	8004262 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800422c:	4b50      	ldr	r3, [pc, #320]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d116      	bne.n	8004266 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e013      	b.n	8004266 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800423e:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800424a:	4b49      	ldr	r3, [pc, #292]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800425a:	e006      	b.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e004      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800426a:	bf00      	nop
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004272:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	430b      	orrs	r3, r1
 8004288:	4939      	ldr	r1, [pc, #228]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d167      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a35      	ldr	r2, [pc, #212]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a0:	f7fd f88e 	bl	80013c0 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042a6:	e009      	b.n	80042bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a8:	f7fd f88a 	bl	80013c0 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ba:	e005      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042bc:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ef      	bne.n	80042a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d14a      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d111      	bne.n	80042f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6892      	ldr	r2, [r2, #8]
 80042e4:	0211      	lsls	r1, r2, #8
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	0912      	lsrs	r2, r2, #4
 80042ec:	0452      	lsls	r2, r2, #17
 80042ee:	430a      	orrs	r2, r1
 80042f0:	491f      	ldr	r1, [pc, #124]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	614b      	str	r3, [r1, #20]
 80042f6:	e011      	b.n	800431c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042f8:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6892      	ldr	r2, [r2, #8]
 8004308:	0211      	lsls	r1, r2, #8
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6912      	ldr	r2, [r2, #16]
 800430e:	0852      	lsrs	r2, r2, #1
 8004310:	3a01      	subs	r2, #1
 8004312:	0652      	lsls	r2, r2, #25
 8004314:	430a      	orrs	r2, r1
 8004316:	4916      	ldr	r1, [pc, #88]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a13      	ldr	r2, [pc, #76]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fd f84a 	bl	80013c0 <HAL_GetTick>
 800432c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800432e:	e009      	b.n	8004344 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004330:	f7fd f846 	bl	80013c0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d902      	bls.n	8004344 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	73fb      	strb	r3, [r7, #15]
          break;
 8004342:	e005      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ef      	beq.n	8004330 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4904      	ldr	r1, [pc, #16]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e049      	b.n	800441a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fc fe98 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 fab4 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d001      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e04f      	b.n	80044dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d018      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_TIM_Base_Start_IT+0xc8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d115      	bne.n	80044c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_TIM_Base_Start_IT+0xdc>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d015      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0xb4>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d011      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	e008      	b.n	80044d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e000      	b.n	80044da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	00010007 	.word	0x00010007

08004504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d122      	bne.n	8004560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d11b      	bne.n	8004560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0202 	mvn.w	r2, #2
 8004530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9cb 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 800454c:	e005      	b.n	800455a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9bd 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f9ce 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b04      	cmp	r3, #4
 800456c:	d122      	bne.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d11b      	bne.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0204 	mvn.w	r2, #4
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9a1 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f993 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f9a4 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d122      	bne.n	8004608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d11b      	bne.n	8004608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0208 	mvn.w	r2, #8
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2204      	movs	r2, #4
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f977 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f969 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f97a 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b10      	cmp	r3, #16
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0210 	mvn.w	r2, #16
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2208      	movs	r2, #8
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f94d 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f93f 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f950 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0201 	mvn.w	r2, #1
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fc7c 	bl	8000f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fafc 	bl	8004cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 faef 	bl	8004cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8fe 	bl	800490a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d10e      	bne.n	800473a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b20      	cmp	r3, #32
 8004728:	d107      	bne.n	800473a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0220 	mvn.w	r2, #32
 8004732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 faaf 	bl	8004c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_TIM_ConfigClockSource+0x18>
 8004756:	2302      	movs	r3, #2
 8004758:	e0b5      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x184>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004778:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004784:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004796:	d03e      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xd4>
 8004798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479c:	f200 8087 	bhi.w	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	f000 8085 	beq.w	80048b2 <HAL_TIM_ConfigClockSource+0x170>
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d87f      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047ae:	2b70      	cmp	r3, #112	; 0x70
 80047b0:	d01a      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0xa6>
 80047b2:	2b70      	cmp	r3, #112	; 0x70
 80047b4:	d87b      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047b6:	2b60      	cmp	r3, #96	; 0x60
 80047b8:	d050      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x11a>
 80047ba:	2b60      	cmp	r3, #96	; 0x60
 80047bc:	d877      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047be:	2b50      	cmp	r3, #80	; 0x50
 80047c0:	d03c      	beq.n	800483c <HAL_TIM_ConfigClockSource+0xfa>
 80047c2:	2b50      	cmp	r3, #80	; 0x50
 80047c4:	d873      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d058      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x13a>
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d86f      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047ce:	2b30      	cmp	r3, #48	; 0x30
 80047d0:	d064      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x15a>
 80047d2:	2b30      	cmp	r3, #48	; 0x30
 80047d4:	d86b      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d060      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x15a>
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d867      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d05c      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x15a>
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d05a      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047e6:	e062      	b.n	80048ae <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6899      	ldr	r1, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f000 f9a6 	bl	8004b48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800480a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]
      break;
 8004814:	e04e      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f000 f98f 	bl	8004b48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004838:	609a      	str	r2, [r3, #8]
      break;
 800483a:	e03b      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	461a      	mov	r2, r3
 800484a:	f000 f903 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2150      	movs	r1, #80	; 0x50
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f95c 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800485a:	e02b      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	461a      	mov	r2, r3
 800486a:	f000 f922 	bl	8004ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2160      	movs	r1, #96	; 0x60
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f94c 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800487a:	e01b      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	461a      	mov	r2, r3
 800488a:	f000 f8e3 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2140      	movs	r1, #64	; 0x40
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f93c 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800489a:	e00b      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 f933 	bl	8004b12 <TIM_ITRx_SetConfig>
        break;
 80048ac:	e002      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80048b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <TIM_Base_SetConfig+0x114>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d00f      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3d      	ldr	r2, [pc, #244]	; (8004a38 <TIM_Base_SetConfig+0x118>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3c      	ldr	r2, [pc, #240]	; (8004a3c <TIM_Base_SetConfig+0x11c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3b      	ldr	r2, [pc, #236]	; (8004a40 <TIM_Base_SetConfig+0x120>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3a      	ldr	r2, [pc, #232]	; (8004a44 <TIM_Base_SetConfig+0x124>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d108      	bne.n	8004972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <TIM_Base_SetConfig+0x114>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01f      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d01b      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <TIM_Base_SetConfig+0x118>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d017      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <TIM_Base_SetConfig+0x11c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <TIM_Base_SetConfig+0x120>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00f      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <TIM_Base_SetConfig+0x124>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a28      	ldr	r2, [pc, #160]	; (8004a48 <TIM_Base_SetConfig+0x128>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <TIM_Base_SetConfig+0x12c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a26      	ldr	r2, [pc, #152]	; (8004a50 <TIM_Base_SetConfig+0x130>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <TIM_Base_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00f      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <TIM_Base_SetConfig+0x124>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <TIM_Base_SetConfig+0x128>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <TIM_Base_SetConfig+0x12c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <TIM_Base_SetConfig+0x130>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800

08004a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 030a 	bic.w	r3, r3, #10
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b087      	sub	sp, #28
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0210 	bic.w	r2, r3, #16
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f043 0307 	orr.w	r3, r3, #7
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e068      	b.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2e      	ldr	r2, [pc, #184]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d108      	bne.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c12:	d018      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10c      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40000800 	.word	0x40000800
 8004c90:	40000c00 	.word	0x40000c00
 8004c94:	40014000 	.word	0x40014000

08004c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b08b      	sub	sp, #44	; 0x2c
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	613b      	str	r3, [r7, #16]
  return result;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	e003      	b.n	8004d06 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	2103      	movs	r1, #3
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	401a      	ands	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	e003      	b.n	8004d34 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	372c      	adds	r7, #44	; 0x2c
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	401a      	ands	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	605a      	str	r2, [r3, #4]
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b08b      	sub	sp, #44	; 0x2c
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fa93 f3a3 	rbit	r3, r3
 8004d98:	613b      	str	r3, [r7, #16]
  return result;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004da4:	2320      	movs	r3, #32
 8004da6:	e003      	b.n	8004db0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	2103      	movs	r1, #3
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	61fb      	str	r3, [r7, #28]
  return result;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e003      	b.n	8004dde <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	fab3 f383 	clz	r3, r3
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004dec:	bf00      	nop
 8004dee:	372c      	adds	r7, #44	; 0x2c
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b08b      	sub	sp, #44	; 0x2c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	613b      	str	r3, [r7, #16]
  return result;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004e1e:	2320      	movs	r3, #32
 8004e20:	e003      	b.n	8004e2a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	fab3 f383 	clz	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	2103      	movs	r1, #3
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	401a      	ands	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	61fb      	str	r3, [r7, #28]
  return result;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	e003      	b.n	8004e58 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	60da      	str	r2, [r3, #12]
}
 8004e66:	bf00      	nop
 8004e68:	372c      	adds	r7, #44	; 0x2c
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b08b      	sub	sp, #44	; 0x2c
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	fa93 f3a3 	rbit	r3, r3
 8004e8c:	613b      	str	r3, [r7, #16]
  return result;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004e98:	2320      	movs	r3, #32
 8004e9a:	e003      	b.n	8004ea4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	fab3 f383 	clz	r3, r3
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	210f      	movs	r1, #15
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	fa93 f3a3 	rbit	r3, r3
 8004eba:	61fb      	str	r3, [r7, #28]
  return result;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	e003      	b.n	8004ed2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	fab3 f383 	clz	r3, r3
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004ee0:	bf00      	nop
 8004ee2:	372c      	adds	r7, #44	; 0x2c
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b08b      	sub	sp, #44	; 0x2c
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	613b      	str	r3, [r7, #16]
  return result;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004f14:	2320      	movs	r3, #32
 8004f16:	e003      	b.n	8004f20 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	210f      	movs	r1, #15
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	61fb      	str	r3, [r7, #28]
  return result;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004f44:	2320      	movs	r3, #32
 8004f46:	e003      	b.n	8004f50 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004f5e:	bf00      	nop
 8004f60:	372c      	adds	r7, #44	; 0x2c
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b088      	sub	sp, #32
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	fa93 f3a3 	rbit	r3, r3
 8004f80:	60fb      	str	r3, [r7, #12]
  return result;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <LL_GPIO_Init+0x26>
    return 32U;
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	e003      	b.n	8004f98 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004f9a:	e048      	b.n	800502e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d03a      	beq.n	8005028 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d003      	beq.n	8004fc2 <LL_GPIO_Init+0x58>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d10e      	bne.n	8004fe0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fed7 	bl	8004d7e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff feb7 	bl	8004d4e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	69b9      	ldr	r1, [r7, #24]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff05 	bl	8004df8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d111      	bne.n	800501a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2bff      	cmp	r3, #255	; 0xff
 8004ffa:	d807      	bhi.n	800500c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	461a      	mov	r2, r3
 8005002:	69b9      	ldr	r1, [r7, #24]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff34 	bl	8004e72 <LL_GPIO_SetAFPin_0_7>
 800500a:	e006      	b.n	800501a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	461a      	mov	r2, r3
 8005012:	69b9      	ldr	r1, [r7, #24]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff69 	bl	8004eec <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	461a      	mov	r2, r3
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fe56 	bl	8004cd4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1af      	bne.n	8004f9c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800504c:	4b07      	ldr	r3, [pc, #28]	; (800506c <LL_RCC_HSI_IsReady+0x24>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005058:	d101      	bne.n	800505e <LL_RCC_HSI_IsReady+0x16>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <LL_RCC_HSI_IsReady+0x18>
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005074:	4b07      	ldr	r3, [pc, #28]	; (8005094 <LL_RCC_LSE_IsReady+0x24>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d101      	bne.n	8005086 <LL_RCC_LSE_IsReady+0x16>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <LL_RCC_LSE_IsReady+0x18>
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000

08005098 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d101      	bne.n	80050ac <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40021000 	.word	0x40021000

080050bc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80050c0:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <LL_RCC_MSI_GetRange+0x18>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40021000 	.word	0x40021000

080050d8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	40021000 	.word	0x40021000

080050f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <LL_RCC_GetSysClkSource+0x18>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030c 	and.w	r3, r3, #12
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000

08005110 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <LL_RCC_GetAHBPrescaler+0x18>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000

0800512c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40021000 	.word	0x40021000

08005148 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <LL_RCC_GetAPB2Prescaler+0x18>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000

08005164 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <LL_RCC_GetUSARTClockSource+0x24>)
 800516e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	401a      	ands	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	4313      	orrs	r3, r2
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40021000 	.word	0x40021000

0800518c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <LL_RCC_GetUARTClockSource+0x24>)
 8005196:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	401a      	ands	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	4313      	orrs	r3, r2
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40021000 	.word	0x40021000

080051b4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <LL_RCC_PLL_GetMainSource+0x18>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0303 	and.w	r3, r3, #3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000

080051d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <LL_RCC_PLL_GetN+0x18>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80051de:	4618      	mov	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40021000 	.word	0x40021000

080051ec <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <LL_RCC_PLL_GetR+0x18>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000

08005208 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <LL_RCC_PLL_GetDivider+0x18>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000

08005224 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d137      	bne.n	80052a6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ff94 	bl	8005164 <LL_RCC_GetUSARTClockSource>
 800523c:	4603      	mov	r3, r0
 800523e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005242:	2b03      	cmp	r3, #3
 8005244:	f200 80b3 	bhi.w	80053ae <LL_RCC_GetUSARTClockFreq+0x18a>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	0800528f 	.word	0x0800528f
 8005254:	08005261 	.word	0x08005261
 8005258:	08005269 	.word	0x08005269
 800525c:	0800527b 	.word	0x0800527b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005260:	f000 f95c 	bl	800551c <RCC_GetSystemClockFreq>
 8005264:	60f8      	str	r0, [r7, #12]
        break;
 8005266:	e0b5      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005268:	f7ff feee 	bl	8005048 <LL_RCC_HSI_IsReady>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 809f 	beq.w	80053b2 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005274:	4b5a      	ldr	r3, [pc, #360]	; (80053e0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005276:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005278:	e09b      	b.n	80053b2 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800527a:	f7ff fef9 	bl	8005070 <LL_RCC_LSE_IsReady>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8098 	beq.w	80053b6 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8005286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800528c:	e093      	b.n	80053b6 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800528e:	f000 f945 	bl	800551c <RCC_GetSystemClockFreq>
 8005292:	4603      	mov	r3, r0
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f9d1 	bl	800563c <RCC_GetHCLKClockFreq>
 800529a:	4603      	mov	r3, r0
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f9f7 	bl	8005690 <RCC_GetPCLK2ClockFreq>
 80052a2:	60f8      	str	r0, [r7, #12]
        break;
 80052a4:	e096      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d146      	bne.n	800533a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ff59 	bl	8005164 <LL_RCC_GetUSARTClockSource>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d87e      	bhi.n	80053ba <LL_RCC_GetUSARTClockFreq+0x196>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	08005323 	.word	0x08005323
 80052c8:	080053bb 	.word	0x080053bb
 80052cc:	080053bb 	.word	0x080053bb
 80052d0:	080053bb 	.word	0x080053bb
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	080053bb 	.word	0x080053bb
 80052dc:	080053bb 	.word	0x080053bb
 80052e0:	080053bb 	.word	0x080053bb
 80052e4:	08005301 	.word	0x08005301
 80052e8:	080053bb 	.word	0x080053bb
 80052ec:	080053bb 	.word	0x080053bb
 80052f0:	080053bb 	.word	0x080053bb
 80052f4:	08005311 	.word	0x08005311
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80052f8:	f000 f910 	bl	800551c <RCC_GetSystemClockFreq>
 80052fc:	60f8      	str	r0, [r7, #12]
        break;
 80052fe:	e069      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005300:	f7ff fea2 	bl	8005048 <LL_RCC_HSI_IsReady>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d059      	beq.n	80053be <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800530a:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800530c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800530e:	e056      	b.n	80053be <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005310:	f7ff feae 	bl	8005070 <LL_RCC_LSE_IsReady>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d053      	beq.n	80053c2 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800531a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005320:	e04f      	b.n	80053c2 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005322:	f000 f8fb 	bl	800551c <RCC_GetSystemClockFreq>
 8005326:	4603      	mov	r3, r0
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f987 	bl	800563c <RCC_GetHCLKClockFreq>
 800532e:	4603      	mov	r3, r0
 8005330:	4618      	mov	r0, r3
 8005332:	f000 f999 	bl	8005668 <RCC_GetPCLK1ClockFreq>
 8005336:	60f8      	str	r0, [r7, #12]
        break;
 8005338:	e04c      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d142      	bne.n	80053c6 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ff0f 	bl	8005164 <LL_RCC_GetUSARTClockSource>
 8005346:	4603      	mov	r3, r0
 8005348:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800534c:	d01a      	beq.n	8005384 <LL_RCC_GetUSARTClockFreq+0x160>
 800534e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005352:	d83a      	bhi.n	80053ca <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005354:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00c      	beq.n	8005374 <LL_RCC_GetUSARTClockFreq+0x150>
 800535a:	4a22      	ldr	r2, [pc, #136]	; (80053e4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d834      	bhi.n	80053ca <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005364:	d017      	beq.n	8005396 <LL_RCC_GetUSARTClockFreq+0x172>
 8005366:	4a20      	ldr	r2, [pc, #128]	; (80053e8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d12e      	bne.n	80053ca <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800536c:	f000 f8d6 	bl	800551c <RCC_GetSystemClockFreq>
 8005370:	60f8      	str	r0, [r7, #12]
          break;
 8005372:	e02f      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005374:	f7ff fe68 	bl	8005048 <LL_RCC_HSI_IsReady>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d027      	beq.n	80053ce <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800537e:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005380:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005382:	e024      	b.n	80053ce <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005384:	f7ff fe74 	bl	8005070 <LL_RCC_LSE_IsReady>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d021      	beq.n	80053d2 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800538e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005392:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005394:	e01d      	b.n	80053d2 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005396:	f000 f8c1 	bl	800551c <RCC_GetSystemClockFreq>
 800539a:	4603      	mov	r3, r0
 800539c:	4618      	mov	r0, r3
 800539e:	f000 f94d 	bl	800563c <RCC_GetHCLKClockFreq>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f95f 	bl	8005668 <RCC_GetPCLK1ClockFreq>
 80053aa:	60f8      	str	r0, [r7, #12]
          break;
 80053ac:	e012      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80053ae:	bf00      	nop
 80053b0:	e010      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80053b2:	bf00      	nop
 80053b4:	e00e      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80053b6:	bf00      	nop
 80053b8:	e00c      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80053ba:	bf00      	nop
 80053bc:	e00a      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80053be:	bf00      	nop
 80053c0:	e008      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80053c2:	bf00      	nop
 80053c4:	e006      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80053c6:	bf00      	nop
 80053c8:	e004      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80053d2:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80053d4:	68fb      	ldr	r3, [r7, #12]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	00f42400 	.word	0x00f42400
 80053e4:	00300020 	.word	0x00300020
 80053e8:	00300010 	.word	0x00300010

080053ec <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2bc0      	cmp	r3, #192	; 0xc0
 80053fc:	d136      	bne.n	800546c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff fec4 	bl	800518c <LL_RCC_GetUARTClockSource>
 8005404:	4603      	mov	r3, r0
 8005406:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800540a:	d01a      	beq.n	8005442 <LL_RCC_GetUARTClockFreq+0x56>
 800540c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005410:	d82e      	bhi.n	8005470 <LL_RCC_GetUARTClockFreq+0x84>
 8005412:	4a3d      	ldr	r2, [pc, #244]	; (8005508 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00c      	beq.n	8005432 <LL_RCC_GetUARTClockFreq+0x46>
 8005418:	4a3b      	ldr	r2, [pc, #236]	; (8005508 <LL_RCC_GetUARTClockFreq+0x11c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d828      	bhi.n	8005470 <LL_RCC_GetUARTClockFreq+0x84>
 800541e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005422:	d017      	beq.n	8005454 <LL_RCC_GetUARTClockFreq+0x68>
 8005424:	4a39      	ldr	r2, [pc, #228]	; (800550c <LL_RCC_GetUARTClockFreq+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d122      	bne.n	8005470 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800542a:	f000 f877 	bl	800551c <RCC_GetSystemClockFreq>
 800542e:	60f8      	str	r0, [r7, #12]
        break;
 8005430:	e023      	b.n	800547a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005432:	f7ff fe09 	bl	8005048 <LL_RCC_HSI_IsReady>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01b      	beq.n	8005474 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 800543c:	4b34      	ldr	r3, [pc, #208]	; (8005510 <LL_RCC_GetUARTClockFreq+0x124>)
 800543e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005440:	e018      	b.n	8005474 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005442:	f7ff fe15 	bl	8005070 <LL_RCC_LSE_IsReady>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d015      	beq.n	8005478 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 800544c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005450:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005452:	e011      	b.n	8005478 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005454:	f000 f862 	bl	800551c <RCC_GetSystemClockFreq>
 8005458:	4603      	mov	r3, r0
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f8ee 	bl	800563c <RCC_GetHCLKClockFreq>
 8005460:	4603      	mov	r3, r0
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f900 	bl	8005668 <RCC_GetPCLK1ClockFreq>
 8005468:	60f8      	str	r0, [r7, #12]
        break;
 800546a:	e006      	b.n	800547a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 800546c:	bf00      	nop
 800546e:	e004      	b.n	800547a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005470:	bf00      	nop
 8005472:	e002      	b.n	800547a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005474:	bf00      	nop
 8005476:	e000      	b.n	800547a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005478:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005480:	d136      	bne.n	80054f0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fe82 	bl	800518c <LL_RCC_GetUARTClockSource>
 8005488:	4603      	mov	r3, r0
 800548a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800548e:	d01a      	beq.n	80054c6 <LL_RCC_GetUARTClockFreq+0xda>
 8005490:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005494:	d82e      	bhi.n	80054f4 <LL_RCC_GetUARTClockFreq+0x108>
 8005496:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <LL_RCC_GetUARTClockFreq+0x128>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00c      	beq.n	80054b6 <LL_RCC_GetUARTClockFreq+0xca>
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <LL_RCC_GetUARTClockFreq+0x128>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d828      	bhi.n	80054f4 <LL_RCC_GetUARTClockFreq+0x108>
 80054a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054a6:	d017      	beq.n	80054d8 <LL_RCC_GetUARTClockFreq+0xec>
 80054a8:	4a1b      	ldr	r2, [pc, #108]	; (8005518 <LL_RCC_GetUARTClockFreq+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d122      	bne.n	80054f4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80054ae:	f000 f835 	bl	800551c <RCC_GetSystemClockFreq>
 80054b2:	60f8      	str	r0, [r7, #12]
        break;
 80054b4:	e023      	b.n	80054fe <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80054b6:	f7ff fdc7 	bl	8005048 <LL_RCC_HSI_IsReady>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <LL_RCC_GetUARTClockFreq+0x124>)
 80054c2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80054c4:	e018      	b.n	80054f8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80054c6:	f7ff fdd3 	bl	8005070 <LL_RCC_LSE_IsReady>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d015      	beq.n	80054fc <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80054d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80054d6:	e011      	b.n	80054fc <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80054d8:	f000 f820 	bl	800551c <RCC_GetSystemClockFreq>
 80054dc:	4603      	mov	r3, r0
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f8ac 	bl	800563c <RCC_GetHCLKClockFreq>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f8be 	bl	8005668 <RCC_GetPCLK1ClockFreq>
 80054ec:	60f8      	str	r0, [r7, #12]
        break;
 80054ee:	e006      	b.n	80054fe <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80054f0:	bf00      	nop
 80054f2:	e004      	b.n	80054fe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80054f4:	bf00      	nop
 80054f6:	e002      	b.n	80054fe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80054f8:	bf00      	nop
 80054fa:	e000      	b.n	80054fe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80054fc:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80054fe:	68fb      	ldr	r3, [r7, #12]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	00c00080 	.word	0x00c00080
 800550c:	00c00040 	.word	0x00c00040
 8005510:	00f42400 	.word	0x00f42400
 8005514:	03000200 	.word	0x03000200
 8005518:	03000100 	.word	0x03000100

0800551c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005522:	f7ff fde7 	bl	80050f4 <LL_RCC_GetSysClkSource>
 8005526:	4603      	mov	r3, r0
 8005528:	2b0c      	cmp	r3, #12
 800552a:	d851      	bhi.n	80055d0 <RCC_GetSystemClockFreq+0xb4>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <RCC_GetSystemClockFreq+0x18>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005569 	.word	0x08005569
 8005538:	080055d1 	.word	0x080055d1
 800553c:	080055d1 	.word	0x080055d1
 8005540:	080055d1 	.word	0x080055d1
 8005544:	080055bd 	.word	0x080055bd
 8005548:	080055d1 	.word	0x080055d1
 800554c:	080055d1 	.word	0x080055d1
 8005550:	080055d1 	.word	0x080055d1
 8005554:	080055c3 	.word	0x080055c3
 8005558:	080055d1 	.word	0x080055d1
 800555c:	080055d1 	.word	0x080055d1
 8005560:	080055d1 	.word	0x080055d1
 8005564:	080055c9 	.word	0x080055c9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005568:	f7ff fd96 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d111      	bne.n	8005596 <RCC_GetSystemClockFreq+0x7a>
 8005572:	f7ff fd91 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <RCC_GetSystemClockFreq+0x6a>
 800557c:	f7ff fd9e 	bl	80050bc <LL_RCC_MSI_GetRange>
 8005580:	4603      	mov	r3, r0
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	e003      	b.n	800558e <RCC_GetSystemClockFreq+0x72>
 8005586:	f7ff fda7 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 800558a:	4603      	mov	r3, r0
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	4a28      	ldr	r2, [pc, #160]	; (8005630 <RCC_GetSystemClockFreq+0x114>)
 8005590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005594:	e010      	b.n	80055b8 <RCC_GetSystemClockFreq+0x9c>
 8005596:	f7ff fd7f 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <RCC_GetSystemClockFreq+0x8e>
 80055a0:	f7ff fd8c 	bl	80050bc <LL_RCC_MSI_GetRange>
 80055a4:	4603      	mov	r3, r0
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	e003      	b.n	80055b2 <RCC_GetSystemClockFreq+0x96>
 80055aa:	f7ff fd95 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 80055ae:	4603      	mov	r3, r0
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	4a1f      	ldr	r2, [pc, #124]	; (8005630 <RCC_GetSystemClockFreq+0x114>)
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80055ba:	e033      	b.n	8005624 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80055bc:	4b1d      	ldr	r3, [pc, #116]	; (8005634 <RCC_GetSystemClockFreq+0x118>)
 80055be:	607b      	str	r3, [r7, #4]
      break;
 80055c0:	e030      	b.n	8005624 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80055c2:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <RCC_GetSystemClockFreq+0x11c>)
 80055c4:	607b      	str	r3, [r7, #4]
      break;
 80055c6:	e02d      	b.n	8005624 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80055c8:	f000 f876 	bl	80056b8 <RCC_PLL_GetFreqDomain_SYS>
 80055cc:	6078      	str	r0, [r7, #4]
      break;
 80055ce:	e029      	b.n	8005624 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80055d0:	f7ff fd62 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d111      	bne.n	80055fe <RCC_GetSystemClockFreq+0xe2>
 80055da:	f7ff fd5d 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <RCC_GetSystemClockFreq+0xd2>
 80055e4:	f7ff fd6a 	bl	80050bc <LL_RCC_MSI_GetRange>
 80055e8:	4603      	mov	r3, r0
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	e003      	b.n	80055f6 <RCC_GetSystemClockFreq+0xda>
 80055ee:	f7ff fd73 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 80055f2:	4603      	mov	r3, r0
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	4a0e      	ldr	r2, [pc, #56]	; (8005630 <RCC_GetSystemClockFreq+0x114>)
 80055f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fc:	e010      	b.n	8005620 <RCC_GetSystemClockFreq+0x104>
 80055fe:	f7ff fd4b 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <RCC_GetSystemClockFreq+0xf6>
 8005608:	f7ff fd58 	bl	80050bc <LL_RCC_MSI_GetRange>
 800560c:	4603      	mov	r3, r0
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	e003      	b.n	800561a <RCC_GetSystemClockFreq+0xfe>
 8005612:	f7ff fd61 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005616:	4603      	mov	r3, r0
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	4a05      	ldr	r2, [pc, #20]	; (8005630 <RCC_GetSystemClockFreq+0x114>)
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005622:	bf00      	nop
  }

  return frequency;
 8005624:	687b      	ldr	r3, [r7, #4]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	08008678 	.word	0x08008678
 8005634:	00f42400 	.word	0x00f42400
 8005638:	007a1200 	.word	0x007a1200

0800563c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005644:	f7ff fd64 	bl	8005110 <LL_RCC_GetAHBPrescaler>
 8005648:	4603      	mov	r3, r0
 800564a:	091b      	lsrs	r3, r3, #4
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <RCC_GetHCLKClockFreq+0x28>)
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	40d3      	lsrs	r3, r2
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	08008660 	.word	0x08008660

08005668 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005670:	f7ff fd5c 	bl	800512c <LL_RCC_GetAPB1Prescaler>
 8005674:	4603      	mov	r3, r0
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <RCC_GetPCLK1ClockFreq+0x24>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	461a      	mov	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	40d3      	lsrs	r3, r2
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	08008670 	.word	0x08008670

08005690 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005698:	f7ff fd56 	bl	8005148 <LL_RCC_GetAPB2Prescaler>
 800569c:	4603      	mov	r3, r0
 800569e:	0adb      	lsrs	r3, r3, #11
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <RCC_GetPCLK2ClockFreq+0x24>)
 80056a2:	5cd3      	ldrb	r3, [r2, r3]
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	40d3      	lsrs	r3, r2
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	08008670 	.word	0x08008670

080056b8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80056be:	f7ff fd79 	bl	80051b4 <LL_RCC_PLL_GetMainSource>
 80056c2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d036      	beq.n	8005738 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d836      	bhi.n	800573e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d003      	beq.n	80056de <RCC_PLL_GetFreqDomain_SYS+0x26>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d02a      	beq.n	8005732 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80056dc:	e02f      	b.n	800573e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80056de:	f7ff fcdb 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d111      	bne.n	800570c <RCC_PLL_GetFreqDomain_SYS+0x54>
 80056e8:	f7ff fcd6 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <RCC_PLL_GetFreqDomain_SYS+0x44>
 80056f2:	f7ff fce3 	bl	80050bc <LL_RCC_MSI_GetRange>
 80056f6:	4603      	mov	r3, r0
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	e003      	b.n	8005704 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80056fc:	f7ff fcec 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005700:	4603      	mov	r3, r0
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570a:	e010      	b.n	800572e <RCC_PLL_GetFreqDomain_SYS+0x76>
 800570c:	f7ff fcc4 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005716:	f7ff fcd1 	bl	80050bc <LL_RCC_MSI_GetRange>
 800571a:	4603      	mov	r3, r0
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	e003      	b.n	8005728 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005720:	f7ff fcda 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005724:	4603      	mov	r3, r0
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800572a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005730:	e02f      	b.n	8005792 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005732:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005734:	607b      	str	r3, [r7, #4]
      break;
 8005736:	e02c      	b.n	8005792 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005738:	4b24      	ldr	r3, [pc, #144]	; (80057cc <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800573a:	607b      	str	r3, [r7, #4]
      break;
 800573c:	e029      	b.n	8005792 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800573e:	f7ff fcab 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d111      	bne.n	800576c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005748:	f7ff fca6 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005752:	f7ff fcb3 	bl	80050bc <LL_RCC_MSI_GetRange>
 8005756:	4603      	mov	r3, r0
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	e003      	b.n	8005764 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800575c:	f7ff fcbc 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005760:	4603      	mov	r3, r0
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576a:	e010      	b.n	800578e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800576c:	f7ff fc94 	bl	8005098 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005776:	f7ff fca1 	bl	80050bc <LL_RCC_MSI_GetRange>
 800577a:	4603      	mov	r3, r0
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	e003      	b.n	8005788 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005780:	f7ff fcaa 	bl	80050d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005784:	4603      	mov	r3, r0
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800578a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005790:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005792:	f7ff fd39 	bl	8005208 <LL_RCC_PLL_GetDivider>
 8005796:	4603      	mov	r3, r0
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	3301      	adds	r3, #1
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	fbb2 f4f3 	udiv	r4, r2, r3
 80057a2:	f7ff fd15 	bl	80051d0 <LL_RCC_PLL_GetN>
 80057a6:	4603      	mov	r3, r0
 80057a8:	fb03 f404 	mul.w	r4, r3, r4
 80057ac:	f7ff fd1e 	bl	80051ec <LL_RCC_PLL_GetR>
 80057b0:	4603      	mov	r3, r0
 80057b2:	0e5b      	lsrs	r3, r3, #25
 80057b4:	3301      	adds	r3, #1
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd90      	pop	{r4, r7, pc}
 80057c4:	08008678 	.word	0x08008678
 80057c8:	00f42400 	.word	0x00f42400
 80057cc:	007a1200 	.word	0x007a1200

080057d0 <LL_USART_IsEnabled>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <LL_USART_IsEnabled+0x18>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <LL_USART_IsEnabled+0x1a>
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <LL_USART_SetStopBitsLength>:
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	605a      	str	r2, [r3, #4]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_USART_SetHWFlowCtrl>:
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	609a      	str	r2, [r3, #8]
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_USART_SetBaudRate>:
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005856:	d11a      	bne.n	800588e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	005a      	lsls	r2, r3, #1
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	441a      	add	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	b29b      	uxth	r3, r3
 800586a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	b29b      	uxth	r3, r3
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	60da      	str	r2, [r3, #12]
}
 800588c:	e00a      	b.n	80058a4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	085a      	lsrs	r2, r3, #1
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	441a      	add	r2, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	b29b      	uxth	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	60da      	str	r2, [r3, #12]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff84 	bl	80057d0 <LL_USART_IsEnabled>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d15b      	bne.n	8005986 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <LL_USART_Init+0xe0>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6851      	ldr	r1, [r2, #4]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	68d2      	ldr	r2, [r2, #12]
 80058de:	4311      	orrs	r1, r2
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	6912      	ldr	r2, [r2, #16]
 80058e4:	4311      	orrs	r1, r2
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	6992      	ldr	r2, [r2, #24]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff ff7c 	bl	80057f6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff ff89 	bl	800581c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a21      	ldr	r2, [pc, #132]	; (8005994 <LL_USART_Init+0xe4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d104      	bne.n	800591c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005912:	2003      	movs	r0, #3
 8005914:	f7ff fc86 	bl	8005224 <LL_RCC_GetUSARTClockFreq>
 8005918:	60b8      	str	r0, [r7, #8]
 800591a:	e023      	b.n	8005964 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <LL_USART_Init+0xe8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d104      	bne.n	800592e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005924:	200c      	movs	r0, #12
 8005926:	f7ff fc7d 	bl	8005224 <LL_RCC_GetUSARTClockFreq>
 800592a:	60b8      	str	r0, [r7, #8]
 800592c:	e01a      	b.n	8005964 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1a      	ldr	r2, [pc, #104]	; (800599c <LL_USART_Init+0xec>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d104      	bne.n	8005940 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005936:	2030      	movs	r0, #48	; 0x30
 8005938:	f7ff fc74 	bl	8005224 <LL_RCC_GetUSARTClockFreq>
 800593c:	60b8      	str	r0, [r7, #8]
 800593e:	e011      	b.n	8005964 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <LL_USART_Init+0xf0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d104      	bne.n	8005952 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005948:	20c0      	movs	r0, #192	; 0xc0
 800594a:	f7ff fd4f 	bl	80053ec <LL_RCC_GetUARTClockFreq>
 800594e:	60b8      	str	r0, [r7, #8]
 8005950:	e008      	b.n	8005964 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <LL_USART_Init+0xf4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d104      	bne.n	8005964 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800595a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800595e:	f7ff fd45 	bl	80053ec <LL_RCC_GetUARTClockFreq>
 8005962:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff ff5e 	bl	8005842 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	efff69f3 	.word	0xefff69f3
 8005994:	40013800 	.word	0x40013800
 8005998:	40004400 	.word	0x40004400
 800599c:	40004800 	.word	0x40004800
 80059a0:	40004c00 	.word	0x40004c00
 80059a4:	40005000 	.word	0x40005000

080059a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ba:	2b84      	cmp	r3, #132	; 0x84
 80059bc:	d005      	beq.n	80059ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	3303      	adds	r3, #3
 80059c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80059dc:	f000 fff4 	bl	80069c8 <vTaskStartScheduler>
  
  return osOK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e8:	b089      	sub	sp, #36	; 0x24
 80059ea:	af04      	add	r7, sp, #16
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d020      	beq.n	8005a3a <osThreadCreate+0x54>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01c      	beq.n	8005a3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685c      	ldr	r4, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681d      	ldr	r5, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691e      	ldr	r6, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff ffc8 	bl	80059a8 <makeFreeRtosPriority>
 8005a18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a22:	9202      	str	r2, [sp, #8]
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	9100      	str	r1, [sp, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4632      	mov	r2, r6
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 fdec 	bl	800660c <xTaskCreateStatic>
 8005a34:	4603      	mov	r3, r0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e01c      	b.n	8005a74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685c      	ldr	r4, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a46:	b29e      	uxth	r6, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff ffaa 	bl	80059a8 <makeFreeRtosPriority>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f107 030c 	add.w	r3, r7, #12
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	9200      	str	r2, [sp, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	4632      	mov	r2, r6
 8005a62:	4629      	mov	r1, r5
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 fe2e 	bl	80066c6 <xTaskCreate>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d001      	beq.n	8005a74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e000      	b.n	8005a76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a74:	68fb      	ldr	r3, [r7, #12]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <osDelay+0x16>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	e000      	b.n	8005a96 <osDelay+0x18>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 ff62 	bl	8006960 <vTaskDelay>
  
  return osOK;
 8005a9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f103 0208 	add.w	r2, r3, #8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005abe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f103 0208 	add.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f103 0208 	add.w	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	601a      	str	r2, [r3, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5e:	d103      	bne.n	8005b68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e00c      	b.n	8005b82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e002      	b.n	8005b76 <vListInsert+0x2e>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d2f6      	bcs.n	8005b70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	601a      	str	r2, [r3, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6892      	ldr	r2, [r2, #8]
 8005bd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6852      	ldr	r2, [r2, #4]
 8005bda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d103      	bne.n	8005bee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c3a:	f001 fd0b 	bl	8007654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	441a      	add	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	68f9      	ldr	r1, [r7, #12]
 8005c6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	22ff      	movs	r2, #255	; 0xff
 8005c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d114      	bne.n	8005cba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01a      	beq.n	8005cce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3310      	adds	r3, #16
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 f8e5 	bl	8006e6c <xTaskRemoveFromEventList>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <xQueueGenericReset+0xcc>)
 8005caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	e009      	b.n	8005cce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3310      	adds	r3, #16
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fef1 	bl	8005aa6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3324      	adds	r3, #36	; 0x24
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff feec 	bl	8005aa6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cce:	f001 fcf1 	bl	80076b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cd2:	2301      	movs	r3, #1
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	3348      	adds	r3, #72	; 0x48
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 fdbd 	bl	8007898 <pvPortMalloc>
 8005d1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	3348      	adds	r3, #72	; 0x48
 8005d2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d38:	79fa      	ldrb	r2, [r7, #7]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f805 	bl	8005d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d82:	2101      	movs	r1, #1
 8005d84:	69b8      	ldr	r0, [r7, #24]
 8005d86:	f7ff ff43 	bl	8005c10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00e      	beq.n	8005dbe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005db2:	2300      	movs	r3, #0
 8005db4:	2200      	movs	r2, #0
 8005db6:	2100      	movs	r1, #0
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f81d 	bl	8005df8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	4603      	mov	r3, r0
 8005dce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6939      	ldr	r1, [r7, #16]
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f7ff ff7e 	bl	8005ce0 <xQueueGenericCreate>
 8005de4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff ffd3 	bl	8005d92 <prvInitialiseMutex>

		return xNewQueue;
 8005dec:	68fb      	ldr	r3, [r7, #12]
	}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08e      	sub	sp, #56	; 0x38
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e06:	2300      	movs	r3, #0
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueGenericSend+0x32>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <xQueueGenericSend+0x40>
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <xQueueGenericSend+0x44>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <xQueueGenericSend+0x46>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <xQueueGenericSend+0x60>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d103      	bne.n	8005e66 <xQueueGenericSend+0x6e>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <xQueueGenericSend+0x72>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <xQueueGenericSend+0x74>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	623b      	str	r3, [r7, #32]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e86:	f001 f9b1 	bl	80071ec <xTaskGetSchedulerState>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <xQueueGenericSend+0x9e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <xQueueGenericSend+0xa2>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xQueueGenericSend+0xa4>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61fb      	str	r3, [r7, #28]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eb6:	f001 fbcd 	bl	8007654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d302      	bcc.n	8005ecc <xQueueGenericSend+0xd4>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d129      	bne.n	8005f20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ed2:	f000 fa8b 	bl	80063ec <prvCopyDataToQueue>
 8005ed6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 ffc1 	bl	8006e6c <xTaskRemoveFromEventList>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d013      	beq.n	8005f18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ef0:	4b3f      	ldr	r3, [pc, #252]	; (8005ff0 <xQueueGenericSend+0x1f8>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	e00a      	b.n	8005f18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f08:	4b39      	ldr	r3, [pc, #228]	; (8005ff0 <xQueueGenericSend+0x1f8>)
 8005f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f18:	f001 fbcc 	bl	80076b4 <vPortExitCritical>
				return pdPASS;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e063      	b.n	8005fe8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d103      	bne.n	8005f2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f26:	f001 fbc5 	bl	80076b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e05c      	b.n	8005fe8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f34:	f107 0314 	add.w	r3, r7, #20
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fff9 	bl	8006f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f42:	f001 fbb7 	bl	80076b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f46:	f000 fda9 	bl	8006a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f4a:	f001 fb83 	bl	8007654 <vPortEnterCritical>
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f5a:	d103      	bne.n	8005f64 <xQueueGenericSend+0x16c>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f6a:	b25b      	sxtb	r3, r3
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f70:	d103      	bne.n	8005f7a <xQueueGenericSend+0x182>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f7a:	f001 fb9b 	bl	80076b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f7e:	1d3a      	adds	r2, r7, #4
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 ffe8 	bl	8006f5c <xTaskCheckForTimeOut>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d124      	bne.n	8005fdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f94:	f000 fb22 	bl	80065dc <prvIsQueueFull>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d018      	beq.n	8005fd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	3310      	adds	r3, #16
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 ff3c 	bl	8006e24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fae:	f000 faad 	bl	800650c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fb2:	f000 fd81 	bl	8006ab8 <xTaskResumeAll>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f af7c 	bne.w	8005eb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <xQueueGenericSend+0x1f8>)
 8005fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	e772      	b.n	8005eb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd2:	f000 fa9b 	bl	800650c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fd6:	f000 fd6f 	bl	8006ab8 <xTaskResumeAll>
 8005fda:	e76c      	b.n	8005eb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fde:	f000 fa95 	bl	800650c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fe2:	f000 fd69 	bl	8006ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3738      	adds	r7, #56	; 0x38
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b090      	sub	sp, #64	; 0x40
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10a      	bne.n	8006022 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <xQueueGenericSendFromISR+0x3c>
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <xQueueGenericSendFromISR+0x40>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <xQueueGenericSendFromISR+0x42>
 8006034:	2300      	movs	r3, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d103      	bne.n	800605e <xQueueGenericSendFromISR+0x6a>
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <xQueueGenericSendFromISR+0x6e>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <xQueueGenericSendFromISR+0x70>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	623b      	str	r3, [r7, #32]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800607e:	f001 fbcb 	bl	8007818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006082:	f3ef 8211 	mrs	r2, BASEPRI
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	61fa      	str	r2, [r7, #28]
 8006098:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800609a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <xQueueGenericSendFromISR+0xbc>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d12f      	bne.n	8006110 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060c6:	f000 f991 	bl	80063ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d2:	d112      	bne.n	80060fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d016      	beq.n	800610a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	3324      	adds	r3, #36	; 0x24
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fec3 	bl	8006e6c <xTaskRemoveFromEventList>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00e      	beq.n	800610a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e007      	b.n	800610a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060fe:	3301      	adds	r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	b25a      	sxtb	r2, r3
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800610a:	2301      	movs	r3, #1
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800610e:	e001      	b.n	8006114 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006110:	2300      	movs	r3, #0
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800611e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006122:	4618      	mov	r0, r3
 8006124:	3740      	adds	r7, #64	; 0x40
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	; 0x30
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006138:	2300      	movs	r3, #0
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <xQueueReceive+0x30>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	623b      	str	r3, [r7, #32]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <xQueueReceive+0x3e>
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <xQueueReceive+0x42>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueReceive+0x44>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xQueueReceive+0x5e>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	61fb      	str	r3, [r7, #28]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800618a:	f001 f82f 	bl	80071ec <xTaskGetSchedulerState>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <xQueueReceive+0x6e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <xQueueReceive+0x72>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueReceive+0x74>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xQueueReceive+0x8e>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	61bb      	str	r3, [r7, #24]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ba:	f001 fa4b 	bl	8007654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01f      	beq.n	800620a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ce:	f000 f977 	bl	80064c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	1e5a      	subs	r2, r3, #1
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00f      	beq.n	8006202 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	3310      	adds	r3, #16
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fe40 	bl	8006e6c <xTaskRemoveFromEventList>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061f2:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <xQueueReceive+0x1bc>)
 80061f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006202:	f001 fa57 	bl	80076b4 <vPortExitCritical>
				return pdPASS;
 8006206:	2301      	movs	r3, #1
 8006208:	e069      	b.n	80062de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d103      	bne.n	8006218 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006210:	f001 fa50 	bl	80076b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006214:	2300      	movs	r3, #0
 8006216:	e062      	b.n	80062de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800621e:	f107 0310 	add.w	r3, r7, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fe84 	bl	8006f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006228:	2301      	movs	r3, #1
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800622c:	f001 fa42 	bl	80076b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006230:	f000 fc34 	bl	8006a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006234:	f001 fa0e 	bl	8007654 <vPortEnterCritical>
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006244:	d103      	bne.n	800624e <xQueueReceive+0x122>
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006254:	b25b      	sxtb	r3, r3
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800625a:	d103      	bne.n	8006264 <xQueueReceive+0x138>
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006264:	f001 fa26 	bl	80076b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006268:	1d3a      	adds	r2, r7, #4
 800626a:	f107 0310 	add.w	r3, r7, #16
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fe73 	bl	8006f5c <xTaskCheckForTimeOut>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d123      	bne.n	80062c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f000 f997 	bl	80065b0 <prvIsQueueEmpty>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d017      	beq.n	80062b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	3324      	adds	r3, #36	; 0x24
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fdc7 	bl	8006e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006298:	f000 f938 	bl	800650c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800629c:	f000 fc0c 	bl	8006ab8 <xTaskResumeAll>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d189      	bne.n	80061ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <xQueueReceive+0x1bc>)
 80062a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	e780      	b.n	80061ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ba:	f000 f927 	bl	800650c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062be:	f000 fbfb 	bl	8006ab8 <xTaskResumeAll>
 80062c2:	e77a      	b.n	80061ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c6:	f000 f921 	bl	800650c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ca:	f000 fbf5 	bl	8006ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d0:	f000 f96e 	bl	80065b0 <prvIsQueueEmpty>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f43f af6f 	beq.w	80061ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3730      	adds	r7, #48	; 0x30
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08e      	sub	sp, #56	; 0x38
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	623b      	str	r3, [r7, #32]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <xQueueReceiveFromISR+0x3a>
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <xQueueReceiveFromISR+0x3e>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <xQueueReceiveFromISR+0x40>
 800632a:	2300      	movs	r3, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	61fb      	str	r3, [r7, #28]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006346:	f001 fa67 	bl	8007818 <vPortValidateInterruptPriority>
	__asm volatile
 800634a:	f3ef 8211 	mrs	r2, BASEPRI
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	61ba      	str	r2, [r7, #24]
 8006360:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006362:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d02f      	beq.n	80063d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006380:	f000 f89e 	bl	80064c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	1e5a      	subs	r2, r3, #1
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800638c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006394:	d112      	bne.n	80063bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	3310      	adds	r3, #16
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fd62 	bl	8006e6c <xTaskRemoveFromEventList>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00e      	beq.n	80063cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	e007      	b.n	80063cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80063bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063c0:	3301      	adds	r3, #1
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	b25a      	sxtb	r2, r3
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80063cc:	2301      	movs	r3, #1
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
 80063d0:	e001      	b.n	80063d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f383 8811 	msr	BASEPRI, r3
}
 80063e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3738      	adds	r7, #56	; 0x38
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10d      	bne.n	8006426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d14d      	bne.n	80064ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 ff06 	bl	8007228 <xTaskPriorityDisinherit>
 800641c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	609a      	str	r2, [r3, #8]
 8006424:	e043      	b.n	80064ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d119      	bne.n	8006460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6858      	ldr	r0, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	461a      	mov	r2, r3
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	f001 fc44 	bl	8007cc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	441a      	add	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d32b      	bcc.n	80064ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	e026      	b.n	80064ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68d8      	ldr	r0, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	461a      	mov	r2, r3
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	f001 fc2a 	bl	8007cc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	425b      	negs	r3, r3
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d207      	bcs.n	800649c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	425b      	negs	r3, r3
 8006496:	441a      	add	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d105      	bne.n	80064ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064b6:	697b      	ldr	r3, [r7, #20]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d018      	beq.n	8006504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	441a      	add	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d303      	bcc.n	80064f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	461a      	mov	r2, r3
 80064fe:	6838      	ldr	r0, [r7, #0]
 8006500:	f001 fbe0 	bl	8007cc4 <memcpy>
	}
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006514:	f001 f89e 	bl	8007654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800651e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006520:	e011      	b.n	8006546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d012      	beq.n	8006550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3324      	adds	r3, #36	; 0x24
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fc9c 	bl	8006e6c <xTaskRemoveFromEventList>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800653a:	f000 fd71 	bl	8007020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	3b01      	subs	r3, #1
 8006542:	b2db      	uxtb	r3, r3
 8006544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800654a:	2b00      	cmp	r3, #0
 800654c:	dce9      	bgt.n	8006522 <prvUnlockQueue+0x16>
 800654e:	e000      	b.n	8006552 <prvUnlockQueue+0x46>
					break;
 8006550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	22ff      	movs	r2, #255	; 0xff
 8006556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800655a:	f001 f8ab 	bl	80076b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800655e:	f001 f879 	bl	8007654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800656a:	e011      	b.n	8006590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d012      	beq.n	800659a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3310      	adds	r3, #16
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fc77 	bl	8006e6c <xTaskRemoveFromEventList>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006584:	f000 fd4c 	bl	8007020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	3b01      	subs	r3, #1
 800658c:	b2db      	uxtb	r3, r3
 800658e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006594:	2b00      	cmp	r3, #0
 8006596:	dce9      	bgt.n	800656c <prvUnlockQueue+0x60>
 8006598:	e000      	b.n	800659c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800659a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	22ff      	movs	r2, #255	; 0xff
 80065a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065a4:	f001 f886 	bl	80076b4 <vPortExitCritical>
}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065b8:	f001 f84c 	bl	8007654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d102      	bne.n	80065ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e001      	b.n	80065ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ce:	f001 f871 	bl	80076b4 <vPortExitCritical>

	return xReturn;
 80065d2:	68fb      	ldr	r3, [r7, #12]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065e4:	f001 f836 	bl	8007654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d102      	bne.n	80065fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e001      	b.n	80065fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065fe:	f001 f859 	bl	80076b4 <vPortExitCritical>

	return xReturn;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08e      	sub	sp, #56	; 0x38
 8006610:	af04      	add	r7, sp, #16
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	623b      	str	r3, [r7, #32]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xTaskCreateStatic+0x46>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	61fb      	str	r3, [r7, #28]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006652:	23b4      	movs	r3, #180	; 0xb4
 8006654:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2bb4      	cmp	r3, #180	; 0xb4
 800665a:	d00a      	beq.n	8006672 <xTaskCreateStatic+0x66>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	61bb      	str	r3, [r7, #24]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006672:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01e      	beq.n	80066b8 <xTaskCreateStatic+0xac>
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01b      	beq.n	80066b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006688:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	2202      	movs	r2, #2
 800668e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006692:	2300      	movs	r3, #0
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	9302      	str	r3, [sp, #8]
 800669a:	f107 0314 	add.w	r3, r7, #20
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f850 	bl	8006750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066b2:	f000 f8eb 	bl	800688c <prvAddNewTaskToReadyList>
 80066b6:	e001      	b.n	80066bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066bc:	697b      	ldr	r3, [r7, #20]
	}
 80066be:	4618      	mov	r0, r3
 80066c0:	3728      	adds	r7, #40	; 0x28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b08c      	sub	sp, #48	; 0x30
 80066ca:	af04      	add	r7, sp, #16
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f8dc 	bl	8007898 <pvPortMalloc>
 80066e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00e      	beq.n	8006706 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066e8:	20b4      	movs	r0, #180	; 0xb4
 80066ea:	f001 f8d5 	bl	8007898 <pvPortMalloc>
 80066ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
 80066fc:	e005      	b.n	800670a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066fe:	6978      	ldr	r0, [r7, #20]
 8006700:	f001 f996 	bl	8007a30 <vPortFree>
 8006704:	e001      	b.n	800670a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d017      	beq.n	8006740 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	2300      	movs	r3, #0
 800671c:	9303      	str	r3, [sp, #12]
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f80e 	bl	8006750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006734:	69f8      	ldr	r0, [r7, #28]
 8006736:	f000 f8a9 	bl	800688c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800673a:	2301      	movs	r3, #1
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e002      	b.n	8006746 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006744:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006746:	69bb      	ldr	r3, [r7, #24]
	}
 8006748:	4618      	mov	r0, r3
 800674a:	3720      	adds	r7, #32
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006768:	3b01      	subs	r3, #1
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f023 0307 	bic.w	r3, r3, #7
 8006776:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	617b      	str	r3, [r7, #20]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01f      	beq.n	80067de <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800679e:	2300      	movs	r3, #0
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	e012      	b.n	80067ca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	7819      	ldrb	r1, [r3, #0]
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	3334      	adds	r3, #52	; 0x34
 80067b4:	460a      	mov	r2, r1
 80067b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	4413      	add	r3, r2
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d006      	beq.n	80067d2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	3301      	adds	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b0f      	cmp	r3, #15
 80067ce:	d9e9      	bls.n	80067a4 <prvInitialiseNewTask+0x54>
 80067d0:	e000      	b.n	80067d4 <prvInitialiseNewTask+0x84>
			{
				break;
 80067d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067dc:	e003      	b.n	80067e6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	2b06      	cmp	r3, #6
 80067ea:	d901      	bls.n	80067f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ec:	2306      	movs	r3, #6
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	2200      	movs	r2, #0
 8006800:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	3304      	adds	r3, #4
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f96d 	bl	8005ae6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	3318      	adds	r3, #24
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff f968 	bl	8005ae6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	f1c3 0207 	rsb	r2, r3, #7
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	2200      	movs	r2, #0
 8006838:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	334c      	adds	r3, #76	; 0x4c
 8006840:	2260      	movs	r2, #96	; 0x60
 8006842:	2100      	movs	r1, #0
 8006844:	4618      	mov	r0, r3
 8006846:	f001 fa4b 	bl	8007ce0 <memset>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	4a0c      	ldr	r2, [pc, #48]	; (8006880 <prvInitialiseNewTask+0x130>)
 800684e:	651a      	str	r2, [r3, #80]	; 0x50
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <prvInitialiseNewTask+0x134>)
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	4a0b      	ldr	r2, [pc, #44]	; (8006888 <prvInitialiseNewTask+0x138>)
 800685a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	69b8      	ldr	r0, [r7, #24]
 8006862:	f000 fdcd 	bl	8007400 <pxPortInitialiseStack>
 8006866:	4602      	mov	r2, r0
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006878:	bf00      	nop
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	080086c8 	.word	0x080086c8
 8006884:	080086e8 	.word	0x080086e8
 8006888:	080086a8 	.word	0x080086a8

0800688c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006894:	f000 fede 	bl	8007654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006898:	4b2a      	ldr	r3, [pc, #168]	; (8006944 <prvAddNewTaskToReadyList+0xb8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	4a29      	ldr	r2, [pc, #164]	; (8006944 <prvAddNewTaskToReadyList+0xb8>)
 80068a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068a2:	4b29      	ldr	r3, [pc, #164]	; (8006948 <prvAddNewTaskToReadyList+0xbc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068aa:	4a27      	ldr	r2, [pc, #156]	; (8006948 <prvAddNewTaskToReadyList+0xbc>)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068b0:	4b24      	ldr	r3, [pc, #144]	; (8006944 <prvAddNewTaskToReadyList+0xb8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d110      	bne.n	80068da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068b8:	f000 fbd6 	bl	8007068 <prvInitialiseTaskLists>
 80068bc:	e00d      	b.n	80068da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068be:	4b23      	ldr	r3, [pc, #140]	; (800694c <prvAddNewTaskToReadyList+0xc0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068c6:	4b20      	ldr	r3, [pc, #128]	; (8006948 <prvAddNewTaskToReadyList+0xbc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d802      	bhi.n	80068da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068d4:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <prvAddNewTaskToReadyList+0xbc>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <prvAddNewTaskToReadyList+0xc4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <prvAddNewTaskToReadyList+0xc4>)
 80068e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	2201      	movs	r2, #1
 80068ea:	409a      	lsls	r2, r3
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <prvAddNewTaskToReadyList+0xc8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	4a18      	ldr	r2, [pc, #96]	; (8006954 <prvAddNewTaskToReadyList+0xc8>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <prvAddNewTaskToReadyList+0xcc>)
 8006904:	441a      	add	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f7ff f8f7 	bl	8005b00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006912:	f000 fecf 	bl	80076b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <prvAddNewTaskToReadyList+0xc0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <prvAddNewTaskToReadyList+0xbc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	429a      	cmp	r2, r3
 800692a:	d207      	bcs.n	800693c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <prvAddNewTaskToReadyList+0xd0>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000450 	.word	0x20000450
 8006948:	20000350 	.word	0x20000350
 800694c:	2000045c 	.word	0x2000045c
 8006950:	2000046c 	.word	0x2000046c
 8006954:	20000458 	.word	0x20000458
 8006958:	20000354 	.word	0x20000354
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d017      	beq.n	80069a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <vTaskDelay+0x60>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <vTaskDelay+0x30>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	60bb      	str	r3, [r7, #8]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006990:	f000 f884 	bl	8006a9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006994:	2100      	movs	r1, #0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fccc 	bl	8007334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800699c:	f000 f88c 	bl	8006ab8 <xTaskResumeAll>
 80069a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <vTaskDelay+0x64>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000478 	.word	0x20000478
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069d6:	463a      	mov	r2, r7
 80069d8:	1d39      	adds	r1, r7, #4
 80069da:	f107 0308 	add.w	r3, r7, #8
 80069de:	4618      	mov	r0, r3
 80069e0:	f7f9 fc46 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	9202      	str	r2, [sp, #8]
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	2300      	movs	r3, #0
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	2300      	movs	r3, #0
 80069f4:	460a      	mov	r2, r1
 80069f6:	4921      	ldr	r1, [pc, #132]	; (8006a7c <vTaskStartScheduler+0xb4>)
 80069f8:	4821      	ldr	r0, [pc, #132]	; (8006a80 <vTaskStartScheduler+0xb8>)
 80069fa:	f7ff fe07 	bl	800660c <xTaskCreateStatic>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4a20      	ldr	r2, [pc, #128]	; (8006a84 <vTaskStartScheduler+0xbc>)
 8006a02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a04:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <vTaskStartScheduler+0xbc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	e001      	b.n	8006a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d11b      	bne.n	8006a54 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	613b      	str	r3, [r7, #16]
}
 8006a2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a30:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <vTaskStartScheduler+0xc0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	334c      	adds	r3, #76	; 0x4c
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <vTaskStartScheduler+0xc4>)
 8006a38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <vTaskStartScheduler+0xc8>)
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <vTaskStartScheduler+0xcc>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <vTaskStartScheduler+0xd0>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a4e:	f000 fd5f 	bl	8007510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a52:	e00e      	b.n	8006a72 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5a:	d10a      	bne.n	8006a72 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60fb      	str	r3, [r7, #12]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <vTaskStartScheduler+0xa8>
}
 8006a72:	bf00      	nop
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08008658 	.word	0x08008658
 8006a80:	08007039 	.word	0x08007039
 8006a84:	20000474 	.word	0x20000474
 8006a88:	20000350 	.word	0x20000350
 8006a8c:	20000010 	.word	0x20000010
 8006a90:	20000470 	.word	0x20000470
 8006a94:	2000045c 	.word	0x2000045c
 8006a98:	20000454 	.word	0x20000454

08006a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <vTaskSuspendAll+0x18>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a03      	ldr	r2, [pc, #12]	; (8006ab4 <vTaskSuspendAll+0x18>)
 8006aa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006aaa:	bf00      	nop
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	20000478 	.word	0x20000478

08006ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ac6:	4b41      	ldr	r3, [pc, #260]	; (8006bcc <xTaskResumeAll+0x114>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	603b      	str	r3, [r7, #0]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ae4:	f000 fdb6 	bl	8007654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ae8:	4b38      	ldr	r3, [pc, #224]	; (8006bcc <xTaskResumeAll+0x114>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	4a37      	ldr	r2, [pc, #220]	; (8006bcc <xTaskResumeAll+0x114>)
 8006af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af2:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <xTaskResumeAll+0x114>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d161      	bne.n	8006bbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006afa:	4b35      	ldr	r3, [pc, #212]	; (8006bd0 <xTaskResumeAll+0x118>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05d      	beq.n	8006bbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b02:	e02e      	b.n	8006b62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b04:	4b33      	ldr	r3, [pc, #204]	; (8006bd4 <xTaskResumeAll+0x11c>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3318      	adds	r3, #24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff f852 	bl	8005bba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff f84d 	bl	8005bba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	2201      	movs	r2, #1
 8006b26:	409a      	lsls	r2, r3
 8006b28:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <xTaskResumeAll+0x120>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <xTaskResumeAll+0x120>)
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <xTaskResumeAll+0x124>)
 8006b40:	441a      	add	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7fe ffd9 	bl	8005b00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b52:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <xTaskResumeAll+0x128>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d302      	bcc.n	8006b62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006b5c:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <xTaskResumeAll+0x12c>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b62:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <xTaskResumeAll+0x11c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1cc      	bne.n	8006b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b70:	f000 fb1c 	bl	80071ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b74:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <xTaskResumeAll+0x130>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d010      	beq.n	8006ba2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b80:	f000 f836 	bl	8006bf0 <xTaskIncrementTick>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b8a:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <xTaskResumeAll+0x12c>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006b9c:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <xTaskResumeAll+0x130>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ba2:	4b10      	ldr	r3, [pc, #64]	; (8006be4 <xTaskResumeAll+0x12c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bae:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <xTaskResumeAll+0x134>)
 8006bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bbe:	f000 fd79 	bl	80076b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000478 	.word	0x20000478
 8006bd0:	20000450 	.word	0x20000450
 8006bd4:	20000410 	.word	0x20000410
 8006bd8:	20000458 	.word	0x20000458
 8006bdc:	20000354 	.word	0x20000354
 8006be0:	20000350 	.word	0x20000350
 8006be4:	20000464 	.word	0x20000464
 8006be8:	20000460 	.word	0x20000460
 8006bec:	e000ed04 	.word	0xe000ed04

08006bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bfa:	4b4e      	ldr	r3, [pc, #312]	; (8006d34 <xTaskIncrementTick+0x144>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 808e 	bne.w	8006d20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c04:	4b4c      	ldr	r3, [pc, #304]	; (8006d38 <xTaskIncrementTick+0x148>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c0c:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <xTaskIncrementTick+0x148>)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d120      	bne.n	8006c5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c18:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	603b      	str	r3, [r7, #0]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <xTaskIncrementTick+0x46>
 8006c38:	4b40      	ldr	r3, [pc, #256]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	4b40      	ldr	r3, [pc, #256]	; (8006d40 <xTaskIncrementTick+0x150>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3e      	ldr	r2, [pc, #248]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4a3e      	ldr	r2, [pc, #248]	; (8006d40 <xTaskIncrementTick+0x150>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <xTaskIncrementTick+0x154>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a3c      	ldr	r2, [pc, #240]	; (8006d44 <xTaskIncrementTick+0x154>)
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	f000 faa9 	bl	80071ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c5a:	4b3b      	ldr	r3, [pc, #236]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d348      	bcc.n	8006cf6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c64:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6e:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c74:	601a      	str	r2, [r3, #0]
					break;
 8006c76:	e03e      	b.n	8006cf6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c78:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d203      	bcs.n	8006c98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c90:	4a2d      	ldr	r2, [pc, #180]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c96:	e02e      	b.n	8006cf6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe ff8c 	bl	8005bba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	3318      	adds	r3, #24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe ff83 	bl	8005bba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	2201      	movs	r2, #1
 8006cba:	409a      	lsls	r2, r3
 8006cbc:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <xTaskIncrementTick+0x15c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <xTaskIncrementTick+0x15c>)
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <xTaskIncrementTick+0x160>)
 8006cd4:	441a      	add	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f7fe ff0f 	bl	8005b00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <xTaskIncrementTick+0x164>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d3b9      	bcc.n	8006c64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf4:	e7b6      	b.n	8006c64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cf6:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <xTaskIncrementTick+0x164>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfc:	4914      	ldr	r1, [pc, #80]	; (8006d50 <xTaskIncrementTick+0x160>)
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d901      	bls.n	8006d12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d12:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <xTaskIncrementTick+0x168>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e004      	b.n	8006d2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <xTaskIncrementTick+0x16c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a0d      	ldr	r2, [pc, #52]	; (8006d5c <xTaskIncrementTick+0x16c>)
 8006d28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d2a:	697b      	ldr	r3, [r7, #20]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000478 	.word	0x20000478
 8006d38:	20000454 	.word	0x20000454
 8006d3c:	20000408 	.word	0x20000408
 8006d40:	2000040c 	.word	0x2000040c
 8006d44:	20000468 	.word	0x20000468
 8006d48:	20000470 	.word	0x20000470
 8006d4c:	20000458 	.word	0x20000458
 8006d50:	20000354 	.word	0x20000354
 8006d54:	20000350 	.word	0x20000350
 8006d58:	20000464 	.word	0x20000464
 8006d5c:	20000460 	.word	0x20000460

08006d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d66:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <vTaskSwitchContext+0xac>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d6e:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <vTaskSwitchContext+0xb0>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d74:	e044      	b.n	8006e00 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006d76:	4b26      	ldr	r3, [pc, #152]	; (8006e10 <vTaskSwitchContext+0xb0>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7c:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <vTaskSwitchContext+0xb4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	fab3 f383 	clz	r3, r3
 8006d88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
 8006d8c:	f1c3 031f 	rsb	r3, r3, #31
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	4921      	ldr	r1, [pc, #132]	; (8006e18 <vTaskSwitchContext+0xb8>)
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <vTaskSwitchContext+0x5c>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	607b      	str	r3, [r7, #4]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <vTaskSwitchContext+0x5a>
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <vTaskSwitchContext+0xb8>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d104      	bne.n	8006dec <vTaskSwitchContext+0x8c>
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <vTaskSwitchContext+0xbc>)
 8006df4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <vTaskSwitchContext+0xbc>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	334c      	adds	r3, #76	; 0x4c
 8006dfc:	4a08      	ldr	r2, [pc, #32]	; (8006e20 <vTaskSwitchContext+0xc0>)
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000478 	.word	0x20000478
 8006e10:	20000464 	.word	0x20000464
 8006e14:	20000458 	.word	0x20000458
 8006e18:	20000354 	.word	0x20000354
 8006e1c:	20000350 	.word	0x20000350
 8006e20:	20000010 	.word	0x20000010

08006e24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	60fb      	str	r3, [r7, #12]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <vTaskPlaceOnEventList+0x44>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3318      	adds	r3, #24
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fe fe78 	bl	8005b48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e58:	2101      	movs	r1, #1
 8006e5a:	6838      	ldr	r0, [r7, #0]
 8006e5c:	f000 fa6a 	bl	8007334 <prvAddCurrentTaskToDelayedList>
}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000350 	.word	0x20000350

08006e6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60fb      	str	r3, [r7, #12]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3318      	adds	r3, #24
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fe8c 	bl	8005bba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea2:	4b1d      	ldr	r3, [pc, #116]	; (8006f18 <xTaskRemoveFromEventList+0xac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d11c      	bne.n	8006ee4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fe83 	bl	8005bba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	2201      	movs	r2, #1
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <xTaskRemoveFromEventList+0xb0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <xTaskRemoveFromEventList+0xb0>)
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <xTaskRemoveFromEventList+0xb4>)
 8006ed4:	441a      	add	r2, r3
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7fe fe0f 	bl	8005b00 <vListInsertEnd>
 8006ee2:	e005      	b.n	8006ef0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	3318      	adds	r3, #24
 8006ee8:	4619      	mov	r1, r3
 8006eea:	480e      	ldr	r0, [pc, #56]	; (8006f24 <xTaskRemoveFromEventList+0xb8>)
 8006eec:	f7fe fe08 	bl	8005b00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <xTaskRemoveFromEventList+0xbc>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d905      	bls.n	8006f0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006efe:	2301      	movs	r3, #1
 8006f00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <xTaskRemoveFromEventList+0xc0>)
 8006f04:	2201      	movs	r2, #1
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	e001      	b.n	8006f0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f0e:	697b      	ldr	r3, [r7, #20]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000478 	.word	0x20000478
 8006f1c:	20000458 	.word	0x20000458
 8006f20:	20000354 	.word	0x20000354
 8006f24:	20000410 	.word	0x20000410
 8006f28:	20000350 	.word	0x20000350
 8006f2c:	20000464 	.word	0x20000464

08006f30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f38:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <vTaskInternalSetTimeOutState+0x24>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <vTaskInternalSetTimeOutState+0x28>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	605a      	str	r2, [r3, #4]
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	20000468 	.word	0x20000468
 8006f58:	20000454 	.word	0x20000454

08006f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	613b      	str	r3, [r7, #16]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	60fb      	str	r3, [r7, #12]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f9e:	f000 fb59 	bl	8007654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <xTaskCheckForTimeOut+0xbc>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fba:	d102      	bne.n	8006fc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e023      	b.n	800700a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b15      	ldr	r3, [pc, #84]	; (800701c <xTaskCheckForTimeOut+0xc0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d007      	beq.n	8006fde <xTaskCheckForTimeOut+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	e015      	b.n	800700a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d20b      	bcs.n	8007000 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ff9b 	bl	8006f30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	e004      	b.n	800700a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007006:	2301      	movs	r3, #1
 8007008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800700a:	f000 fb53 	bl	80076b4 <vPortExitCritical>

	return xReturn;
 800700e:	69fb      	ldr	r3, [r7, #28]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000454 	.word	0x20000454
 800701c:	20000468 	.word	0x20000468

08007020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007024:	4b03      	ldr	r3, [pc, #12]	; (8007034 <vTaskMissedYield+0x14>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]
}
 800702a:	bf00      	nop
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	20000464 	.word	0x20000464

08007038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007040:	f000 f852 	bl	80070e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <prvIdleTask+0x28>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d9f9      	bls.n	8007040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <prvIdleTask+0x2c>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800705c:	e7f0      	b.n	8007040 <prvIdleTask+0x8>
 800705e:	bf00      	nop
 8007060:	20000354 	.word	0x20000354
 8007064:	e000ed04 	.word	0xe000ed04

08007068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706e:	2300      	movs	r3, #0
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	e00c      	b.n	800708e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <prvInitialiseTaskLists+0x60>)
 8007080:	4413      	add	r3, r2
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fd0f 	bl	8005aa6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3301      	adds	r3, #1
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b06      	cmp	r3, #6
 8007092:	d9ef      	bls.n	8007074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007094:	480d      	ldr	r0, [pc, #52]	; (80070cc <prvInitialiseTaskLists+0x64>)
 8007096:	f7fe fd06 	bl	8005aa6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800709a:	480d      	ldr	r0, [pc, #52]	; (80070d0 <prvInitialiseTaskLists+0x68>)
 800709c:	f7fe fd03 	bl	8005aa6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070a0:	480c      	ldr	r0, [pc, #48]	; (80070d4 <prvInitialiseTaskLists+0x6c>)
 80070a2:	f7fe fd00 	bl	8005aa6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070a6:	480c      	ldr	r0, [pc, #48]	; (80070d8 <prvInitialiseTaskLists+0x70>)
 80070a8:	f7fe fcfd 	bl	8005aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070ac:	480b      	ldr	r0, [pc, #44]	; (80070dc <prvInitialiseTaskLists+0x74>)
 80070ae:	f7fe fcfa 	bl	8005aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070b2:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <prvInitialiseTaskLists+0x78>)
 80070b4:	4a05      	ldr	r2, [pc, #20]	; (80070cc <prvInitialiseTaskLists+0x64>)
 80070b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <prvInitialiseTaskLists+0x7c>)
 80070ba:	4a05      	ldr	r2, [pc, #20]	; (80070d0 <prvInitialiseTaskLists+0x68>)
 80070bc:	601a      	str	r2, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000354 	.word	0x20000354
 80070cc:	200003e0 	.word	0x200003e0
 80070d0:	200003f4 	.word	0x200003f4
 80070d4:	20000410 	.word	0x20000410
 80070d8:	20000424 	.word	0x20000424
 80070dc:	2000043c 	.word	0x2000043c
 80070e0:	20000408 	.word	0x20000408
 80070e4:	2000040c 	.word	0x2000040c

080070e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ee:	e019      	b.n	8007124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070f0:	f000 fab0 	bl	8007654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f4:	4b10      	ldr	r3, [pc, #64]	; (8007138 <prvCheckTasksWaitingTermination+0x50>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fd5a 	bl	8005bba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007106:	4b0d      	ldr	r3, [pc, #52]	; (800713c <prvCheckTasksWaitingTermination+0x54>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3b01      	subs	r3, #1
 800710c:	4a0b      	ldr	r2, [pc, #44]	; (800713c <prvCheckTasksWaitingTermination+0x54>)
 800710e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <prvCheckTasksWaitingTermination+0x58>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3b01      	subs	r3, #1
 8007116:	4a0a      	ldr	r2, [pc, #40]	; (8007140 <prvCheckTasksWaitingTermination+0x58>)
 8007118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800711a:	f000 facb 	bl	80076b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f810 	bl	8007144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <prvCheckTasksWaitingTermination+0x58>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e1      	bne.n	80070f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000424 	.word	0x20000424
 800713c:	20000450 	.word	0x20000450
 8007140:	20000438 	.word	0x20000438

08007144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	334c      	adds	r3, #76	; 0x4c
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fe35 	bl	8007dc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d108      	bne.n	8007172 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fc63 	bl	8007a30 <vPortFree>
				vPortFree( pxTCB );
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc60 	bl	8007a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007170:	e018      	b.n	80071a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007178:	2b01      	cmp	r3, #1
 800717a:	d103      	bne.n	8007184 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fc57 	bl	8007a30 <vPortFree>
	}
 8007182:	e00f      	b.n	80071a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800718a:	2b02      	cmp	r3, #2
 800718c:	d00a      	beq.n	80071a4 <prvDeleteTCB+0x60>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	60fb      	str	r3, [r7, #12]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <prvDeleteTCB+0x5e>
	}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071b2:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <prvResetNextTaskUnblockTime+0x38>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <prvResetNextTaskUnblockTime+0x3c>)
 80071be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071c4:	e008      	b.n	80071d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <prvResetNextTaskUnblockTime+0x38>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	4a04      	ldr	r2, [pc, #16]	; (80071e8 <prvResetNextTaskUnblockTime+0x3c>)
 80071d6:	6013      	str	r3, [r2, #0]
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000408 	.word	0x20000408
 80071e8:	20000470 	.word	0x20000470

080071ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <xTaskGetSchedulerState+0x34>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d102      	bne.n	8007200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071fa:	2301      	movs	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	e008      	b.n	8007212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <xTaskGetSchedulerState+0x38>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d102      	bne.n	800720e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007208:	2302      	movs	r3, #2
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	e001      	b.n	8007212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800720e:	2300      	movs	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007212:	687b      	ldr	r3, [r7, #4]
	}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	2000045c 	.word	0x2000045c
 8007224:	20000478 	.word	0x20000478

08007228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d06e      	beq.n	800731c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800723e:	4b3a      	ldr	r3, [pc, #232]	; (8007328 <xTaskPriorityDisinherit+0x100>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	429a      	cmp	r2, r3
 8007246:	d00a      	beq.n	800725e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007280:	1e5a      	subs	r2, r3, #1
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728e:	429a      	cmp	r2, r3
 8007290:	d044      	beq.n	800731c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007296:	2b00      	cmp	r3, #0
 8007298:	d140      	bne.n	800731c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3304      	adds	r3, #4
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fc8b 	bl	8005bba <uxListRemove>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d115      	bne.n	80072d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	491f      	ldr	r1, [pc, #124]	; (800732c <xTaskPriorityDisinherit+0x104>)
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xTaskPriorityDisinherit+0xae>
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	2201      	movs	r2, #1
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	43da      	mvns	r2, r3
 80072cc:	4b18      	ldr	r3, [pc, #96]	; (8007330 <xTaskPriorityDisinherit+0x108>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4013      	ands	r3, r2
 80072d2:	4a17      	ldr	r2, [pc, #92]	; (8007330 <xTaskPriorityDisinherit+0x108>)
 80072d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	f1c3 0207 	rsb	r2, r3, #7
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	2201      	movs	r2, #1
 80072f0:	409a      	lsls	r2, r3
 80072f2:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <xTaskPriorityDisinherit+0x108>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	4a0d      	ldr	r2, [pc, #52]	; (8007330 <xTaskPriorityDisinherit+0x108>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4a08      	ldr	r2, [pc, #32]	; (800732c <xTaskPriorityDisinherit+0x104>)
 800730a:	441a      	add	r2, r3
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	3304      	adds	r3, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7fe fbf4 	bl	8005b00 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800731c:	697b      	ldr	r3, [r7, #20]
	}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000350 	.word	0x20000350
 800732c:	20000354 	.word	0x20000354
 8007330:	20000458 	.word	0x20000458

08007334 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800733e:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007344:	4b28      	ldr	r3, [pc, #160]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fc35 	bl	8005bba <uxListRemove>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007356:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	2201      	movs	r2, #1
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43da      	mvns	r2, r3
 8007364:	4b21      	ldr	r3, [pc, #132]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4013      	ands	r3, r2
 800736a:	4a20      	ldr	r2, [pc, #128]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800736c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007374:	d10a      	bne.n	800738c <prvAddCurrentTaskToDelayedList+0x58>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737c:	4b1a      	ldr	r3, [pc, #104]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	481a      	ldr	r0, [pc, #104]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007386:	f7fe fbbb 	bl	8005b00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800738a:	e026      	b.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007394:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d209      	bcs.n	80073b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a4:	4b13      	ldr	r3, [pc, #76]	; (80073f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7fe fbc9 	bl	8005b48 <vListInsert>
}
 80073b6:	e010      	b.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b8:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fe fbbf 	bl	8005b48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d202      	bcs.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073d4:	4a09      	ldr	r2, [pc, #36]	; (80073fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6013      	str	r3, [r2, #0]
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000454 	.word	0x20000454
 80073e8:	20000350 	.word	0x20000350
 80073ec:	20000458 	.word	0x20000458
 80073f0:	2000043c 	.word	0x2000043c
 80073f4:	2000040c 	.word	0x2000040c
 80073f8:	20000408 	.word	0x20000408
 80073fc:	20000470 	.word	0x20000470

08007400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3b04      	subs	r3, #4
 8007410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b04      	subs	r3, #4
 800741e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f023 0201 	bic.w	r2, r3, #1
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b04      	subs	r3, #4
 800742e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007430:	4a0c      	ldr	r2, [pc, #48]	; (8007464 <pxPortInitialiseStack+0x64>)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b14      	subs	r3, #20
 800743a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b04      	subs	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f06f 0202 	mvn.w	r2, #2
 800744e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3b20      	subs	r3, #32
 8007454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	08007469 	.word	0x08007469

08007468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007472:	4b12      	ldr	r3, [pc, #72]	; (80074bc <prvTaskExitError+0x54>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800747a:	d00a      	beq.n	8007492 <prvTaskExitError+0x2a>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	60fb      	str	r3, [r7, #12]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <prvTaskExitError+0x28>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60bb      	str	r3, [r7, #8]
}
 80074a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074a6:	bf00      	nop
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0fc      	beq.n	80074a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074ae:	bf00      	nop
 80074b0:	bf00      	nop
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	4770      	bx	lr
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst2>:
 80074e0:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074e8:	4808      	ldr	r0, [pc, #32]	; (800750c <prvPortStartFirstTask+0x24>)
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f380 8808 	msr	MSP, r0
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8814 	msr	CONTROL, r0
 80074fa:	b662      	cpsie	i
 80074fc:	b661      	cpsie	f
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	df00      	svc	0
 8007508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800750a:	bf00      	nop
 800750c:	e000ed08 	.word	0xe000ed08

08007510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007516:	4b46      	ldr	r3, [pc, #280]	; (8007630 <xPortStartScheduler+0x120>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a46      	ldr	r2, [pc, #280]	; (8007634 <xPortStartScheduler+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10a      	bne.n	8007536 <xPortStartScheduler+0x26>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	613b      	str	r3, [r7, #16]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007536:	4b3e      	ldr	r3, [pc, #248]	; (8007630 <xPortStartScheduler+0x120>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a3f      	ldr	r2, [pc, #252]	; (8007638 <xPortStartScheduler+0x128>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10a      	bne.n	8007556 <xPortStartScheduler+0x46>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	60fb      	str	r3, [r7, #12]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007556:	4b39      	ldr	r3, [pc, #228]	; (800763c <xPortStartScheduler+0x12c>)
 8007558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	22ff      	movs	r2, #255	; 0xff
 8007566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007578:	b2da      	uxtb	r2, r3
 800757a:	4b31      	ldr	r3, [pc, #196]	; (8007640 <xPortStartScheduler+0x130>)
 800757c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <xPortStartScheduler+0x134>)
 8007580:	2207      	movs	r2, #7
 8007582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007584:	e009      	b.n	800759a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007586:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <xPortStartScheduler+0x134>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a2d      	ldr	r2, [pc, #180]	; (8007644 <xPortStartScheduler+0x134>)
 800758e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	b2db      	uxtb	r3, r3
 8007598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a2:	2b80      	cmp	r3, #128	; 0x80
 80075a4:	d0ef      	beq.n	8007586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075a6:	4b27      	ldr	r3, [pc, #156]	; (8007644 <xPortStartScheduler+0x134>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f1c3 0307 	rsb	r3, r3, #7
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d00a      	beq.n	80075c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60bb      	str	r3, [r7, #8]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075c8:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <xPortStartScheduler+0x134>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <xPortStartScheduler+0x134>)
 80075d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075d2:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <xPortStartScheduler+0x134>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075da:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <xPortStartScheduler+0x134>)
 80075dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <xPortStartScheduler+0x138>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a17      	ldr	r2, [pc, #92]	; (8007648 <xPortStartScheduler+0x138>)
 80075ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075f2:	4b15      	ldr	r3, [pc, #84]	; (8007648 <xPortStartScheduler+0x138>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a14      	ldr	r2, [pc, #80]	; (8007648 <xPortStartScheduler+0x138>)
 80075f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075fe:	f000 f8dd 	bl	80077bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <xPortStartScheduler+0x13c>)
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007608:	f000 f8fc 	bl	8007804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <xPortStartScheduler+0x140>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <xPortStartScheduler+0x140>)
 8007612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007618:	f7ff ff66 	bl	80074e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800761c:	f7ff fba0 	bl	8006d60 <vTaskSwitchContext>
	prvTaskExitError();
 8007620:	f7ff ff22 	bl	8007468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	e000ed00 	.word	0xe000ed00
 8007634:	410fc271 	.word	0x410fc271
 8007638:	410fc270 	.word	0x410fc270
 800763c:	e000e400 	.word	0xe000e400
 8007640:	2000047c 	.word	0x2000047c
 8007644:	20000480 	.word	0x20000480
 8007648:	e000ed20 	.word	0xe000ed20
 800764c:	2000000c 	.word	0x2000000c
 8007650:	e000ef34 	.word	0xe000ef34

08007654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	607b      	str	r3, [r7, #4]
}
 800766c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800766e:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <vPortEnterCritical+0x58>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	4a0d      	ldr	r2, [pc, #52]	; (80076ac <vPortEnterCritical+0x58>)
 8007676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <vPortEnterCritical+0x58>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10f      	bne.n	80076a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <vPortEnterCritical+0x5c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	603b      	str	r3, [r7, #0]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <vPortEnterCritical+0x4a>
	}
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	2000000c 	.word	0x2000000c
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <vPortExitCritical+0x50>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <vPortExitCritical+0x24>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	607b      	str	r3, [r7, #4]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <vPortExitCritical+0x50>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3b01      	subs	r3, #1
 80076de:	4a09      	ldr	r2, [pc, #36]	; (8007704 <vPortExitCritical+0x50>)
 80076e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <vPortExitCritical+0x50>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <vPortExitCritical+0x42>
 80076ea:	2300      	movs	r3, #0
 80076ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f383 8811 	msr	BASEPRI, r3
}
 80076f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	2000000c 	.word	0x2000000c
	...

08007710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007710:	f3ef 8009 	mrs	r0, PSP
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <pxCurrentTCBConst>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f01e 0f10 	tst.w	lr, #16
 8007720:	bf08      	it	eq
 8007722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007734:	f380 8811 	msr	BASEPRI, r0
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f7ff fb0e 	bl	8006d60 <vTaskSwitchContext>
 8007744:	f04f 0000 	mov.w	r0, #0
 8007748:	f380 8811 	msr	BASEPRI, r0
 800774c:	bc09      	pop	{r0, r3}
 800774e:	6819      	ldr	r1, [r3, #0]
 8007750:	6808      	ldr	r0, [r1, #0]
 8007752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007756:	f01e 0f10 	tst.w	lr, #16
 800775a:	bf08      	it	eq
 800775c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007760:	f380 8809 	msr	PSP, r0
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst>:
 8007770:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007792:	f7ff fa2d 	bl	8006bf0 <xTaskIncrementTick>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <SysTick_Handler+0x40>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	2300      	movs	r3, #0
 80077a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f383 8811 	msr	BASEPRI, r3
}
 80077ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <vPortSetupTimerInterrupt+0x38>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077cc:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <vPortSetupTimerInterrupt+0x3c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <vPortSetupTimerInterrupt+0x40>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	099b      	lsrs	r3, r3, #6
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <vPortSetupTimerInterrupt+0x44>)
 80077da:	3b01      	subs	r3, #1
 80077dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077de:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000e010 	.word	0xe000e010
 80077f4:	e000e018 	.word	0xe000e018
 80077f8:	20000000 	.word	0x20000000
 80077fc:	10624dd3 	.word	0x10624dd3
 8007800:	e000e014 	.word	0xe000e014

08007804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007814 <vPortEnableVFP+0x10>
 8007808:	6801      	ldr	r1, [r0, #0]
 800780a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800780e:	6001      	str	r1, [r0, #0]
 8007810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007812:	bf00      	nop
 8007814:	e000ed88 	.word	0xe000ed88

08007818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800781e:	f3ef 8305 	mrs	r3, IPSR
 8007822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d914      	bls.n	8007854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800782a:	4a17      	ldr	r2, [pc, #92]	; (8007888 <vPortValidateInterruptPriority+0x70>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007834:	4b15      	ldr	r3, [pc, #84]	; (800788c <vPortValidateInterruptPriority+0x74>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	7afa      	ldrb	r2, [r7, #11]
 800783a:	429a      	cmp	r2, r3
 800783c:	d20a      	bcs.n	8007854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	607b      	str	r3, [r7, #4]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <vPortValidateInterruptPriority+0x78>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800785c:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <vPortValidateInterruptPriority+0x7c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d90a      	bls.n	800787a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	603b      	str	r3, [r7, #0]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <vPortValidateInterruptPriority+0x60>
	}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	e000e3f0 	.word	0xe000e3f0
 800788c:	2000047c 	.word	0x2000047c
 8007890:	e000ed0c 	.word	0xe000ed0c
 8007894:	20000480 	.word	0x20000480

08007898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078a4:	f7ff f8fa 	bl	8006a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078a8:	4b5b      	ldr	r3, [pc, #364]	; (8007a18 <pvPortMalloc+0x180>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078b0:	f000 f920 	bl	8007af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b4:	4b59      	ldr	r3, [pc, #356]	; (8007a1c <pvPortMalloc+0x184>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 8093 	bne.w	80079e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01d      	beq.n	8007904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078c8:	2208      	movs	r2, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d014      	beq.n	8007904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f023 0307 	bic.w	r3, r3, #7
 80078e0:	3308      	adds	r3, #8
 80078e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <pvPortMalloc+0x6c>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	617b      	str	r3, [r7, #20]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d06e      	beq.n	80079e8 <pvPortMalloc+0x150>
 800790a:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <pvPortMalloc+0x188>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d869      	bhi.n	80079e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007914:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <pvPortMalloc+0x18c>)
 8007916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007918:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <pvPortMalloc+0x18c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800791e:	e004      	b.n	800792a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d903      	bls.n	800793c <pvPortMalloc+0xa4>
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f1      	bne.n	8007920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800793c:	4b36      	ldr	r3, [pc, #216]	; (8007a18 <pvPortMalloc+0x180>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007942:	429a      	cmp	r2, r3
 8007944:	d050      	beq.n	80079e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2208      	movs	r2, #8
 800794c:	4413      	add	r3, r2
 800794e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	2308      	movs	r3, #8
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	429a      	cmp	r2, r3
 8007966:	d91f      	bls.n	80079a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <pvPortMalloc+0xf8>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	613b      	str	r3, [r7, #16]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079a2:	69b8      	ldr	r0, [r7, #24]
 80079a4:	f000 f908 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079a8:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <pvPortMalloc+0x188>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <pvPortMalloc+0x188>)
 80079b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <pvPortMalloc+0x188>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <pvPortMalloc+0x190>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d203      	bcs.n	80079ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079c2:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <pvPortMalloc+0x188>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <pvPortMalloc+0x190>)
 80079c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <pvPortMalloc+0x184>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <pvPortMalloc+0x194>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	4a11      	ldr	r2, [pc, #68]	; (8007a2c <pvPortMalloc+0x194>)
 80079e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079e8:	f7ff f866 	bl	8006ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <pvPortMalloc+0x174>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <pvPortMalloc+0x172>
	return pvReturn;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3728      	adds	r7, #40	; 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001044 	.word	0x20001044
 8007a1c:	20001058 	.word	0x20001058
 8007a20:	20001048 	.word	0x20001048
 8007a24:	2000103c 	.word	0x2000103c
 8007a28:	2000104c 	.word	0x2000104c
 8007a2c:	20001050 	.word	0x20001050

08007a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d04d      	beq.n	8007ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a42:	2308      	movs	r3, #8
 8007a44:	425b      	negs	r3, r3
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <vPortFree+0xb8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <vPortFree+0x44>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60fb      	str	r3, [r7, #12]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <vPortFree+0x62>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	60bb      	str	r3, [r7, #8]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <vPortFree+0xb8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01e      	beq.n	8007ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11a      	bne.n	8007ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <vPortFree+0xb8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	401a      	ands	r2, r3
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab8:	f7fe fff0 	bl	8006a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <vPortFree+0xbc>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4a09      	ldr	r2, [pc, #36]	; (8007aec <vPortFree+0xbc>)
 8007ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aca:	6938      	ldr	r0, [r7, #16]
 8007acc:	f000 f874 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <vPortFree+0xc0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vPortFree+0xc0>)
 8007ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ada:	f7fe ffed 	bl	8006ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20001058 	.word	0x20001058
 8007aec:	20001048 	.word	0x20001048
 8007af0:	20001054 	.word	0x20001054

08007af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007afa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <prvHeapInit+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <prvHeapInit+0xac>)
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <prvHeapInit+0xb8>)
 8007b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <prvHeapInit+0xbc>)
 8007b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <prvHeapInit+0xc0>)
 8007b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20000484 	.word	0x20000484
 8007ba4:	2000103c 	.word	0x2000103c
 8007ba8:	20001044 	.word	0x20001044
 8007bac:	2000104c 	.word	0x2000104c
 8007bb0:	20001048 	.word	0x20001048
 8007bb4:	20001058 	.word	0x20001058

08007bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e002      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x14>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d8f7      	bhi.n	8007bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d118      	bne.n	8007c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00d      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e008      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d002      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	2000103c 	.word	0x2000103c
 8007c68:	20001044 	.word	0x20001044

08007c6c <__errno>:
 8007c6c:	4b01      	ldr	r3, [pc, #4]	; (8007c74 <__errno+0x8>)
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000010 	.word	0x20000010

08007c78 <__libc_init_array>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4d0d      	ldr	r5, [pc, #52]	; (8007cb0 <__libc_init_array+0x38>)
 8007c7c:	4c0d      	ldr	r4, [pc, #52]	; (8007cb4 <__libc_init_array+0x3c>)
 8007c7e:	1b64      	subs	r4, r4, r5
 8007c80:	10a4      	asrs	r4, r4, #2
 8007c82:	2600      	movs	r6, #0
 8007c84:	42a6      	cmp	r6, r4
 8007c86:	d109      	bne.n	8007c9c <__libc_init_array+0x24>
 8007c88:	4d0b      	ldr	r5, [pc, #44]	; (8007cb8 <__libc_init_array+0x40>)
 8007c8a:	4c0c      	ldr	r4, [pc, #48]	; (8007cbc <__libc_init_array+0x44>)
 8007c8c:	f000 fcb8 	bl	8008600 <_init>
 8007c90:	1b64      	subs	r4, r4, r5
 8007c92:	10a4      	asrs	r4, r4, #2
 8007c94:	2600      	movs	r6, #0
 8007c96:	42a6      	cmp	r6, r4
 8007c98:	d105      	bne.n	8007ca6 <__libc_init_array+0x2e>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca0:	4798      	blx	r3
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7ee      	b.n	8007c84 <__libc_init_array+0xc>
 8007ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007caa:	4798      	blx	r3
 8007cac:	3601      	adds	r6, #1
 8007cae:	e7f2      	b.n	8007c96 <__libc_init_array+0x1e>
 8007cb0:	0800873c 	.word	0x0800873c
 8007cb4:	0800873c 	.word	0x0800873c
 8007cb8:	0800873c 	.word	0x0800873c
 8007cbc:	08008740 	.word	0x08008740

08007cc0 <__retarget_lock_acquire_recursive>:
 8007cc0:	4770      	bx	lr

08007cc2 <__retarget_lock_release_recursive>:
 8007cc2:	4770      	bx	lr

08007cc4 <memcpy>:
 8007cc4:	440a      	add	r2, r1
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ccc:	d100      	bne.n	8007cd0 <memcpy+0xc>
 8007cce:	4770      	bx	lr
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	d1f9      	bne.n	8007cd2 <memcpy+0xe>
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <memset>:
 8007ce0:	4402      	add	r2, r0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d100      	bne.n	8007cea <memset+0xa>
 8007ce8:	4770      	bx	lr
 8007cea:	f803 1b01 	strb.w	r1, [r3], #1
 8007cee:	e7f9      	b.n	8007ce4 <memset+0x4>

08007cf0 <_malloc_r>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	1ccd      	adds	r5, r1, #3
 8007cf4:	f025 0503 	bic.w	r5, r5, #3
 8007cf8:	3508      	adds	r5, #8
 8007cfa:	2d0c      	cmp	r5, #12
 8007cfc:	bf38      	it	cc
 8007cfe:	250c      	movcc	r5, #12
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	4606      	mov	r6, r0
 8007d04:	db01      	blt.n	8007d0a <_malloc_r+0x1a>
 8007d06:	42a9      	cmp	r1, r5
 8007d08:	d903      	bls.n	8007d12 <_malloc_r+0x22>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	2000      	movs	r0, #0
 8007d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d12:	f000 f8e1 	bl	8007ed8 <__malloc_lock>
 8007d16:	4921      	ldr	r1, [pc, #132]	; (8007d9c <_malloc_r+0xac>)
 8007d18:	680a      	ldr	r2, [r1, #0]
 8007d1a:	4614      	mov	r4, r2
 8007d1c:	b99c      	cbnz	r4, 8007d46 <_malloc_r+0x56>
 8007d1e:	4f20      	ldr	r7, [pc, #128]	; (8007da0 <_malloc_r+0xb0>)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	b923      	cbnz	r3, 8007d2e <_malloc_r+0x3e>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 f8a6 	bl	8007e78 <_sbrk_r>
 8007d2c:	6038      	str	r0, [r7, #0]
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 f8a1 	bl	8007e78 <_sbrk_r>
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d123      	bne.n	8007d82 <_malloc_r+0x92>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	6033      	str	r3, [r6, #0]
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 f8d0 	bl	8007ee4 <__malloc_unlock>
 8007d44:	e7e3      	b.n	8007d0e <_malloc_r+0x1e>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	1b5b      	subs	r3, r3, r5
 8007d4a:	d417      	bmi.n	8007d7c <_malloc_r+0x8c>
 8007d4c:	2b0b      	cmp	r3, #11
 8007d4e:	d903      	bls.n	8007d58 <_malloc_r+0x68>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	441c      	add	r4, r3
 8007d54:	6025      	str	r5, [r4, #0]
 8007d56:	e004      	b.n	8007d62 <_malloc_r+0x72>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	42a2      	cmp	r2, r4
 8007d5c:	bf0c      	ite	eq
 8007d5e:	600b      	streq	r3, [r1, #0]
 8007d60:	6053      	strne	r3, [r2, #4]
 8007d62:	4630      	mov	r0, r6
 8007d64:	f000 f8be 	bl	8007ee4 <__malloc_unlock>
 8007d68:	f104 000b 	add.w	r0, r4, #11
 8007d6c:	1d23      	adds	r3, r4, #4
 8007d6e:	f020 0007 	bic.w	r0, r0, #7
 8007d72:	1ac2      	subs	r2, r0, r3
 8007d74:	d0cc      	beq.n	8007d10 <_malloc_r+0x20>
 8007d76:	1a1b      	subs	r3, r3, r0
 8007d78:	50a3      	str	r3, [r4, r2]
 8007d7a:	e7c9      	b.n	8007d10 <_malloc_r+0x20>
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	6864      	ldr	r4, [r4, #4]
 8007d80:	e7cc      	b.n	8007d1c <_malloc_r+0x2c>
 8007d82:	1cc4      	adds	r4, r0, #3
 8007d84:	f024 0403 	bic.w	r4, r4, #3
 8007d88:	42a0      	cmp	r0, r4
 8007d8a:	d0e3      	beq.n	8007d54 <_malloc_r+0x64>
 8007d8c:	1a21      	subs	r1, r4, r0
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f000 f872 	bl	8007e78 <_sbrk_r>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d1dd      	bne.n	8007d54 <_malloc_r+0x64>
 8007d98:	e7cf      	b.n	8007d3a <_malloc_r+0x4a>
 8007d9a:	bf00      	nop
 8007d9c:	2000105c 	.word	0x2000105c
 8007da0:	20001060 	.word	0x20001060

08007da4 <cleanup_glue>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	460c      	mov	r4, r1
 8007da8:	6809      	ldr	r1, [r1, #0]
 8007daa:	4605      	mov	r5, r0
 8007dac:	b109      	cbz	r1, 8007db2 <cleanup_glue+0xe>
 8007dae:	f7ff fff9 	bl	8007da4 <cleanup_glue>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dba:	f000 b899 	b.w	8007ef0 <_free_r>
	...

08007dc0 <_reclaim_reent>:
 8007dc0:	4b2c      	ldr	r3, [pc, #176]	; (8007e74 <_reclaim_reent+0xb4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4283      	cmp	r3, r0
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	4604      	mov	r4, r0
 8007dca:	d051      	beq.n	8007e70 <_reclaim_reent+0xb0>
 8007dcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007dce:	b143      	cbz	r3, 8007de2 <_reclaim_reent+0x22>
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d14a      	bne.n	8007e6c <_reclaim_reent+0xac>
 8007dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd8:	6819      	ldr	r1, [r3, #0]
 8007dda:	b111      	cbz	r1, 8007de2 <_reclaim_reent+0x22>
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 f887 	bl	8007ef0 <_free_r>
 8007de2:	6961      	ldr	r1, [r4, #20]
 8007de4:	b111      	cbz	r1, 8007dec <_reclaim_reent+0x2c>
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 f882 	bl	8007ef0 <_free_r>
 8007dec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007dee:	b111      	cbz	r1, 8007df6 <_reclaim_reent+0x36>
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 f87d 	bl	8007ef0 <_free_r>
 8007df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007df8:	b111      	cbz	r1, 8007e00 <_reclaim_reent+0x40>
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 f878 	bl	8007ef0 <_free_r>
 8007e00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e02:	b111      	cbz	r1, 8007e0a <_reclaim_reent+0x4a>
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 f873 	bl	8007ef0 <_free_r>
 8007e0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e0c:	b111      	cbz	r1, 8007e14 <_reclaim_reent+0x54>
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f86e 	bl	8007ef0 <_free_r>
 8007e14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e16:	b111      	cbz	r1, 8007e1e <_reclaim_reent+0x5e>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 f869 	bl	8007ef0 <_free_r>
 8007e1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e20:	b111      	cbz	r1, 8007e28 <_reclaim_reent+0x68>
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f864 	bl	8007ef0 <_free_r>
 8007e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e2a:	b111      	cbz	r1, 8007e32 <_reclaim_reent+0x72>
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 f85f 	bl	8007ef0 <_free_r>
 8007e32:	69a3      	ldr	r3, [r4, #24]
 8007e34:	b1e3      	cbz	r3, 8007e70 <_reclaim_reent+0xb0>
 8007e36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4798      	blx	r3
 8007e3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e3e:	b1b9      	cbz	r1, 8007e70 <_reclaim_reent+0xb0>
 8007e40:	4620      	mov	r0, r4
 8007e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e46:	f7ff bfad 	b.w	8007da4 <cleanup_glue>
 8007e4a:	5949      	ldr	r1, [r1, r5]
 8007e4c:	b941      	cbnz	r1, 8007e60 <_reclaim_reent+0xa0>
 8007e4e:	3504      	adds	r5, #4
 8007e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e52:	2d80      	cmp	r5, #128	; 0x80
 8007e54:	68d9      	ldr	r1, [r3, #12]
 8007e56:	d1f8      	bne.n	8007e4a <_reclaim_reent+0x8a>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 f849 	bl	8007ef0 <_free_r>
 8007e5e:	e7ba      	b.n	8007dd6 <_reclaim_reent+0x16>
 8007e60:	680e      	ldr	r6, [r1, #0]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 f844 	bl	8007ef0 <_free_r>
 8007e68:	4631      	mov	r1, r6
 8007e6a:	e7ef      	b.n	8007e4c <_reclaim_reent+0x8c>
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	e7ef      	b.n	8007e50 <_reclaim_reent+0x90>
 8007e70:	bd70      	pop	{r4, r5, r6, pc}
 8007e72:	bf00      	nop
 8007e74:	20000010 	.word	0x20000010

08007e78 <_sbrk_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d06      	ldr	r5, [pc, #24]	; (8007e94 <_sbrk_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	602b      	str	r3, [r5, #0]
 8007e84:	f7f9 f9d6 	bl	8001234 <_sbrk>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_sbrk_r+0x1a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_sbrk_r+0x1a>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20001184 	.word	0x20001184

08007e98 <siprintf>:
 8007e98:	b40e      	push	{r1, r2, r3}
 8007e9a:	b500      	push	{lr}
 8007e9c:	b09c      	sub	sp, #112	; 0x70
 8007e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8007ea0:	9002      	str	r0, [sp, #8]
 8007ea2:	9006      	str	r0, [sp, #24]
 8007ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ea8:	4809      	ldr	r0, [pc, #36]	; (8007ed0 <siprintf+0x38>)
 8007eaa:	9107      	str	r1, [sp, #28]
 8007eac:	9104      	str	r1, [sp, #16]
 8007eae:	4909      	ldr	r1, [pc, #36]	; (8007ed4 <siprintf+0x3c>)
 8007eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb4:	9105      	str	r1, [sp, #20]
 8007eb6:	6800      	ldr	r0, [r0, #0]
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	a902      	add	r1, sp, #8
 8007ebc:	f000 f8c4 	bl	8008048 <_svfiprintf_r>
 8007ec0:	9b02      	ldr	r3, [sp, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	b01c      	add	sp, #112	; 0x70
 8007ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ecc:	b003      	add	sp, #12
 8007ece:	4770      	bx	lr
 8007ed0:	20000010 	.word	0x20000010
 8007ed4:	ffff0208 	.word	0xffff0208

08007ed8 <__malloc_lock>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__malloc_lock+0x8>)
 8007eda:	f7ff bef1 	b.w	8007cc0 <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	2000117c 	.word	0x2000117c

08007ee4 <__malloc_unlock>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__malloc_unlock+0x8>)
 8007ee6:	f7ff beec 	b.w	8007cc2 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	2000117c 	.word	0x2000117c

08007ef0 <_free_r>:
 8007ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ef2:	2900      	cmp	r1, #0
 8007ef4:	d048      	beq.n	8007f88 <_free_r+0x98>
 8007ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007efa:	9001      	str	r0, [sp, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f1a1 0404 	sub.w	r4, r1, #4
 8007f02:	bfb8      	it	lt
 8007f04:	18e4      	addlt	r4, r4, r3
 8007f06:	f7ff ffe7 	bl	8007ed8 <__malloc_lock>
 8007f0a:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <_free_r+0x9c>)
 8007f0c:	9801      	ldr	r0, [sp, #4]
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	4615      	mov	r5, r2
 8007f12:	b933      	cbnz	r3, 8007f22 <_free_r+0x32>
 8007f14:	6063      	str	r3, [r4, #4]
 8007f16:	6014      	str	r4, [r2, #0]
 8007f18:	b003      	add	sp, #12
 8007f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f1e:	f7ff bfe1 	b.w	8007ee4 <__malloc_unlock>
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	d90b      	bls.n	8007f3e <_free_r+0x4e>
 8007f26:	6821      	ldr	r1, [r4, #0]
 8007f28:	1862      	adds	r2, r4, r1
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	bf04      	itt	eq
 8007f2e:	681a      	ldreq	r2, [r3, #0]
 8007f30:	685b      	ldreq	r3, [r3, #4]
 8007f32:	6063      	str	r3, [r4, #4]
 8007f34:	bf04      	itt	eq
 8007f36:	1852      	addeq	r2, r2, r1
 8007f38:	6022      	streq	r2, [r4, #0]
 8007f3a:	602c      	str	r4, [r5, #0]
 8007f3c:	e7ec      	b.n	8007f18 <_free_r+0x28>
 8007f3e:	461a      	mov	r2, r3
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	b10b      	cbz	r3, 8007f48 <_free_r+0x58>
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	d9fa      	bls.n	8007f3e <_free_r+0x4e>
 8007f48:	6811      	ldr	r1, [r2, #0]
 8007f4a:	1855      	adds	r5, r2, r1
 8007f4c:	42a5      	cmp	r5, r4
 8007f4e:	d10b      	bne.n	8007f68 <_free_r+0x78>
 8007f50:	6824      	ldr	r4, [r4, #0]
 8007f52:	4421      	add	r1, r4
 8007f54:	1854      	adds	r4, r2, r1
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	6011      	str	r1, [r2, #0]
 8007f5a:	d1dd      	bne.n	8007f18 <_free_r+0x28>
 8007f5c:	681c      	ldr	r4, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	6053      	str	r3, [r2, #4]
 8007f62:	4421      	add	r1, r4
 8007f64:	6011      	str	r1, [r2, #0]
 8007f66:	e7d7      	b.n	8007f18 <_free_r+0x28>
 8007f68:	d902      	bls.n	8007f70 <_free_r+0x80>
 8007f6a:	230c      	movs	r3, #12
 8007f6c:	6003      	str	r3, [r0, #0]
 8007f6e:	e7d3      	b.n	8007f18 <_free_r+0x28>
 8007f70:	6825      	ldr	r5, [r4, #0]
 8007f72:	1961      	adds	r1, r4, r5
 8007f74:	428b      	cmp	r3, r1
 8007f76:	bf04      	itt	eq
 8007f78:	6819      	ldreq	r1, [r3, #0]
 8007f7a:	685b      	ldreq	r3, [r3, #4]
 8007f7c:	6063      	str	r3, [r4, #4]
 8007f7e:	bf04      	itt	eq
 8007f80:	1949      	addeq	r1, r1, r5
 8007f82:	6021      	streq	r1, [r4, #0]
 8007f84:	6054      	str	r4, [r2, #4]
 8007f86:	e7c7      	b.n	8007f18 <_free_r+0x28>
 8007f88:	b003      	add	sp, #12
 8007f8a:	bd30      	pop	{r4, r5, pc}
 8007f8c:	2000105c 	.word	0x2000105c

08007f90 <__ssputs_r>:
 8007f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	688e      	ldr	r6, [r1, #8]
 8007f96:	429e      	cmp	r6, r3
 8007f98:	4682      	mov	sl, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	4690      	mov	r8, r2
 8007f9e:	461f      	mov	r7, r3
 8007fa0:	d838      	bhi.n	8008014 <__ssputs_r+0x84>
 8007fa2:	898a      	ldrh	r2, [r1, #12]
 8007fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fa8:	d032      	beq.n	8008010 <__ssputs_r+0x80>
 8007faa:	6825      	ldr	r5, [r4, #0]
 8007fac:	6909      	ldr	r1, [r1, #16]
 8007fae:	eba5 0901 	sub.w	r9, r5, r1
 8007fb2:	6965      	ldr	r5, [r4, #20]
 8007fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	444b      	add	r3, r9
 8007fc0:	106d      	asrs	r5, r5, #1
 8007fc2:	429d      	cmp	r5, r3
 8007fc4:	bf38      	it	cc
 8007fc6:	461d      	movcc	r5, r3
 8007fc8:	0553      	lsls	r3, r2, #21
 8007fca:	d531      	bpl.n	8008030 <__ssputs_r+0xa0>
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f7ff fe8f 	bl	8007cf0 <_malloc_r>
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	b950      	cbnz	r0, 8007fec <__ssputs_r+0x5c>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	f8ca 3000 	str.w	r3, [sl]
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fec:	6921      	ldr	r1, [r4, #16]
 8007fee:	464a      	mov	r2, r9
 8007ff0:	f7ff fe68 	bl	8007cc4 <memcpy>
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffe:	81a3      	strh	r3, [r4, #12]
 8008000:	6126      	str	r6, [r4, #16]
 8008002:	6165      	str	r5, [r4, #20]
 8008004:	444e      	add	r6, r9
 8008006:	eba5 0509 	sub.w	r5, r5, r9
 800800a:	6026      	str	r6, [r4, #0]
 800800c:	60a5      	str	r5, [r4, #8]
 800800e:	463e      	mov	r6, r7
 8008010:	42be      	cmp	r6, r7
 8008012:	d900      	bls.n	8008016 <__ssputs_r+0x86>
 8008014:	463e      	mov	r6, r7
 8008016:	4632      	mov	r2, r6
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	4641      	mov	r1, r8
 800801c:	f000 faa8 	bl	8008570 <memmove>
 8008020:	68a3      	ldr	r3, [r4, #8]
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	1b9b      	subs	r3, r3, r6
 8008026:	4432      	add	r2, r6
 8008028:	60a3      	str	r3, [r4, #8]
 800802a:	6022      	str	r2, [r4, #0]
 800802c:	2000      	movs	r0, #0
 800802e:	e7db      	b.n	8007fe8 <__ssputs_r+0x58>
 8008030:	462a      	mov	r2, r5
 8008032:	f000 fab7 	bl	80085a4 <_realloc_r>
 8008036:	4606      	mov	r6, r0
 8008038:	2800      	cmp	r0, #0
 800803a:	d1e1      	bne.n	8008000 <__ssputs_r+0x70>
 800803c:	6921      	ldr	r1, [r4, #16]
 800803e:	4650      	mov	r0, sl
 8008040:	f7ff ff56 	bl	8007ef0 <_free_r>
 8008044:	e7c7      	b.n	8007fd6 <__ssputs_r+0x46>
	...

08008048 <_svfiprintf_r>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	4698      	mov	r8, r3
 800804e:	898b      	ldrh	r3, [r1, #12]
 8008050:	061b      	lsls	r3, r3, #24
 8008052:	b09d      	sub	sp, #116	; 0x74
 8008054:	4607      	mov	r7, r0
 8008056:	460d      	mov	r5, r1
 8008058:	4614      	mov	r4, r2
 800805a:	d50e      	bpl.n	800807a <_svfiprintf_r+0x32>
 800805c:	690b      	ldr	r3, [r1, #16]
 800805e:	b963      	cbnz	r3, 800807a <_svfiprintf_r+0x32>
 8008060:	2140      	movs	r1, #64	; 0x40
 8008062:	f7ff fe45 	bl	8007cf0 <_malloc_r>
 8008066:	6028      	str	r0, [r5, #0]
 8008068:	6128      	str	r0, [r5, #16]
 800806a:	b920      	cbnz	r0, 8008076 <_svfiprintf_r+0x2e>
 800806c:	230c      	movs	r3, #12
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008074:	e0d1      	b.n	800821a <_svfiprintf_r+0x1d2>
 8008076:	2340      	movs	r3, #64	; 0x40
 8008078:	616b      	str	r3, [r5, #20]
 800807a:	2300      	movs	r3, #0
 800807c:	9309      	str	r3, [sp, #36]	; 0x24
 800807e:	2320      	movs	r3, #32
 8008080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008084:	f8cd 800c 	str.w	r8, [sp, #12]
 8008088:	2330      	movs	r3, #48	; 0x30
 800808a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008234 <_svfiprintf_r+0x1ec>
 800808e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008092:	f04f 0901 	mov.w	r9, #1
 8008096:	4623      	mov	r3, r4
 8008098:	469a      	mov	sl, r3
 800809a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800809e:	b10a      	cbz	r2, 80080a4 <_svfiprintf_r+0x5c>
 80080a0:	2a25      	cmp	r2, #37	; 0x25
 80080a2:	d1f9      	bne.n	8008098 <_svfiprintf_r+0x50>
 80080a4:	ebba 0b04 	subs.w	fp, sl, r4
 80080a8:	d00b      	beq.n	80080c2 <_svfiprintf_r+0x7a>
 80080aa:	465b      	mov	r3, fp
 80080ac:	4622      	mov	r2, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7ff ff6d 	bl	8007f90 <__ssputs_r>
 80080b6:	3001      	adds	r0, #1
 80080b8:	f000 80aa 	beq.w	8008210 <_svfiprintf_r+0x1c8>
 80080bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080be:	445a      	add	r2, fp
 80080c0:	9209      	str	r2, [sp, #36]	; 0x24
 80080c2:	f89a 3000 	ldrb.w	r3, [sl]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80a2 	beq.w	8008210 <_svfiprintf_r+0x1c8>
 80080cc:	2300      	movs	r3, #0
 80080ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d6:	f10a 0a01 	add.w	sl, sl, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	9307      	str	r3, [sp, #28]
 80080de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080e2:	931a      	str	r3, [sp, #104]	; 0x68
 80080e4:	4654      	mov	r4, sl
 80080e6:	2205      	movs	r2, #5
 80080e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ec:	4851      	ldr	r0, [pc, #324]	; (8008234 <_svfiprintf_r+0x1ec>)
 80080ee:	f7f8 f86f 	bl	80001d0 <memchr>
 80080f2:	9a04      	ldr	r2, [sp, #16]
 80080f4:	b9d8      	cbnz	r0, 800812e <_svfiprintf_r+0xe6>
 80080f6:	06d0      	lsls	r0, r2, #27
 80080f8:	bf44      	itt	mi
 80080fa:	2320      	movmi	r3, #32
 80080fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008100:	0711      	lsls	r1, r2, #28
 8008102:	bf44      	itt	mi
 8008104:	232b      	movmi	r3, #43	; 0x2b
 8008106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800810a:	f89a 3000 	ldrb.w	r3, [sl]
 800810e:	2b2a      	cmp	r3, #42	; 0x2a
 8008110:	d015      	beq.n	800813e <_svfiprintf_r+0xf6>
 8008112:	9a07      	ldr	r2, [sp, #28]
 8008114:	4654      	mov	r4, sl
 8008116:	2000      	movs	r0, #0
 8008118:	f04f 0c0a 	mov.w	ip, #10
 800811c:	4621      	mov	r1, r4
 800811e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008122:	3b30      	subs	r3, #48	; 0x30
 8008124:	2b09      	cmp	r3, #9
 8008126:	d94e      	bls.n	80081c6 <_svfiprintf_r+0x17e>
 8008128:	b1b0      	cbz	r0, 8008158 <_svfiprintf_r+0x110>
 800812a:	9207      	str	r2, [sp, #28]
 800812c:	e014      	b.n	8008158 <_svfiprintf_r+0x110>
 800812e:	eba0 0308 	sub.w	r3, r0, r8
 8008132:	fa09 f303 	lsl.w	r3, r9, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	46a2      	mov	sl, r4
 800813c:	e7d2      	b.n	80080e4 <_svfiprintf_r+0x9c>
 800813e:	9b03      	ldr	r3, [sp, #12]
 8008140:	1d19      	adds	r1, r3, #4
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	9103      	str	r1, [sp, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	bfbb      	ittet	lt
 800814a:	425b      	neglt	r3, r3
 800814c:	f042 0202 	orrlt.w	r2, r2, #2
 8008150:	9307      	strge	r3, [sp, #28]
 8008152:	9307      	strlt	r3, [sp, #28]
 8008154:	bfb8      	it	lt
 8008156:	9204      	strlt	r2, [sp, #16]
 8008158:	7823      	ldrb	r3, [r4, #0]
 800815a:	2b2e      	cmp	r3, #46	; 0x2e
 800815c:	d10c      	bne.n	8008178 <_svfiprintf_r+0x130>
 800815e:	7863      	ldrb	r3, [r4, #1]
 8008160:	2b2a      	cmp	r3, #42	; 0x2a
 8008162:	d135      	bne.n	80081d0 <_svfiprintf_r+0x188>
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	1d1a      	adds	r2, r3, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	9203      	str	r2, [sp, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	bfb8      	it	lt
 8008170:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008174:	3402      	adds	r4, #2
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008244 <_svfiprintf_r+0x1fc>
 800817c:	7821      	ldrb	r1, [r4, #0]
 800817e:	2203      	movs	r2, #3
 8008180:	4650      	mov	r0, sl
 8008182:	f7f8 f825 	bl	80001d0 <memchr>
 8008186:	b140      	cbz	r0, 800819a <_svfiprintf_r+0x152>
 8008188:	2340      	movs	r3, #64	; 0x40
 800818a:	eba0 000a 	sub.w	r0, r0, sl
 800818e:	fa03 f000 	lsl.w	r0, r3, r0
 8008192:	9b04      	ldr	r3, [sp, #16]
 8008194:	4303      	orrs	r3, r0
 8008196:	3401      	adds	r4, #1
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819e:	4826      	ldr	r0, [pc, #152]	; (8008238 <_svfiprintf_r+0x1f0>)
 80081a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081a4:	2206      	movs	r2, #6
 80081a6:	f7f8 f813 	bl	80001d0 <memchr>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d038      	beq.n	8008220 <_svfiprintf_r+0x1d8>
 80081ae:	4b23      	ldr	r3, [pc, #140]	; (800823c <_svfiprintf_r+0x1f4>)
 80081b0:	bb1b      	cbnz	r3, 80081fa <_svfiprintf_r+0x1b2>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	3307      	adds	r3, #7
 80081b6:	f023 0307 	bic.w	r3, r3, #7
 80081ba:	3308      	adds	r3, #8
 80081bc:	9303      	str	r3, [sp, #12]
 80081be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c0:	4433      	add	r3, r6
 80081c2:	9309      	str	r3, [sp, #36]	; 0x24
 80081c4:	e767      	b.n	8008096 <_svfiprintf_r+0x4e>
 80081c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ca:	460c      	mov	r4, r1
 80081cc:	2001      	movs	r0, #1
 80081ce:	e7a5      	b.n	800811c <_svfiprintf_r+0xd4>
 80081d0:	2300      	movs	r3, #0
 80081d2:	3401      	adds	r4, #1
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	4619      	mov	r1, r3
 80081d8:	f04f 0c0a 	mov.w	ip, #10
 80081dc:	4620      	mov	r0, r4
 80081de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081e2:	3a30      	subs	r2, #48	; 0x30
 80081e4:	2a09      	cmp	r2, #9
 80081e6:	d903      	bls.n	80081f0 <_svfiprintf_r+0x1a8>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0c5      	beq.n	8008178 <_svfiprintf_r+0x130>
 80081ec:	9105      	str	r1, [sp, #20]
 80081ee:	e7c3      	b.n	8008178 <_svfiprintf_r+0x130>
 80081f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f4:	4604      	mov	r4, r0
 80081f6:	2301      	movs	r3, #1
 80081f8:	e7f0      	b.n	80081dc <_svfiprintf_r+0x194>
 80081fa:	ab03      	add	r3, sp, #12
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	462a      	mov	r2, r5
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <_svfiprintf_r+0x1f8>)
 8008202:	a904      	add	r1, sp, #16
 8008204:	4638      	mov	r0, r7
 8008206:	f3af 8000 	nop.w
 800820a:	1c42      	adds	r2, r0, #1
 800820c:	4606      	mov	r6, r0
 800820e:	d1d6      	bne.n	80081be <_svfiprintf_r+0x176>
 8008210:	89ab      	ldrh	r3, [r5, #12]
 8008212:	065b      	lsls	r3, r3, #25
 8008214:	f53f af2c 	bmi.w	8008070 <_svfiprintf_r+0x28>
 8008218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800821a:	b01d      	add	sp, #116	; 0x74
 800821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008220:	ab03      	add	r3, sp, #12
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	462a      	mov	r2, r5
 8008226:	4b06      	ldr	r3, [pc, #24]	; (8008240 <_svfiprintf_r+0x1f8>)
 8008228:	a904      	add	r1, sp, #16
 800822a:	4638      	mov	r0, r7
 800822c:	f000 f87a 	bl	8008324 <_printf_i>
 8008230:	e7eb      	b.n	800820a <_svfiprintf_r+0x1c2>
 8008232:	bf00      	nop
 8008234:	08008708 	.word	0x08008708
 8008238:	08008712 	.word	0x08008712
 800823c:	00000000 	.word	0x00000000
 8008240:	08007f91 	.word	0x08007f91
 8008244:	0800870e 	.word	0x0800870e

08008248 <_printf_common>:
 8008248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	4616      	mov	r6, r2
 800824e:	4699      	mov	r9, r3
 8008250:	688a      	ldr	r2, [r1, #8]
 8008252:	690b      	ldr	r3, [r1, #16]
 8008254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008258:	4293      	cmp	r3, r2
 800825a:	bfb8      	it	lt
 800825c:	4613      	movlt	r3, r2
 800825e:	6033      	str	r3, [r6, #0]
 8008260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008264:	4607      	mov	r7, r0
 8008266:	460c      	mov	r4, r1
 8008268:	b10a      	cbz	r2, 800826e <_printf_common+0x26>
 800826a:	3301      	adds	r3, #1
 800826c:	6033      	str	r3, [r6, #0]
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	0699      	lsls	r1, r3, #26
 8008272:	bf42      	ittt	mi
 8008274:	6833      	ldrmi	r3, [r6, #0]
 8008276:	3302      	addmi	r3, #2
 8008278:	6033      	strmi	r3, [r6, #0]
 800827a:	6825      	ldr	r5, [r4, #0]
 800827c:	f015 0506 	ands.w	r5, r5, #6
 8008280:	d106      	bne.n	8008290 <_printf_common+0x48>
 8008282:	f104 0a19 	add.w	sl, r4, #25
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	6832      	ldr	r2, [r6, #0]
 800828a:	1a9b      	subs	r3, r3, r2
 800828c:	42ab      	cmp	r3, r5
 800828e:	dc26      	bgt.n	80082de <_printf_common+0x96>
 8008290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008294:	1e13      	subs	r3, r2, #0
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	bf18      	it	ne
 800829a:	2301      	movne	r3, #1
 800829c:	0692      	lsls	r2, r2, #26
 800829e:	d42b      	bmi.n	80082f8 <_printf_common+0xb0>
 80082a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082a4:	4649      	mov	r1, r9
 80082a6:	4638      	mov	r0, r7
 80082a8:	47c0      	blx	r8
 80082aa:	3001      	adds	r0, #1
 80082ac:	d01e      	beq.n	80082ec <_printf_common+0xa4>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	68e5      	ldr	r5, [r4, #12]
 80082b2:	6832      	ldr	r2, [r6, #0]
 80082b4:	f003 0306 	and.w	r3, r3, #6
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	bf08      	it	eq
 80082bc:	1aad      	subeq	r5, r5, r2
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	6922      	ldr	r2, [r4, #16]
 80082c2:	bf0c      	ite	eq
 80082c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082c8:	2500      	movne	r5, #0
 80082ca:	4293      	cmp	r3, r2
 80082cc:	bfc4      	itt	gt
 80082ce:	1a9b      	subgt	r3, r3, r2
 80082d0:	18ed      	addgt	r5, r5, r3
 80082d2:	2600      	movs	r6, #0
 80082d4:	341a      	adds	r4, #26
 80082d6:	42b5      	cmp	r5, r6
 80082d8:	d11a      	bne.n	8008310 <_printf_common+0xc8>
 80082da:	2000      	movs	r0, #0
 80082dc:	e008      	b.n	80082f0 <_printf_common+0xa8>
 80082de:	2301      	movs	r3, #1
 80082e0:	4652      	mov	r2, sl
 80082e2:	4649      	mov	r1, r9
 80082e4:	4638      	mov	r0, r7
 80082e6:	47c0      	blx	r8
 80082e8:	3001      	adds	r0, #1
 80082ea:	d103      	bne.n	80082f4 <_printf_common+0xac>
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f4:	3501      	adds	r5, #1
 80082f6:	e7c6      	b.n	8008286 <_printf_common+0x3e>
 80082f8:	18e1      	adds	r1, r4, r3
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	2030      	movs	r0, #48	; 0x30
 80082fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008302:	4422      	add	r2, r4
 8008304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800830c:	3302      	adds	r3, #2
 800830e:	e7c7      	b.n	80082a0 <_printf_common+0x58>
 8008310:	2301      	movs	r3, #1
 8008312:	4622      	mov	r2, r4
 8008314:	4649      	mov	r1, r9
 8008316:	4638      	mov	r0, r7
 8008318:	47c0      	blx	r8
 800831a:	3001      	adds	r0, #1
 800831c:	d0e6      	beq.n	80082ec <_printf_common+0xa4>
 800831e:	3601      	adds	r6, #1
 8008320:	e7d9      	b.n	80082d6 <_printf_common+0x8e>
	...

08008324 <_printf_i>:
 8008324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	460c      	mov	r4, r1
 800832a:	4691      	mov	r9, r2
 800832c:	7e27      	ldrb	r7, [r4, #24]
 800832e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008330:	2f78      	cmp	r7, #120	; 0x78
 8008332:	4680      	mov	r8, r0
 8008334:	469a      	mov	sl, r3
 8008336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800833a:	d807      	bhi.n	800834c <_printf_i+0x28>
 800833c:	2f62      	cmp	r7, #98	; 0x62
 800833e:	d80a      	bhi.n	8008356 <_printf_i+0x32>
 8008340:	2f00      	cmp	r7, #0
 8008342:	f000 80d8 	beq.w	80084f6 <_printf_i+0x1d2>
 8008346:	2f58      	cmp	r7, #88	; 0x58
 8008348:	f000 80a3 	beq.w	8008492 <_printf_i+0x16e>
 800834c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008354:	e03a      	b.n	80083cc <_printf_i+0xa8>
 8008356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800835a:	2b15      	cmp	r3, #21
 800835c:	d8f6      	bhi.n	800834c <_printf_i+0x28>
 800835e:	a001      	add	r0, pc, #4	; (adr r0, 8008364 <_printf_i+0x40>)
 8008360:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083d1 	.word	0x080083d1
 800836c:	0800834d 	.word	0x0800834d
 8008370:	0800834d 	.word	0x0800834d
 8008374:	0800834d 	.word	0x0800834d
 8008378:	0800834d 	.word	0x0800834d
 800837c:	080083d1 	.word	0x080083d1
 8008380:	0800834d 	.word	0x0800834d
 8008384:	0800834d 	.word	0x0800834d
 8008388:	0800834d 	.word	0x0800834d
 800838c:	0800834d 	.word	0x0800834d
 8008390:	080084dd 	.word	0x080084dd
 8008394:	08008401 	.word	0x08008401
 8008398:	080084bf 	.word	0x080084bf
 800839c:	0800834d 	.word	0x0800834d
 80083a0:	0800834d 	.word	0x0800834d
 80083a4:	080084ff 	.word	0x080084ff
 80083a8:	0800834d 	.word	0x0800834d
 80083ac:	08008401 	.word	0x08008401
 80083b0:	0800834d 	.word	0x0800834d
 80083b4:	0800834d 	.word	0x0800834d
 80083b8:	080084c7 	.word	0x080084c7
 80083bc:	680b      	ldr	r3, [r1, #0]
 80083be:	1d1a      	adds	r2, r3, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	600a      	str	r2, [r1, #0]
 80083c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0a3      	b.n	8008518 <_printf_i+0x1f4>
 80083d0:	6825      	ldr	r5, [r4, #0]
 80083d2:	6808      	ldr	r0, [r1, #0]
 80083d4:	062e      	lsls	r6, r5, #24
 80083d6:	f100 0304 	add.w	r3, r0, #4
 80083da:	d50a      	bpl.n	80083f2 <_printf_i+0xce>
 80083dc:	6805      	ldr	r5, [r0, #0]
 80083de:	600b      	str	r3, [r1, #0]
 80083e0:	2d00      	cmp	r5, #0
 80083e2:	da03      	bge.n	80083ec <_printf_i+0xc8>
 80083e4:	232d      	movs	r3, #45	; 0x2d
 80083e6:	426d      	negs	r5, r5
 80083e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ec:	485e      	ldr	r0, [pc, #376]	; (8008568 <_printf_i+0x244>)
 80083ee:	230a      	movs	r3, #10
 80083f0:	e019      	b.n	8008426 <_printf_i+0x102>
 80083f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083f6:	6805      	ldr	r5, [r0, #0]
 80083f8:	600b      	str	r3, [r1, #0]
 80083fa:	bf18      	it	ne
 80083fc:	b22d      	sxthne	r5, r5
 80083fe:	e7ef      	b.n	80083e0 <_printf_i+0xbc>
 8008400:	680b      	ldr	r3, [r1, #0]
 8008402:	6825      	ldr	r5, [r4, #0]
 8008404:	1d18      	adds	r0, r3, #4
 8008406:	6008      	str	r0, [r1, #0]
 8008408:	0628      	lsls	r0, r5, #24
 800840a:	d501      	bpl.n	8008410 <_printf_i+0xec>
 800840c:	681d      	ldr	r5, [r3, #0]
 800840e:	e002      	b.n	8008416 <_printf_i+0xf2>
 8008410:	0669      	lsls	r1, r5, #25
 8008412:	d5fb      	bpl.n	800840c <_printf_i+0xe8>
 8008414:	881d      	ldrh	r5, [r3, #0]
 8008416:	4854      	ldr	r0, [pc, #336]	; (8008568 <_printf_i+0x244>)
 8008418:	2f6f      	cmp	r7, #111	; 0x6f
 800841a:	bf0c      	ite	eq
 800841c:	2308      	moveq	r3, #8
 800841e:	230a      	movne	r3, #10
 8008420:	2100      	movs	r1, #0
 8008422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008426:	6866      	ldr	r6, [r4, #4]
 8008428:	60a6      	str	r6, [r4, #8]
 800842a:	2e00      	cmp	r6, #0
 800842c:	bfa2      	ittt	ge
 800842e:	6821      	ldrge	r1, [r4, #0]
 8008430:	f021 0104 	bicge.w	r1, r1, #4
 8008434:	6021      	strge	r1, [r4, #0]
 8008436:	b90d      	cbnz	r5, 800843c <_printf_i+0x118>
 8008438:	2e00      	cmp	r6, #0
 800843a:	d04d      	beq.n	80084d8 <_printf_i+0x1b4>
 800843c:	4616      	mov	r6, r2
 800843e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008442:	fb03 5711 	mls	r7, r3, r1, r5
 8008446:	5dc7      	ldrb	r7, [r0, r7]
 8008448:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800844c:	462f      	mov	r7, r5
 800844e:	42bb      	cmp	r3, r7
 8008450:	460d      	mov	r5, r1
 8008452:	d9f4      	bls.n	800843e <_printf_i+0x11a>
 8008454:	2b08      	cmp	r3, #8
 8008456:	d10b      	bne.n	8008470 <_printf_i+0x14c>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	07df      	lsls	r7, r3, #31
 800845c:	d508      	bpl.n	8008470 <_printf_i+0x14c>
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	6861      	ldr	r1, [r4, #4]
 8008462:	4299      	cmp	r1, r3
 8008464:	bfde      	ittt	le
 8008466:	2330      	movle	r3, #48	; 0x30
 8008468:	f806 3c01 	strble.w	r3, [r6, #-1]
 800846c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008470:	1b92      	subs	r2, r2, r6
 8008472:	6122      	str	r2, [r4, #16]
 8008474:	f8cd a000 	str.w	sl, [sp]
 8008478:	464b      	mov	r3, r9
 800847a:	aa03      	add	r2, sp, #12
 800847c:	4621      	mov	r1, r4
 800847e:	4640      	mov	r0, r8
 8008480:	f7ff fee2 	bl	8008248 <_printf_common>
 8008484:	3001      	adds	r0, #1
 8008486:	d14c      	bne.n	8008522 <_printf_i+0x1fe>
 8008488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800848c:	b004      	add	sp, #16
 800848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008492:	4835      	ldr	r0, [pc, #212]	; (8008568 <_printf_i+0x244>)
 8008494:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	680e      	ldr	r6, [r1, #0]
 800849c:	061f      	lsls	r7, r3, #24
 800849e:	f856 5b04 	ldr.w	r5, [r6], #4
 80084a2:	600e      	str	r6, [r1, #0]
 80084a4:	d514      	bpl.n	80084d0 <_printf_i+0x1ac>
 80084a6:	07d9      	lsls	r1, r3, #31
 80084a8:	bf44      	itt	mi
 80084aa:	f043 0320 	orrmi.w	r3, r3, #32
 80084ae:	6023      	strmi	r3, [r4, #0]
 80084b0:	b91d      	cbnz	r5, 80084ba <_printf_i+0x196>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	f023 0320 	bic.w	r3, r3, #32
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	2310      	movs	r3, #16
 80084bc:	e7b0      	b.n	8008420 <_printf_i+0xfc>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	f043 0320 	orr.w	r3, r3, #32
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	2378      	movs	r3, #120	; 0x78
 80084c8:	4828      	ldr	r0, [pc, #160]	; (800856c <_printf_i+0x248>)
 80084ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ce:	e7e3      	b.n	8008498 <_printf_i+0x174>
 80084d0:	065e      	lsls	r6, r3, #25
 80084d2:	bf48      	it	mi
 80084d4:	b2ad      	uxthmi	r5, r5
 80084d6:	e7e6      	b.n	80084a6 <_printf_i+0x182>
 80084d8:	4616      	mov	r6, r2
 80084da:	e7bb      	b.n	8008454 <_printf_i+0x130>
 80084dc:	680b      	ldr	r3, [r1, #0]
 80084de:	6826      	ldr	r6, [r4, #0]
 80084e0:	6960      	ldr	r0, [r4, #20]
 80084e2:	1d1d      	adds	r5, r3, #4
 80084e4:	600d      	str	r5, [r1, #0]
 80084e6:	0635      	lsls	r5, r6, #24
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	d501      	bpl.n	80084f0 <_printf_i+0x1cc>
 80084ec:	6018      	str	r0, [r3, #0]
 80084ee:	e002      	b.n	80084f6 <_printf_i+0x1d2>
 80084f0:	0671      	lsls	r1, r6, #25
 80084f2:	d5fb      	bpl.n	80084ec <_printf_i+0x1c8>
 80084f4:	8018      	strh	r0, [r3, #0]
 80084f6:	2300      	movs	r3, #0
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	4616      	mov	r6, r2
 80084fc:	e7ba      	b.n	8008474 <_printf_i+0x150>
 80084fe:	680b      	ldr	r3, [r1, #0]
 8008500:	1d1a      	adds	r2, r3, #4
 8008502:	600a      	str	r2, [r1, #0]
 8008504:	681e      	ldr	r6, [r3, #0]
 8008506:	6862      	ldr	r2, [r4, #4]
 8008508:	2100      	movs	r1, #0
 800850a:	4630      	mov	r0, r6
 800850c:	f7f7 fe60 	bl	80001d0 <memchr>
 8008510:	b108      	cbz	r0, 8008516 <_printf_i+0x1f2>
 8008512:	1b80      	subs	r0, r0, r6
 8008514:	6060      	str	r0, [r4, #4]
 8008516:	6863      	ldr	r3, [r4, #4]
 8008518:	6123      	str	r3, [r4, #16]
 800851a:	2300      	movs	r3, #0
 800851c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008520:	e7a8      	b.n	8008474 <_printf_i+0x150>
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	4632      	mov	r2, r6
 8008526:	4649      	mov	r1, r9
 8008528:	4640      	mov	r0, r8
 800852a:	47d0      	blx	sl
 800852c:	3001      	adds	r0, #1
 800852e:	d0ab      	beq.n	8008488 <_printf_i+0x164>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	079b      	lsls	r3, r3, #30
 8008534:	d413      	bmi.n	800855e <_printf_i+0x23a>
 8008536:	68e0      	ldr	r0, [r4, #12]
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	4298      	cmp	r0, r3
 800853c:	bfb8      	it	lt
 800853e:	4618      	movlt	r0, r3
 8008540:	e7a4      	b.n	800848c <_printf_i+0x168>
 8008542:	2301      	movs	r3, #1
 8008544:	4632      	mov	r2, r6
 8008546:	4649      	mov	r1, r9
 8008548:	4640      	mov	r0, r8
 800854a:	47d0      	blx	sl
 800854c:	3001      	adds	r0, #1
 800854e:	d09b      	beq.n	8008488 <_printf_i+0x164>
 8008550:	3501      	adds	r5, #1
 8008552:	68e3      	ldr	r3, [r4, #12]
 8008554:	9903      	ldr	r1, [sp, #12]
 8008556:	1a5b      	subs	r3, r3, r1
 8008558:	42ab      	cmp	r3, r5
 800855a:	dcf2      	bgt.n	8008542 <_printf_i+0x21e>
 800855c:	e7eb      	b.n	8008536 <_printf_i+0x212>
 800855e:	2500      	movs	r5, #0
 8008560:	f104 0619 	add.w	r6, r4, #25
 8008564:	e7f5      	b.n	8008552 <_printf_i+0x22e>
 8008566:	bf00      	nop
 8008568:	08008719 	.word	0x08008719
 800856c:	0800872a 	.word	0x0800872a

08008570 <memmove>:
 8008570:	4288      	cmp	r0, r1
 8008572:	b510      	push	{r4, lr}
 8008574:	eb01 0402 	add.w	r4, r1, r2
 8008578:	d902      	bls.n	8008580 <memmove+0x10>
 800857a:	4284      	cmp	r4, r0
 800857c:	4623      	mov	r3, r4
 800857e:	d807      	bhi.n	8008590 <memmove+0x20>
 8008580:	1e43      	subs	r3, r0, #1
 8008582:	42a1      	cmp	r1, r4
 8008584:	d008      	beq.n	8008598 <memmove+0x28>
 8008586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800858a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800858e:	e7f8      	b.n	8008582 <memmove+0x12>
 8008590:	4402      	add	r2, r0
 8008592:	4601      	mov	r1, r0
 8008594:	428a      	cmp	r2, r1
 8008596:	d100      	bne.n	800859a <memmove+0x2a>
 8008598:	bd10      	pop	{r4, pc}
 800859a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800859e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085a2:	e7f7      	b.n	8008594 <memmove+0x24>

080085a4 <_realloc_r>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	4607      	mov	r7, r0
 80085a8:	4614      	mov	r4, r2
 80085aa:	460e      	mov	r6, r1
 80085ac:	b921      	cbnz	r1, 80085b8 <_realloc_r+0x14>
 80085ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085b2:	4611      	mov	r1, r2
 80085b4:	f7ff bb9c 	b.w	8007cf0 <_malloc_r>
 80085b8:	b922      	cbnz	r2, 80085c4 <_realloc_r+0x20>
 80085ba:	f7ff fc99 	bl	8007ef0 <_free_r>
 80085be:	4625      	mov	r5, r4
 80085c0:	4628      	mov	r0, r5
 80085c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c4:	f000 f814 	bl	80085f0 <_malloc_usable_size_r>
 80085c8:	42a0      	cmp	r0, r4
 80085ca:	d20f      	bcs.n	80085ec <_realloc_r+0x48>
 80085cc:	4621      	mov	r1, r4
 80085ce:	4638      	mov	r0, r7
 80085d0:	f7ff fb8e 	bl	8007cf0 <_malloc_r>
 80085d4:	4605      	mov	r5, r0
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d0f2      	beq.n	80085c0 <_realloc_r+0x1c>
 80085da:	4631      	mov	r1, r6
 80085dc:	4622      	mov	r2, r4
 80085de:	f7ff fb71 	bl	8007cc4 <memcpy>
 80085e2:	4631      	mov	r1, r6
 80085e4:	4638      	mov	r0, r7
 80085e6:	f7ff fc83 	bl	8007ef0 <_free_r>
 80085ea:	e7e9      	b.n	80085c0 <_realloc_r+0x1c>
 80085ec:	4635      	mov	r5, r6
 80085ee:	e7e7      	b.n	80085c0 <_realloc_r+0x1c>

080085f0 <_malloc_usable_size_r>:
 80085f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f4:	1f18      	subs	r0, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfbc      	itt	lt
 80085fa:	580b      	ldrlt	r3, [r1, r0]
 80085fc:	18c0      	addlt	r0, r0, r3
 80085fe:	4770      	bx	lr

08008600 <_init>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr

0800860c <_fini>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr
