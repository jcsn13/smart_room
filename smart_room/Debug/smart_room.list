
smart_room.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008448  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f0  080086f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080086f0  080086f0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086f0  080086f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080086f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001114  20000074  0800876c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  0800876c  00021188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002041c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f21  00000000  00000000  000404c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  000443e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00045dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca74  00000000  00000000  00047620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afa9  00000000  00000000  00074094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011635c  00000000  00000000  0008f03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a5399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007270  00000000  00000000  001a53ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085c0 	.word	0x080085c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080085c0 	.word	0x080085c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	20000144 	.word	0x20000144

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b20      	cmp	r3, #32
 8000414:	d101      	bne.n	800041a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000416:	2301      	movs	r3, #1
 8000418:	e000      	b.n	800041c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d101      	bne.n	8000440 <LL_USART_IsActiveFlag_TXE+0x18>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 0220 	orr.w	r2, r3, #32
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	460b      	mov	r3, r1
 80004d4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	4907      	ldr	r1, [pc, #28]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000526:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <sendchar>:
QueueHandle_t tx_queue_2;
QueueHandle_t rx_queue_2;
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

void sendchar(char c, char usart){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10b      	bne.n	80005aa <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <sendchar+0x54>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	2300      	movs	r3, #0
 800059a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800059e:	f005 fc05 	bl	8005dac <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <sendchar+0x58>)
 80005a4:	f7ff ff63 	bl	800046e <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 80005a8:	e00d      	b.n	80005c6 <sendchar+0x4a>
	else if( usart == USART_2){
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d10a      	bne.n	80005c6 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <sendchar+0x5c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	2300      	movs	r3, #0
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005bc:	f005 fbf6 	bl	8005dac <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <sendchar+0x60>)
 80005c2:	f7ff ff54 	bl	800046e <LL_USART_EnableIT_TXE>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20001124 	.word	0x20001124
 80005d4:	40013800 	.word	0x40013800
 80005d8:	2000111c 	.word	0x2000111c
 80005dc:	40004400 	.word	0x40004400

080005e0 <sendString>:

void sendString(char * str, char usart){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 80005ec:	e009      	b.n	8000602 <sendString+0x22>
		sendchar(*str, usart);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffc0 	bl	800057c <sendchar>
		str++;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f1      	bne.n	80005ee <sendString+0xe>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <readchar>:

char readchar(char usart){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d109      	bne.n	800063c <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <readchar+0x4c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 010f 	add.w	r1, r7, #15
 8000630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000634:	4618      	mov	r0, r3
 8000636:	f005 fd53 	bl	80060e0 <xQueueReceive>
 800063a:	e00b      	b.n	8000654 <readchar+0x40>
	else if(usart == USART_2)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d108      	bne.n	8000654 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <readchar+0x50>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f107 010f 	add.w	r1, r7, #15
 800064a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800064e:	4618      	mov	r0, r3
 8000650:	f005 fd46 	bl	80060e0 <xQueueReceive>
	return caracter;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20001068 	.word	0x20001068
 8000664:	20001120 	.word	0x20001120

08000668 <cli>:

void cli(void * vParam)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	while(1)
	{
		caracter = readchar(USART_1);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ffcf 	bl	8000614 <readchar>
 8000676:	4603      	mov	r3, r0
 8000678:	75fb      	strb	r3, [r7, #23]

		char buff[8];
		uint8_t temp = readVoltage();
 800067a:	f000 f86f 	bl	800075c <readVoltage>
 800067e:	4603      	mov	r3, r0
 8000680:	75bb      	strb	r3, [r7, #22]
		sprintf(buff,"\n%d\r\n", temp);
 8000682:	7dba      	ldrb	r2, [r7, #22]
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	492b      	ldr	r1, [pc, #172]	; (8000738 <cli+0xd0>)
 800068a:	4618      	mov	r0, r3
 800068c:	f007 fbe4 	bl	8007e58 <siprintf>
		sendString(buff, USART_1);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffa2 	bl	80005e0 <sendString>

		switch(caracter){
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3b41      	subs	r3, #65	; 0x41
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	d8e5      	bhi.n	8000670 <cli+0x8>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <cli+0x44>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	08000671 	.word	0x08000671
 80006b0:	08000671 	.word	0x08000671
 80006b4:	0800072d 	.word	0x0800072d
 80006b8:	0800071d 	.word	0x0800071d
 80006bc:	08000671 	.word	0x08000671
 80006c0:	08000671 	.word	0x08000671
 80006c4:	08000671 	.word	0x08000671
 80006c8:	08000671 	.word	0x08000671
 80006cc:	08000671 	.word	0x08000671
 80006d0:	08000671 	.word	0x08000671
 80006d4:	08000671 	.word	0x08000671
 80006d8:	08000715 	.word	0x08000715
 80006dc:	08000671 	.word	0x08000671
 80006e0:	08000671 	.word	0x08000671
 80006e4:	08000725 	.word	0x08000725
 80006e8:	08000671 	.word	0x08000671
 80006ec:	08000671 	.word	0x08000671
 80006f0:	08000671 	.word	0x08000671
 80006f4:	08000671 	.word	0x08000671
 80006f8:	08000671 	.word	0x08000671
 80006fc:	08000671 	.word	0x08000671
 8000700:	08000671 	.word	0x08000671
 8000704:	08000671 	.word	0x08000671
 8000708:	08000671 	.word	0x08000671
 800070c:	08000671 	.word	0x08000671
 8000710:	08000671 	.word	0x08000671
					case 'L':
						changeLedState(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f811 	bl	800073c <changeLedState>
						break;
 800071a:	e00b      	b.n	8000734 <cli+0xcc>
					case 'D':
						changeLedState(0);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f80d 	bl	800073c <changeLedState>
						break;
 8000722:	e007      	b.n	8000734 <cli+0xcc>
					case 'O':
						changeDoorState(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 f833 	bl	8000790 <changeDoorState>
						break;
 800072a:	e003      	b.n	8000734 <cli+0xcc>
					case 'C':
						changeDoorState(0);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f82f 	bl	8000790 <changeDoorState>
						break;
 8000732:	bf00      	nop
	{
 8000734:	e79c      	b.n	8000670 <cli+0x8>
 8000736:	bf00      	nop
 8000738:	080085e4 	.word	0x080085e4

0800073c <changeLedState>:
				}
	}

}

void changeLedState(uint8_t mode){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, mode);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	461a      	mov	r2, r3
 800074a:	2120      	movs	r1, #32
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f002 faaa 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <readVoltage>:

int8_t readVoltage(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <readVoltage+0x2c>)
 8000762:	f001 f94d 	bl	8001a00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <readVoltage+0x2c>)
 800076c:	f001 fa02 	bl	8001b74 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1) / 26;
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <readVoltage+0x2c>)
 8000772:	f001 fad7 	bl	8001d24 <HAL_ADC_GetValue>
 8000776:	4603      	mov	r3, r0
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <readVoltage+0x30>)
 800077a:	fba2 2303 	umull	r2, r3, r2, r3
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	b25b      	sxtb	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200010b8 	.word	0x200010b8
 800078c:	4ec4ec4f 	.word	0x4ec4ec4f

08000790 <changeDoorState>:

void changeDoorState(uint8_t mode){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, mode);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	461a      	mov	r2, r3
 800079e:	2102      	movs	r1, #2
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f002 fa80 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <USART_2_IRQHandler>:
//		}
//	}
//}
//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007b6:	482a      	ldr	r0, [pc, #168]	; (8000860 <USART_2_IRQHandler+0xb0>)
 80007b8:	f7ff fe36 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d026      	beq.n	8000810 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007c2:	e014      	b.n	80007ee <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <USART_2_IRQHandler+0xb4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f107 020c 	add.w	r2, r7, #12
 80007cc:	f107 010b 	add.w	r1, r7, #11
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 fd65 	bl	80062a0 <xQueueReceiveFromISR>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d103      	bne.n	80007e4 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 80007dc:	4820      	ldr	r0, [pc, #128]	; (8000860 <USART_2_IRQHandler+0xb0>)
 80007de:	f7ff fe56 	bl	800048e <LL_USART_DisableIT_TXE>
 80007e2:	e00a      	b.n	80007fa <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	4619      	mov	r1, r3
 80007e8:	481d      	ldr	r0, [pc, #116]	; (8000860 <USART_2_IRQHandler+0xb0>)
 80007ea:	f7ff fe6e 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007ee:	481c      	ldr	r0, [pc, #112]	; (8000860 <USART_2_IRQHandler+0xb0>)
 80007f0:	f7ff fe1a 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1e4      	bne.n	80007c4 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d007      	beq.n	8000810 <USART_2_IRQHandler+0x60>
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <USART_2_IRQHandler+0xb8>)
 8000802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	f3bf 8f4f 	dsb	sy
 800080c:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <USART_2_IRQHandler+0xb0>)
 8000812:	f7ff fdf6 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d01d      	beq.n	8000858 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800081c:	e00b      	b.n	8000836 <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 800081e:	4810      	ldr	r0, [pc, #64]	; (8000860 <USART_2_IRQHandler+0xb0>)
 8000820:	f7ff fe45 	bl	80004ae <LL_USART_ReceiveData8>
 8000824:	4603      	mov	r3, r0
        	uint8_t byte =
 8000826:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <USART_2_IRQHandler+0xbc>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	1d3a      	adds	r2, r7, #4
 800082e:	1cf9      	adds	r1, r7, #3
 8000830:	2300      	movs	r3, #0
 8000832:	f005 fbb9 	bl	8005fa8 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000836:	480a      	ldr	r0, [pc, #40]	; (8000860 <USART_2_IRQHandler+0xb0>)
 8000838:	f7ff fde3 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1ed      	bne.n	800081e <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d007      	beq.n	8000858 <USART_2_IRQHandler+0xa8>
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <USART_2_IRQHandler+0xb8>)
 800084a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	f3bf 8f6f 	isb	sy
    }
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004400 	.word	0x40004400
 8000864:	2000111c 	.word	0x2000111c
 8000868:	e000ed04 	.word	0xe000ed04
 800086c:	20001120 	.word	0x20001120

08000870 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <USART_1_IRQHandler+0xb0>)
 8000878:	f7ff fdd6 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d026      	beq.n	80008d0 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000882:	e014      	b.n	80008ae <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <USART_1_IRQHandler+0xb4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f107 020c 	add.w	r2, r7, #12
 800088c:	f107 010b 	add.w	r1, r7, #11
 8000890:	4618      	mov	r0, r3
 8000892:	f005 fd05 	bl	80062a0 <xQueueReceiveFromISR>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d103      	bne.n	80008a4 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <USART_1_IRQHandler+0xb0>)
 800089e:	f7ff fdf6 	bl	800048e <LL_USART_DisableIT_TXE>
 80008a2:	e00a      	b.n	80008ba <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 80008a4:	7afb      	ldrb	r3, [r7, #11]
 80008a6:	4619      	mov	r1, r3
 80008a8:	481d      	ldr	r0, [pc, #116]	; (8000920 <USART_1_IRQHandler+0xb0>)
 80008aa:	f7ff fe0e 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008ae:	481c      	ldr	r0, [pc, #112]	; (8000920 <USART_1_IRQHandler+0xb0>)
 80008b0:	f7ff fdba 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1e4      	bne.n	8000884 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d007      	beq.n	80008d0 <USART_1_IRQHandler+0x60>
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <USART_1_IRQHandler+0xb8>)
 80008c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	f3bf 8f4f 	dsb	sy
 80008cc:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80008d0:	4813      	ldr	r0, [pc, #76]	; (8000920 <USART_1_IRQHandler+0xb0>)
 80008d2:	f7ff fd96 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d01d      	beq.n	8000918 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80008dc:	e00b      	b.n	80008f6 <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 80008de:	4810      	ldr	r0, [pc, #64]	; (8000920 <USART_1_IRQHandler+0xb0>)
 80008e0:	f7ff fde5 	bl	80004ae <LL_USART_ReceiveData8>
 80008e4:	4603      	mov	r3, r0
        	uint8_t byte =
 80008e6:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <USART_1_IRQHandler+0xbc>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	1d3a      	adds	r2, r7, #4
 80008ee:	1cf9      	adds	r1, r7, #3
 80008f0:	2300      	movs	r3, #0
 80008f2:	f005 fb59 	bl	8005fa8 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <USART_1_IRQHandler+0xb0>)
 80008f8:	f7ff fd83 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1ed      	bne.n	80008de <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d007      	beq.n	8000918 <USART_1_IRQHandler+0xa8>
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <USART_1_IRQHandler+0xb8>)
 800090a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	f3bf 8f6f 	isb	sy
    }
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40013800 	.word	0x40013800
 8000924:	20001124 	.word	0x20001124
 8000928:	e000ed04 	.word	0xe000ed04
 800092c:	20001068 	.word	0x20001068

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fce9 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f841 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 fa89 	bl	8000e54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000942:	f000 f9ef 	bl	8000d24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000946:	f000 f88d 	bl	8000a64 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800094a:	f000 f951 	bl	8000bf0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800094e:	f000 f8ff 	bl	8000b50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 8000952:	2001      	movs	r0, #1
 8000954:	f005 fa11 	bl	8005d7a <xQueueCreateMutex>
 8000958:	4603      	mov	r3, r0
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <main+0x78>)
 800095c:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 800095e:	2001      	movs	r0, #1
 8000960:	f005 fa0b 	bl	8005d7a <xQueueCreateMutex>
 8000964:	4603      	mov	r3, r0
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <main+0x7c>)
 8000968:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <main+0x80>)
 800096c:	1d3c      	adds	r4, r7, #4
 800096e:	461d      	mov	r5, r3
 8000970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000974:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f005 f80a 	bl	800599a <osThreadCreate>
 8000986:	4603      	mov	r3, r0
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <main+0x84>)
 800098a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 800098c:	2300      	movs	r3, #0
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	2301      	movs	r3, #1
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2300      	movs	r3, #0
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <main+0x88>)
 800099a:	4808      	ldr	r0, [pc, #32]	; (80009bc <main+0x8c>)
 800099c:	f005 fe6d 	bl	800667a <xTaskCreate>
//			  1,          /* nivel de prioridade */
//			  NULL);      /* ponteiro para o handle da task */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009a0:	f004 fff4 	bl	800598c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0x74>
 80009a6:	bf00      	nop
 80009a8:	20000344 	.word	0x20000344
 80009ac:	20000348 	.word	0x20000348
 80009b0:	080085f0 	.word	0x080085f0
 80009b4:	20001064 	.word	0x20001064
 80009b8:	080085ec 	.word	0x080085ec
 80009bc:	08000669 	.word	0x08000669

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b096      	sub	sp, #88	; 0x58
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2244      	movs	r2, #68	; 0x44
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 f966 	bl	8007ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e6:	f002 f985 	bl	8002cf4 <HAL_PWREx_ControlVoltageScaling>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009f0:	f000 fab2 	bl	8000f58 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f4:	2302      	movs	r3, #2
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fe:	2310      	movs	r3, #16
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a06:	2302      	movs	r3, #2
 8000a08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a0e:	230a      	movs	r3, #10
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a12:	2307      	movs	r3, #7
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 f9bc 	bl	8002da0 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a2e:	f000 fa93 	bl	8000f58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	230f      	movs	r3, #15
 8000a34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2303      	movs	r3, #3
 8000a38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fd8e 	bl	800356c <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a56:	f000 fa7f 	bl	8000f58 <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3758      	adds	r7, #88	; 0x58
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000a88:	4a2f      	ldr	r2, [pc, #188]	; (8000b48 <MX_ADC1_Init+0xe4>)
 8000a8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000ae8:	f000 fe34 	bl	8001754 <HAL_ADC_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000af2:	f000 fa31 	bl	8000f58 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4810      	ldr	r0, [pc, #64]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000b02:	f001 fd95 	bl	8002630 <HAL_ADCEx_MultiModeConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b0c:	f000 fa24 	bl	8000f58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b14:	2306      	movs	r3, #6
 8000b16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1c:	237f      	movs	r3, #127	; 0x7f
 8000b1e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b20:	2304      	movs	r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_ADC1_Init+0xe0>)
 8000b2e:	f001 f907 	bl	8001d40 <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b38:	f000 fa0e 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200010b8 	.word	0x200010b8
 8000b48:	50040000 	.word	0x50040000
 8000b4c:	14f00020 	.word	0x14f00020

08000b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <MX_TIM3_Init+0x9c>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000b76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000b84:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000b98:	f003 fbc6 	bl	8004328 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000ba2:	f000 f9d9 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000bb4:	f003 fd9f 	bl	80046f6 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000bbe:	f000 f9cb 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_TIM3_Init+0x98>)
 8000bd0:	f003 ffb4 	bl	8004b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000bda:	f000 f9bd 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000106c 	.word	0x2000106c
 8000bec:	40000400 	.word	0x40000400

08000bf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0b0      	sub	sp, #192	; 0xc0
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2288      	movs	r2, #136	; 0x88
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f007 f83c 	bl	8007ca0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 febc 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f000 f98b 	bl	8000f58 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000c42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c46:	f7ff fc81 	bl	800054c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fc4e 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000c50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000c70:	2307      	movs	r3, #7
 8000c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f004 f94d 	bl	8004f1e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000c84:	f7ff fb0e 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fb5e 	bl	8000350 <NVIC_EncodePriority>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4619      	mov	r1, r3
 8000c98:	2025      	movs	r0, #37	; 0x25
 8000c9a:	f7ff fb2f 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000c9e:	2025      	movs	r0, #37	; 0x25
 8000ca0:	f7ff fb0e 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ca4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4810      	ldr	r0, [pc, #64]	; (8000d18 <MX_USART1_UART_Init+0x128>)
 8000cd8:	f004 fdc4 	bl	8005864 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <MX_USART1_UART_Init+0x128>)
 8000cde:	f7ff fb7a 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_USART1_UART_Init+0x128>)
 8000ce4:	f7ff fb67 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2101      	movs	r1, #1
 8000cec:	2080      	movs	r0, #128	; 0x80
 8000cee:	f004 ffd1 	bl	8005c94 <xQueueGenericCreate>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <MX_USART1_UART_Init+0x12c>)
 8000cf6:	6013      	str	r3, [r2, #0]
   rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	2005      	movs	r0, #5
 8000cfe:	f004 ffc9 	bl	8005c94 <xQueueGenericCreate>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <MX_USART1_UART_Init+0x130>)
 8000d06:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART1);
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_USART1_UART_Init+0x128>)
 8000d0a:	f7ff fba0 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	37c0      	adds	r7, #192	; 0xc0
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40013800 	.word	0x40013800
 8000d1c:	20001124 	.word	0x20001124
 8000d20:	20001068 	.word	0x20001068

08000d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0b0      	sub	sp, #192	; 0xc0
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2288      	movs	r2, #136	; 0x88
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f006 ffa2 	bl	8007ca0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 fe22 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d72:	f000 f8f1 	bl	8000f58 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000d76:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d7a:	f7ff fbcf 	bl	800051c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff fbb4 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000d84:	230c      	movs	r3, #12
 8000d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000da2:	2307      	movs	r3, #7
 8000da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f004 f8b4 	bl	8004f1e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000db6:	f7ff fa75 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fac5 	bl	8000350 <NVIC_EncodePriority>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2026      	movs	r0, #38	; 0x26
 8000dcc:	f7ff fa96 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000dd0:	2026      	movs	r0, #38	; 0x26
 8000dd2:	f7ff fa75 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000dd6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000df0:	230c      	movs	r3, #12
 8000df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8000e02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e06:	4619      	mov	r1, r3
 8000e08:	480f      	ldr	r0, [pc, #60]	; (8000e48 <MX_USART2_UART_Init+0x124>)
 8000e0a:	f004 fd2b 	bl	8005864 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_USART2_UART_Init+0x124>)
 8000e10:	f7ff fae1 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_USART2_UART_Init+0x124>)
 8000e16:	f7ff face 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	2080      	movs	r0, #128	; 0x80
 8000e20:	f004 ff38 	bl	8005c94 <xQueueGenericCreate>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <MX_USART2_UART_Init+0x128>)
 8000e28:	6013      	str	r3, [r2, #0]
   rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f004 ff30 	bl	8005c94 <xQueueGenericCreate>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <MX_USART2_UART_Init+0x12c>)
 8000e38:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART2);
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_USART2_UART_Init+0x124>)
 8000e3c:	f7ff fb07 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	37c0      	adds	r7, #192	; 0xc0
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	2000111c 	.word	0x2000111c
 8000e50:	20001120 	.word	0x20001120

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a2a      	ldr	r2, [pc, #168]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_GPIO_Init+0xc4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2132      	movs	r1, #50	; 0x32
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f001 fee9 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_GPIO_Init+0xcc>)
 8000eec:	f001 fd32 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8000ef0:	2332      	movs	r3, #50	; 0x32
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f001 fd23 	bl	8002954 <HAL_GPIO_Init>

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	10210000 	.word	0x10210000
 8000f20:	48000800 	.word	0x48000800

08000f24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f004 fd80 	bl	8005a32 <osDelay>
 8000f32:	e7fb      	b.n	8000f2c <StartDefaultTask+0x8>

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f46:	f000 fa01 	bl	800134c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40012c00 	.word	0x40012c00

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6613      	str	r3, [r2, #96]	; 0x60
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	f06f 0001 	mvn.w	r0, #1
 8000fa2:	f001 fcad 	bl	8002900 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0ac      	sub	sp, #176	; 0xb0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2288      	movs	r2, #136	; 0x88
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fe63 	bl	8007ca0 <memset>
  if(hadc->Instance==ADC1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a27      	ldr	r2, [pc, #156]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d147      	bne.n	8001074 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800100a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fccb 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001020:	f7ff ff9a 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 800102a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001054:	2301      	movs	r3, #1
 8001056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800105a:	230b      	movs	r3, #11
 800105c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f001 fc70 	bl	8002954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	37b0      	adds	r7, #176	; 0xb0
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	50040000 	.word	0x50040000
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_TIM_Base_MspInit+0x44>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d113      	bne.n	80010be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x48>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0x48>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6593      	str	r3, [r2, #88]	; 0x58
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x48>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	201d      	movs	r0, #29
 80010b4:	f001 fc24 	bl	8002900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010b8:	201d      	movs	r0, #29
 80010ba:	f001 fc3d 	bl	8002938 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40000400 	.word	0x40000400
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2019      	movs	r0, #25
 80010e6:	f001 fc0b 	bl	8002900 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010ea:	2019      	movs	r0, #25
 80010ec:	f001 fc24 	bl	8002938 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_InitTick+0x9c>)
 80010f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_InitTick+0x9c>)
 80010f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010fa:	6613      	str	r3, [r2, #96]	; 0x60
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_InitTick+0x9c>)
 80010fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001108:	f107 0210 	add.w	r2, r7, #16
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fbba 	bl	800388c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001118:	f002 fba2 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 800111c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_InitTick+0xa0>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3b01      	subs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_InitTick+0xa4>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_InitTick+0xa8>)
 8001130:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_InitTick+0xa4>)
 8001134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001138:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_InitTick+0xa4>)
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_InitTick+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_InitTick+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_InitTick+0xa4>)
 800114e:	f003 f8eb 	bl	8004328 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_InitTick+0xa4>)
 800115a:	f003 f93d 	bl	80043d8 <HAL_TIM_Base_Start_IT>
 800115e:	4603      	mov	r3, r0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	431bde83 	.word	0x431bde83
 8001174:	20001128 	.word	0x20001128
 8001178:	40012c00 	.word	0x40012c00

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011ae:	f003 f983 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20001128 	.word	0x20001128

080011bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM3_IRQHandler+0x10>)
 80011c2:	f003 f979 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000106c 	.word	0x2000106c

080011d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 80011d4:	f7ff fb4c 	bl	8000870 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 80011e0:	f7ff fae6 	bl	80007b0 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f006 fd08 	bl	8007c2c <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20018000 	.word	0x20018000
 8001248:	00000400 	.word	0x00000400
 800124c:	2000034c 	.word	0x2000034c
 8001250:	20001188 	.word	0x20001188

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <SystemInit+0x5c>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <SystemInit+0x5c>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <SystemInit+0x60>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <SystemInit+0x60>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <SystemInit+0x60>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <SystemInit+0x60>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <SystemInit+0x60>)
 8001280:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001284:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001288:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <SystemInit+0x60>)
 800128c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001290:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <SystemInit+0x60>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <SystemInit+0x60>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SystemInit+0x60>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	40021000 	.word	0x40021000

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff ffca 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
	ldr	r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <LoopForever+0x16>)
	cmp	r2, r3
 80012e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f006 fca7 	bl	8007c38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff fb21 	bl	8000930 <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80012f4:	080086f8 	.word	0x080086f8
	ldr	r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012fc:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001300:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001304:	20001188 	.word	0x20001188

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_Init+0x3c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_Init+0x3c>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001322:	2003      	movs	r0, #3
 8001324:	f001 fae1 	bl	80028ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001328:	200f      	movs	r0, #15
 800132a:	f7ff fed1 	bl	80010d0 <HAL_InitTick>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	e001      	b.n	800133e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800133a:	f7ff fe13 	bl	8000f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800133e:	79fb      	ldrb	r3, [r7, #7]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	20001174 	.word	0x20001174

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20001174 	.word	0x20001174

0800138c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3360      	adds	r3, #96	; 0x60
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_ADC_SetOffset+0x44>)
 8001416:	4013      	ands	r3, r2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	4313      	orrs	r3, r2
 8001424:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	03fff000 	.word	0x03fff000

0800143c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3360      	adds	r3, #96	; 0x60
 800144a:	461a      	mov	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3360      	adds	r3, #96	; 0x60
 8001478:	461a      	mov	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3330      	adds	r3, #48	; 0x30
 80014d4:	461a      	mov	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	4413      	add	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	211f      	movs	r1, #31
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0e9b      	lsrs	r3, r3, #26
 80014fc:	f003 011f 	and.w	r1, r3, #31
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	431a      	orrs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001510:	bf00      	nop
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3314      	adds	r3, #20
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0e5b      	lsrs	r3, r3, #25
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	0d1b      	lsrs	r3, r3, #20
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2107      	movs	r1, #7
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	401a      	ands	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	0d1b      	lsrs	r3, r3, #20
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0318 	and.w	r3, r3, #24
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001598:	40d9      	lsrs	r1, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	400b      	ands	r3, r1
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	0007ffff 	.word	0x0007ffff

080015bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 031f 	and.w	r3, r3, #31
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6093      	str	r3, [r2, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800162c:	d101      	bne.n	8001632 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <LL_ADC_IsEnabled+0x18>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_ADC_IsEnabled+0x1a>
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f2:	f043 0204 	orr.w	r2, r3, #4
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b04      	cmp	r3, #4
 8001718:	d101      	bne.n	800171e <LL_ADC_REG_IsConversionOngoing+0x18>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b08      	cmp	r3, #8
 800173e:	d101      	bne.n	8001744 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e136      	b.n	80019dc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fc19 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff3f 	bl	8001618 <LL_ADC_IsDeepPowerDownEnabled>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff25 	bl	80015f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff5a 	bl	8001668 <LL_ADC_IsInternalRegulatorEnabled>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d115      	bne.n	80017e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff3e 	bl	8001640 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017c4:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <HAL_ADC_Init+0x290>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	099b      	lsrs	r3, r3, #6
 80017ca:	4a87      	ldr	r2, [pc, #540]	; (80019e8 <HAL_ADC_Init+0x294>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	3301      	adds	r3, #1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017d8:	e002      	b.n	80017e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f9      	bne.n	80017da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff3c 	bl	8001668 <LL_ADC_IsInternalRegulatorEnabled>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10d      	bne.n	8001812 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f043 0210 	orr.w	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff75 	bl	8001706 <LL_ADC_REG_IsConversionOngoing>
 800181c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 80cf 	bne.w	80019ca <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80cb 	bne.w	80019ca <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800183c:	f043 0202 	orr.w	r2, r3, #2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff35 	bl	80016b8 <LL_ADC_IsEnabled>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d115      	bne.n	8001880 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001854:	4865      	ldr	r0, [pc, #404]	; (80019ec <HAL_ADC_Init+0x298>)
 8001856:	f7ff ff2f 	bl	80016b8 <LL_ADC_IsEnabled>
 800185a:	4604      	mov	r4, r0
 800185c:	4864      	ldr	r0, [pc, #400]	; (80019f0 <HAL_ADC_Init+0x29c>)
 800185e:	f7ff ff2b 	bl	80016b8 <LL_ADC_IsEnabled>
 8001862:	4603      	mov	r3, r0
 8001864:	431c      	orrs	r4, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <HAL_ADC_Init+0x2a0>)
 8001868:	f7ff ff26 	bl	80016b8 <LL_ADC_IsEnabled>
 800186c:	4603      	mov	r3, r0
 800186e:	4323      	orrs	r3, r4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4619      	mov	r1, r3
 800187a:	485f      	ldr	r0, [pc, #380]	; (80019f8 <HAL_ADC_Init+0x2a4>)
 800187c:	f7ff fd86 	bl	800138c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e5b      	ldrb	r3, [r3, #25]
 8001884:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800188a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001890:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001896:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	3b01      	subs	r3, #1
 80018b4:	045b      	lsls	r3, r3, #17
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_ADC_Init+0x2a8>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff08 	bl	8001706 <LL_ADC_REG_IsConversionOngoing>
 80018f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff15 	bl	800172c <LL_ADC_INJ_IsConversionOngoing>
 8001902:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d13d      	bne.n	8001986 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d13a      	bne.n	8001986 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001914:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800192c:	f023 0302 	bic.w	r3, r3, #2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	69b9      	ldr	r1, [r7, #24]
 8001936:	430b      	orrs	r3, r1
 8001938:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001940:	2b01      	cmp	r3, #1
 8001942:	d118      	bne.n	8001976 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001960:	4311      	orrs	r1, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001966:	430a      	orrs	r2, r1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	e007      	b.n	8001986 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10c      	bne.n	80019a8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f023 010f 	bic.w	r1, r3, #15
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30
 80019a6:	e007      	b.n	80019b8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020f 	bic.w	r2, r2, #15
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f023 0303 	bic.w	r3, r3, #3
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
 80019c8:	e007      	b.n	80019da <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ce:	f043 0210 	orr.w	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019da:	7ffb      	ldrb	r3, [r7, #31]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	053e2d63 	.word	0x053e2d63
 80019ec:	50040000 	.word	0x50040000
 80019f0:	50040100 	.word	0x50040100
 80019f4:	50040200 	.word	0x50040200
 80019f8:	50040300 	.word	0x50040300
 80019fc:	fff0c007 	.word	0xfff0c007

08001a00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a08:	4857      	ldr	r0, [pc, #348]	; (8001b68 <HAL_ADC_Start+0x168>)
 8001a0a:	f7ff fdd7 	bl	80015bc <LL_ADC_GetMultimode>
 8001a0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fe76 	bl	8001706 <LL_ADC_REG_IsConversionOngoing>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 809c 	bne.w	8001b5a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_Start+0x30>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e097      	b.n	8001b60 <HAL_ADC_Start+0x160>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fd71 	bl	8002520 <ADC_Enable>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 8083 	bne.w	8001b50 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_ADC_Start+0x16c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d002      	beq.n	8001a6e <HAL_ADC_Start+0x6e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	e000      	b.n	8001a70 <HAL_ADC_Start+0x70>
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_ADC_Start+0x170>)
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d002      	beq.n	8001a7e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	d106      	bne.n	8001aa6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f023 0206 	bic.w	r2, r3, #6
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	221c      	movs	r2, #28
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2a      	ldr	r2, [pc, #168]	; (8001b6c <HAL_ADC_Start+0x16c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d002      	beq.n	8001acc <HAL_ADC_Start+0xcc>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e000      	b.n	8001ace <HAL_ADC_Start+0xce>
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_ADC_Start+0x170>)
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d008      	beq.n	8001ae8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d002      	beq.n	8001ae8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	d114      	bne.n	8001b12 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001afe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fde7 	bl	80016de <LL_ADC_REG_StartConversion>
 8001b10:	e025      	b.n	8001b5e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_ADC_Start+0x16c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d002      	beq.n	8001b2e <HAL_ADC_Start+0x12e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_Start+0x130>
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_ADC_Start+0x170>)
 8001b30:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00f      	beq.n	8001b5e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b4e:	e006      	b.n	8001b5e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b58:	e001      	b.n	8001b5e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	50040300 	.word	0x50040300
 8001b6c:	50040100 	.word	0x50040100
 8001b70:	50040000 	.word	0x50040000

08001b74 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b7e:	4866      	ldr	r0, [pc, #408]	; (8001d18 <HAL_ADC_PollForConversion+0x1a4>)
 8001b80:	f7ff fd1c 	bl	80015bc <LL_ADC_GetMultimode>
 8001b84:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d102      	bne.n	8001b94 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e02a      	b.n	8001bea <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d002      	beq.n	8001ba6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b09      	cmp	r3, #9
 8001ba4:	d111      	bne.n	8001bca <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f043 0220 	orr.w	r2, r3, #32
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0a4      	b.n	8001d0e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bc8:	e00f      	b.n	8001bea <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bca:	4853      	ldr	r0, [pc, #332]	; (8001d18 <HAL_ADC_PollForConversion+0x1a4>)
 8001bcc:	f7ff fd04 	bl	80015d8 <LL_ADC_GetMultiDMATransfer>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e093      	b.n	8001d0e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001be6:	2304      	movs	r3, #4
 8001be8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bea:	f7ff fbc3 	bl	8001374 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bf0:	e021      	b.n	8001c36 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf8:	d01d      	beq.n	8001c36 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001bfa:	f7ff fbbb 	bl	8001374 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d302      	bcc.n	8001c10 <HAL_ADC_PollForConversion+0x9c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d112      	bne.n	8001c36 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	f043 0204 	orr.w	r2, r3, #4
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e06b      	b.n	8001d0e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0d6      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fc22 	bl	800149e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01c      	beq.n	8001c9a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7e5b      	ldrb	r3, [r3, #25]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d118      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d111      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_ADC_PollForConversion+0x1a8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d002      	beq.n	8001caa <HAL_ADC_PollForConversion+0x136>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_PollForConversion+0x138>
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_ADC_PollForConversion+0x1ac>)
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d008      	beq.n	8001cc6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d002      	beq.n	8001cc6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b09      	cmp	r3, #9
 8001cc4:	d104      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	e00c      	b.n	8001cea <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_ADC_PollForConversion+0x1a8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d002      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0x16c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e000      	b.n	8001ce2 <HAL_ADC_PollForConversion+0x16e>
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_ADC_PollForConversion+0x1ac>)
 8001ce2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d104      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e008      	b.n	8001d0c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	220c      	movs	r2, #12
 8001d0a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	50040300 	.word	0x50040300
 8001d1c:	50040100 	.word	0x50040100
 8001d20:	50040000 	.word	0x50040000

08001d24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0b6      	sub	sp, #216	; 0xd8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x22>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e3c7      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x7b2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fcc9 	bl	8001706 <LL_ADC_REG_IsConversionOngoing>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 83a8 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d824      	bhi.n	8001dce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	3b02      	subs	r3, #2
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d81b      	bhi.n	8001dc6 <HAL_ADC_ConfigChannel+0x86>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_ADC_ConfigChannel+0x54>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001dad 	.word	0x08001dad
 8001d9c:	08001db5 	.word	0x08001db5
 8001da0:	08001dbd 	.word	0x08001dbd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	220c      	movs	r2, #12
 8001da8:	605a      	str	r2, [r3, #4]
          break;
 8001daa:	e011      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2212      	movs	r2, #18
 8001db0:	605a      	str	r2, [r3, #4]
          break;
 8001db2:	e00d      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2218      	movs	r2, #24
 8001db8:	605a      	str	r2, [r3, #4]
          break;
 8001dba:	e009      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc2:	605a      	str	r2, [r3, #4]
          break;
 8001dc4:	e004      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2206      	movs	r2, #6
 8001dca:	605a      	str	r2, [r3, #4]
          break;
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001dce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f7ff fb71 	bl	80014c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fc8d 	bl	8001706 <LL_ADC_REG_IsConversionOngoing>
 8001dec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fc99 	bl	800172c <LL_ADC_INJ_IsConversionOngoing>
 8001dfa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 81a6 	bne.w	8002154 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 81a1 	bne.w	8002154 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f7ff fb7c 	bl	800151c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	08db      	lsrs	r3, r3, #3
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d00a      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6919      	ldr	r1, [r3, #16]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e56:	f7ff facd 	bl	80013f4 <LL_ADC_SetOffset>
 8001e5a:	e17b      	b.n	8002154 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff faea 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10a      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x148>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fadf 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	f003 021f 	and.w	r2, r3, #31
 8001e86:	e01e      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x186>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fad4 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e004      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001eba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x19e>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0e9b      	lsrs	r3, r3, #26
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	e018      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001efa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e004      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff faa3 	bl	8001468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2101      	movs	r1, #1
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fa87 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x20e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fa7c 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	0e9b      	lsrs	r3, r3, #26
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	e01e      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x24c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2101      	movs	r1, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fa71 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e004      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x264>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	e018      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x296>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e004      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d106      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fa40 	bl	8001468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2102      	movs	r1, #2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fa24 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10a      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x2d4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2102      	movs	r1, #2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fa19 	bl	800143c <LL_ADC_GetOffsetChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	f003 021f 	and.w	r2, r3, #31
 8002012:	e01e      	b.n	8002052 <HAL_ADC_ConfigChannel+0x312>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2102      	movs	r1, #2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fa0e 	bl	800143c <LL_ADC_GetOffsetChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800203a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e004      	b.n	8002050 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d105      	bne.n	800206a <HAL_ADC_ConfigChannel+0x32a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	e016      	b.n	8002098 <HAL_ADC_ConfigChannel+0x358>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800207c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800207e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002082:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800208a:	2320      	movs	r3, #32
 800208c:	e004      	b.n	8002098 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800208e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	2102      	movs	r1, #2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f9df 	bl	8001468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2103      	movs	r1, #3
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f9c3 	bl	800143c <LL_ADC_GetOffsetChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x396>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2103      	movs	r1, #3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f9b8 	bl	800143c <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	e017      	b.n	8002106 <HAL_ADC_ConfigChannel+0x3c6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2103      	movs	r1, #3
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f9ad 	bl	800143c <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e003      	b.n	8002104 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_ADC_ConfigChannel+0x3de>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	e011      	b.n	8002142 <HAL_ADC_ConfigChannel+0x402>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800212c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800212e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e003      	b.n	8002142 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800213a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002142:	429a      	cmp	r2, r3
 8002144:	d106      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	2103      	movs	r1, #3
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f98a 	bl	8001468 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff faad 	bl	80016b8 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 813f 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	461a      	mov	r2, r3
 8002174:	f7ff f9fe 	bl	8001574 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a8e      	ldr	r2, [pc, #568]	; (80023b8 <HAL_ADC_ConfigChannel+0x678>)
 800217e:	4293      	cmp	r3, r2
 8002180:	f040 8130 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x46c>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	3301      	adds	r3, #1
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2b09      	cmp	r3, #9
 80021a2:	bf94      	ite	ls
 80021a4:	2301      	movls	r3, #1
 80021a6:	2300      	movhi	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e019      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x4a0>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	bf94      	ite	ls
 80021da:	2301      	movls	r3, #1
 80021dc:	2300      	movhi	r3, #0
 80021de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d079      	beq.n	80022d8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x4c0>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	069b      	lsls	r3, r3, #26
 80021fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fe:	e015      	b.n	800222c <HAL_ADC_ConfigChannel+0x4ec>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800220e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002210:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800221c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	069b      	lsls	r3, r3, #26
 8002228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x50c>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	e017      	b.n	800227c <HAL_ADC_ConfigChannel+0x53c>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800225a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800225e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x562>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	051b      	lsls	r3, r3, #20
 80022a0:	e018      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x594>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80022ba:	2320      	movs	r3, #32
 80022bc:	e003      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d4:	430b      	orrs	r3, r1
 80022d6:	e080      	b.n	80023da <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x5b4>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f2:	e015      	b.n	8002320 <HAL_ADC_ConfigChannel+0x5e0>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	069b      	lsls	r3, r3, #26
 800231c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x600>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	e017      	b.n	8002370 <HAL_ADC_ConfigChannel+0x630>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	61fb      	str	r3, [r7, #28]
  return result;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10d      	bne.n	800239c <HAL_ADC_ConfigChannel+0x65c>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	3301      	adds	r3, #1
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	3b1e      	subs	r3, #30
 8002394:	051b      	lsls	r3, r3, #20
 8002396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800239a:	e01d      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x698>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	613b      	str	r3, [r7, #16]
  return result;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e005      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x684>
 80023b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	f003 021f 	and.w	r2, r3, #31
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	3b1e      	subs	r3, #30
 80023d2:	051b      	lsls	r3, r3, #20
 80023d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d8:	430b      	orrs	r3, r1
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	6892      	ldr	r2, [r2, #8]
 80023de:	4619      	mov	r1, r3
 80023e0:	f7ff f89c 	bl	800151c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b44      	ldr	r3, [pc, #272]	; (80024fc <HAL_ADC_ConfigChannel+0x7bc>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d07a      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f0:	4843      	ldr	r0, [pc, #268]	; (8002500 <HAL_ADC_ConfigChannel+0x7c0>)
 80023f2:	f7fe fff1 	bl	80013d8 <LL_ADC_GetCommonPathInternalCh>
 80023f6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a41      	ldr	r2, [pc, #260]	; (8002504 <HAL_ADC_ConfigChannel+0x7c4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d12c      	bne.n	800245e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d126      	bne.n	800245e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3c      	ldr	r2, [pc, #240]	; (8002508 <HAL_ADC_ConfigChannel+0x7c8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x6e4>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3b      	ldr	r2, [pc, #236]	; (800250c <HAL_ADC_ConfigChannel+0x7cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d15d      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800242c:	4619      	mov	r1, r3
 800242e:	4834      	ldr	r0, [pc, #208]	; (8002500 <HAL_ADC_ConfigChannel+0x7c0>)
 8002430:	f7fe ffbf 	bl	80013b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_ADC_ConfigChannel+0x7d0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	4a36      	ldr	r2, [pc, #216]	; (8002514 <HAL_ADC_ConfigChannel+0x7d4>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800244e:	e002      	b.n	8002456 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3b01      	subs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800245c:	e040      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <HAL_ADC_ConfigChannel+0x7d8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d118      	bne.n	800249a <HAL_ADC_ConfigChannel+0x75a>
 8002468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800246c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d112      	bne.n	800249a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_ADC_ConfigChannel+0x7c8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_ADC_ConfigChannel+0x748>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_ADC_ConfigChannel+0x7cc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d12d      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002490:	4619      	mov	r1, r3
 8002492:	481b      	ldr	r0, [pc, #108]	; (8002500 <HAL_ADC_ConfigChannel+0x7c0>)
 8002494:	f7fe ff8d 	bl	80013b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002498:	e024      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_ADC_ConfigChannel+0x7dc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d120      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d11a      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_ADC_ConfigChannel+0x7c8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d115      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024c2:	4619      	mov	r1, r3
 80024c4:	480e      	ldr	r0, [pc, #56]	; (8002500 <HAL_ADC_ConfigChannel+0x7c0>)
 80024c6:	f7fe ff74 	bl	80013b2 <LL_ADC_SetCommonPathInternalCh>
 80024ca:	e00c      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80024de:	e002      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	bf00      	nop
 80024e2:	e000      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	37d8      	adds	r7, #216	; 0xd8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	80080000 	.word	0x80080000
 8002500:	50040300 	.word	0x50040300
 8002504:	c7520000 	.word	0xc7520000
 8002508:	50040000 	.word	0x50040000
 800250c:	50040200 	.word	0x50040200
 8002510:	20000000 	.word	0x20000000
 8002514:	053e2d63 	.word	0x053e2d63
 8002518:	cb840000 	.word	0xcb840000
 800251c:	80000001 	.word	0x80000001

08002520 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff f8c3 	bl	80016b8 <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d14d      	bne.n	80025d4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <ADC_Enable+0xc0>)
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e039      	b.n	80025d6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f892 	bl	8001690 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800256c:	f7fe ff02 	bl	8001374 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002572:	e028      	b.n	80025c6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f89d 	bl	80016b8 <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f881 	bl	8001690 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258e:	f7fe fef1 	bl	8001374 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00d      	beq.n	80025c6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d1cf      	bne.n	8002574 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	8000003f 	.word	0x8000003f

080025e4 <LL_ADC_IsEnabled>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <LL_ADC_IsEnabled+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_IsEnabled+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_REG_IsConversionOngoing>:
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d101      	bne.n	8002622 <LL_ADC_REG_IsConversionOngoing+0x18>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b09f      	sub	sp, #124	; 0x7c
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800264a:	2302      	movs	r3, #2
 800264c:	e093      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002656:	2300      	movs	r3, #0
 8002658:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800265a:	2300      	movs	r3, #0
 800265c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a47      	ldr	r2, [pc, #284]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d102      	bne.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002668:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	e001      	b.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e072      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ffb9 	bl	800260a <LL_ADC_REG_IsConversionOngoing>
 8002698:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ffb3 	bl	800260a <LL_ADC_REG_IsConversionOngoing>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d154      	bne.n	8002754 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d151      	bne.n	8002754 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80026b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02c      	beq.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ce:	035b      	lsls	r3, r3, #13
 80026d0:	430b      	orrs	r3, r1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d8:	4829      	ldr	r0, [pc, #164]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026da:	f7ff ff83 	bl	80025e4 <LL_ADC_IsEnabled>
 80026de:	4604      	mov	r4, r0
 80026e0:	4828      	ldr	r0, [pc, #160]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026e2:	f7ff ff7f 	bl	80025e4 <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	431c      	orrs	r4, r3
 80026ea:	4828      	ldr	r0, [pc, #160]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026ec:	f7ff ff7a 	bl	80025e4 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4323      	orrs	r3, r4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d137      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002700:	f023 030f 	bic.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	6811      	ldr	r1, [r2, #0]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	6892      	ldr	r2, [r2, #8]
 800270c:	430a      	orrs	r2, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002712:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002714:	e028      	b.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002720:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002722:	4817      	ldr	r0, [pc, #92]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002724:	f7ff ff5e 	bl	80025e4 <LL_ADC_IsEnabled>
 8002728:	4604      	mov	r4, r0
 800272a:	4816      	ldr	r0, [pc, #88]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800272c:	f7ff ff5a 	bl	80025e4 <LL_ADC_IsEnabled>
 8002730:	4603      	mov	r3, r0
 8002732:	431c      	orrs	r4, r3
 8002734:	4815      	ldr	r0, [pc, #84]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002736:	f7ff ff55 	bl	80025e4 <LL_ADC_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	4323      	orrs	r3, r4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d112      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800274a:	f023 030f 	bic.w	r3, r3, #15
 800274e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002750:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002752:	e009      	b.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002766:	e000      	b.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002768:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002772:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002776:	4618      	mov	r0, r3
 8002778:	377c      	adds	r7, #124	; 0x7c
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	bf00      	nop
 8002780:	50040000 	.word	0x50040000
 8002784:	50040100 	.word	0x50040100
 8002788:	50040300 	.word	0x50040300
 800278c:	50040200 	.word	0x50040200

08002790 <__NVIC_SetPriorityGrouping>:
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ff4c 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002912:	f7ff ff61 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 8002916:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	6978      	ldr	r0, [r7, #20]
 800291e:	f7ff ffb1 	bl	8002884 <NVIC_EncodePriority>
 8002922:	4602      	mov	r2, r0
 8002924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff80 	bl	8002830 <__NVIC_SetPriority>
}
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff54 	bl	80027f4 <__NVIC_EnableIRQ>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002962:	e17f      	b.n	8002c64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8171 	beq.w	8002c5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d00b      	beq.n	800299c <HAL_GPIO_Init+0x48>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d007      	beq.n	800299c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002990:	2b11      	cmp	r3, #17
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b12      	cmp	r3, #18
 800299a:	d130      	bne.n	80029fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d2:	2201      	movs	r2, #1
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0201 	and.w	r2, r3, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d118      	bne.n	8002a3c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a10:	2201      	movs	r2, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	f003 0201 	and.w	r2, r3, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x128>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b12      	cmp	r3, #18
 8002a7a:	d123      	bne.n	8002ac4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	6939      	ldr	r1, [r7, #16]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80ac 	beq.w	8002c5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_GPIO_Init+0x330>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	; (8002c84 <HAL_GPIO_Init+0x330>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6613      	str	r3, [r2, #96]	; 0x60
 8002b12:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_GPIO_Init+0x330>)
 8002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <HAL_GPIO_Init+0x334>)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x242>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <HAL_GPIO_Init+0x338>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x23e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_GPIO_Init+0x33c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x23a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <HAL_GPIO_Init+0x340>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x236>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_GPIO_Init+0x344>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x232>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <HAL_GPIO_Init+0x348>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x22e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_GPIO_Init+0x34c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x22a>
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b96:	2300      	movs	r3, #0
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba8:	4937      	ldr	r1, [pc, #220]	; (8002c88 <HAL_GPIO_Init+0x334>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bda:	4a32      	ldr	r2, [pc, #200]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002be0:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c04:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f47f ae78 	bne.w	8002964 <HAL_GPIO_Init+0x10>
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	48001000 	.word	0x48001000
 8002c9c:	48001400 	.word	0x48001400
 8002ca0:	48001800 	.word	0x48001800
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000

08002cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d02:	d130      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d10:	d038      	beq.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2232      	movs	r2, #50	; 0x32
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9b      	lsrs	r3, r3, #18
 8002d34:	3301      	adds	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d38:	e002      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4c:	d102      	bne.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f2      	bne.n	8002d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d110      	bne.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e00f      	b.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d007      	beq.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7c:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40007000 	.word	0x40007000
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	431bde83 	.word	0x431bde83

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e3d4      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4ba1      	ldr	r3, [pc, #644]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b9e      	ldr	r3, [pc, #632]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80e4 	beq.w	8002f9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_RCC_OscConfig+0x4a>
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	f040 808b 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f040 8087 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dea:	4b93      	ldr	r3, [pc, #588]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e3ac      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_RCC_OscConfig+0x7c>
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1a:	e005      	b.n	8002e28 <HAL_RCC_OscConfig+0x88>
 8002e1c:	4b86      	ldr	r3, [pc, #536]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d223      	bcs.n	8002e74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fd5d 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e38d      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e40:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4977      	ldr	r1, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5e:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	4972      	ldr	r1, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
 8002e72:	e025      	b.n	8002ec0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e74:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	496a      	ldr	r1, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e92:	4b69      	ldr	r3, [pc, #420]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	4965      	ldr	r1, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fd1d 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e34d      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec0:	f000 fc36 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	495a      	ldr	r1, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x29c>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_OscConfig+0x2a0>)
 8002ede:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee0:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x2a4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe f8f3 	bl	80010d0 <HAL_InitTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d052      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	e331      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d032      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f00:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fa32 	bl	8001374 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f14:	f7fe fa2e 	bl	8001374 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e31a      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	493b      	ldr	r1, [pc, #236]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	4936      	ldr	r1, [pc, #216]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	e01a      	b.n	8002f9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f66:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a33      	ldr	r2, [pc, #204]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f72:	f7fe f9ff 	bl	8001374 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fe f9fb 	bl	8001374 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e2e7      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x1da>
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d074      	beq.n	8003092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x21a>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d10e      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d064      	beq.n	8003090 <HAL_RCC_OscConfig+0x2f0>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d160      	bne.n	8003090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e2c4      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x24a>
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e01d      	b.n	8003026 <HAL_RCC_OscConfig+0x286>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x26e>
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e00b      	b.n	8003026 <HAL_RCC_OscConfig+0x286>
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a06      	ldr	r2, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01c      	beq.n	8003068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe f9a1 	bl	8001374 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003034:	e011      	b.n	800305a <HAL_RCC_OscConfig+0x2ba>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	08008614 	.word	0x08008614
 8003040:	20000000 	.word	0x20000000
 8003044:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe f994 	bl	8001374 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e280      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305a:	4baf      	ldr	r3, [pc, #700]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x2a8>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe f984 	bl	8001374 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe f980 	bl	8001374 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e26c      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	4ba5      	ldr	r3, [pc, #660]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x2d0>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d060      	beq.n	8003160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x310>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d119      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d116      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	4b99      	ldr	r3, [pc, #612]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x328>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e249      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b93      	ldr	r3, [pc, #588]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4990      	ldr	r1, [pc, #576]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030dc:	e040      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d023      	beq.n	800312e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e6:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a8b      	ldr	r2, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe f93f 	bl	8001374 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe f93b 	bl	8001374 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e227      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b7f      	ldr	r3, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	497c      	ldr	r1, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e018      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a79      	ldr	r2, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe f91b 	bl	8001374 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7fe f917 	bl	8001374 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e203      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01c      	beq.n	80031ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003174:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	4a67      	ldr	r2, [pc, #412]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe f8f6 	bl	8001374 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe f8f2 	bl	8001374 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1de      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319e:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ef      	beq.n	800318c <HAL_RCC_OscConfig+0x3ec>
 80031ac:	e01b      	b.n	80031e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe f8d9 	bl	8001374 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fe f8d5 	bl	8001374 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1c1      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ef      	bne.n	80031c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80a6 	beq.w	8003340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	4a43      	ldr	r2, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	; 0x58
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321c:	2301      	movs	r3, #1
 800321e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d118      	bne.n	800325e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3a      	ldr	r2, [pc, #232]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003238:	f7fe f89c 	bl	8001374 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7fe f898 	bl	8001374 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e184      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x4d8>
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	e024      	b.n	80032c2 <HAL_RCC_OscConfig+0x522>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d110      	bne.n	80032a2 <HAL_RCC_OscConfig+0x502>
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a24      	ldr	r2, [pc, #144]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a0:	e00f      	b.n	80032c2 <HAL_RCC_OscConfig+0x522>
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032ba:	f023 0304 	bic.w	r3, r3, #4
 80032be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe f853 	bl	8001374 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe f84f 	bl	8001374 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e139      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ed      	beq.n	80032d2 <HAL_RCC_OscConfig+0x532>
 80032f6:	e01a      	b.n	800332e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe f83c 	bl	8001374 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fe f838 	bl	8001374 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d906      	bls.n	8003320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e122      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003320:	4b90      	ldr	r3, [pc, #576]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e8      	bne.n	8003300 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a8a      	ldr	r2, [pc, #552]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8108 	beq.w	800355a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	2b02      	cmp	r3, #2
 8003350:	f040 80d0 	bne.w	80034f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003354:	4b83      	ldr	r3, [pc, #524]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	429a      	cmp	r2, r3
 8003366:	d130      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d127      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11f      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003394:	2a07      	cmp	r2, #7
 8003396:	bf14      	ite	ne
 8003398:	2201      	movne	r2, #1
 800339a:	2200      	moveq	r2, #0
 800339c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339e:	4293      	cmp	r3, r2
 80033a0:	d113      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	3b01      	subs	r3, #1
 80033b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d06e      	beq.n	80034a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d069      	beq.n	80034a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d0:	4b64      	ldr	r3, [pc, #400]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b7      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ec:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f8:	f7fd ffbc 	bl	8001374 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd ffb8 	bl	8001374 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0a4      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341e:	4b51      	ldr	r3, [pc, #324]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_OscConfig+0x7c8>)
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800342e:	3a01      	subs	r2, #1
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003438:	0212      	lsls	r2, r2, #8
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	3a01      	subs	r2, #1
 8003444:	0552      	lsls	r2, r2, #21
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800344c:	0852      	lsrs	r2, r2, #1
 800344e:	3a01      	subs	r2, #1
 8003450:	0652      	lsls	r2, r2, #25
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003458:	0912      	lsrs	r2, r2, #4
 800345a:	0452      	lsls	r2, r2, #17
 800345c:	430a      	orrs	r2, r1
 800345e:	4941      	ldr	r1, [pc, #260]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3e      	ldr	r2, [pc, #248]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a3b      	ldr	r2, [pc, #236]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800347c:	f7fd ff7a 	bl	8001374 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd ff76 	bl	8001374 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e062      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a2:	e05a      	b.n	800355a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e059      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a8:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d152      	bne.n	800355a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a27      	ldr	r2, [pc, #156]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034cc:	f7fd ff52 	bl	8001374 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fd ff4e 	bl	8001374 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e03a      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x734>
 80034f2:	e032      	b.n	800355a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d02d      	beq.n	8003556 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003504:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4a13      	ldr	r2, [pc, #76]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003518:	f023 0303 	bic.w	r3, r3, #3
 800351c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003524:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd ff21 	bl	8001374 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd ff1d 	bl	8001374 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e009      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x796>
 8003554:	e001      	b.n	800355a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	f99d808c 	.word	0xf99d808c

0800356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0c8      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d910      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 0207 	bic.w	r2, r3, #7
 8003596:	4961      	ldr	r1, [pc, #388]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0b0      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d04c      	beq.n	8003656 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c4:	4b56      	ldr	r3, [pc, #344]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e09e      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035dc:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d115      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e092      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f4:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e086      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003604:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e07e      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 0203 	bic.w	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	493f      	ldr	r1, [pc, #252]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fd fea5 	bl	8001374 <HAL_GetTick>
 800362a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362c:	e00a      	b.n	8003644 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fd fea1 	bl	8001374 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e066      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 020c 	and.w	r2, r3, #12
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	429a      	cmp	r2, r3
 8003654:	d1eb      	bne.n	800362e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	492c      	ldr	r1, [pc, #176]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d210      	bcs.n	80036a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 0207 	bic.w	r2, r3, #7
 800368a:	4924      	ldr	r1, [pc, #144]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b22      	ldr	r3, [pc, #136]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e036      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4918      	ldr	r1, [pc, #96]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4910      	ldr	r1, [pc, #64]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e2:	f000 f825 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	490c      	ldr	r1, [pc, #48]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	5ccb      	ldrb	r3, [r1, r3]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fce2 	bl	80010d0 <HAL_InitTick>
 800370c:	4603      	mov	r3, r0
 800370e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003710:	7afb      	ldrb	r3, [r7, #11]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	08008614 	.word	0x08008614
 8003728:	20000000 	.word	0x20000000
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373e:	4b3e      	ldr	r3, [pc, #248]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003748:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x34>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d121      	bne.n	80037a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d11e      	bne.n	80037a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003764:	4b34      	ldr	r3, [pc, #208]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003770:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e005      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_RCC_GetSysClockFreq+0x10c>)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003794:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_GetSysClockFreq+0x110>)
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e004      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_RCC_GetSysClockFreq+0x114>)
 80037b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d134      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d003      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0xac>
 80037d4:	e005      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <HAL_RCC_GetSysClockFreq+0x110>)
 80037d8:	617b      	str	r3, [r7, #20]
      break;
 80037da:	e005      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_GetSysClockFreq+0x114>)
 80037de:	617b      	str	r3, [r7, #20]
      break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	617b      	str	r3, [r7, #20]
      break;
 80037e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	3301      	adds	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	fb02 f203 	mul.w	r2, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	0e5b      	lsrs	r3, r3, #25
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	3301      	adds	r3, #1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003828:	69bb      	ldr	r3, [r7, #24]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	0800862c 	.word	0x0800862c
 8003840:	00f42400 	.word	0x00f42400
 8003844:	007a1200 	.word	0x007a1200

08003848 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <HAL_RCC_GetHCLKFreq+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003864:	f7ff fff0 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0adb      	lsrs	r3, r3, #11
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	08008624 	.word	0x08008624

0800388c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	220f      	movs	r2, #15
 800389a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	08db      	lsrs	r3, r3, #3
 80038c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_RCC_GetClockConfig+0x60>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0207 	and.w	r2, r3, #7
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	601a      	str	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40022000 	.word	0x40022000

080038f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003908:	f7ff f9e6 	bl	8002cd8 <HAL_PWREx_GetVoltageRange>
 800390c:	6178      	str	r0, [r7, #20]
 800390e:	e014      	b.n	800393a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
 800391c:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003928:	f7ff f9d6 	bl	8002cd8 <HAL_PWREx_GetVoltageRange>
 800392c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d10b      	bne.n	800395a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d919      	bls.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2ba0      	cmp	r3, #160	; 0xa0
 800394c:	d902      	bls.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800394e:	2302      	movs	r3, #2
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e013      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e010      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d902      	bls.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003960:	2303      	movs	r3, #3
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e00a      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d102      	bne.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800396c:	2302      	movs	r3, #2
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	e004      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b70      	cmp	r3, #112	; 0x70
 8003976:	d101      	bne.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 0207 	bic.w	r2, r3, #7
 8003984:	4909      	ldr	r1, [pc, #36]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40022000 	.word	0x40022000

080039b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039b8:	2300      	movs	r3, #0
 80039ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039bc:	2300      	movs	r3, #0
 80039be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d041      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039d4:	d02a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039da:	d824      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e0:	d008      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e6:	d81e      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f0:	d010      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039f2:	e018      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039f4:	4b86      	ldr	r3, [pc, #536]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4a85      	ldr	r2, [pc, #532]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a00:	e015      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fabb 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a12:	e00c      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3320      	adds	r3, #32
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fba6 	bl	800416c <RCCEx_PLLSAI2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a24:	e003      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	74fb      	strb	r3, [r7, #19]
      break;
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a34:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a42:	4973      	ldr	r1, [pc, #460]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a4a:	e001      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d041      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a64:	d02a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a6a:	d824      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a70:	d008      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a76:	d81e      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a82:	e018      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a84:	4b62      	ldr	r3, [pc, #392]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a61      	ldr	r2, [pc, #388]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a90:	e015      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa73 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa2:	e00c      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3320      	adds	r3, #32
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fb5e 	bl	800416c <RCCEx_PLLSAI2_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aba:	e000      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ac4:	4b52      	ldr	r3, [pc, #328]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad2:	494f      	ldr	r1, [pc, #316]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ada:	e001      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80a0 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6593      	str	r3, [r2, #88]	; 0x58
 8003b14:	4b3e      	ldr	r3, [pc, #248]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b24:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3a      	ldr	r2, [pc, #232]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fc20 	bl	8001374 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b36:	e009      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fd fc1c 	bl	8001374 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d902      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	74fb      	strb	r3, [r7, #19]
        break;
 8003b4a:	e005      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ef      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d15c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01f      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d019      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	4a1c      	ldr	r2, [pc, #112]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fbdb 	bl	8001374 <HAL_GetTick>
 8003bbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc0:	e00b      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd fbd7 	bl	8001374 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d902      	bls.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	74fb      	strb	r3, [r7, #19]
            break;
 8003bd8:	e006      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ec      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfe:	4904      	ldr	r1, [pc, #16]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c06:	e009      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
 8003c0c:	e006      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c1c:	7c7b      	ldrb	r3, [r7, #17]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4b9e      	ldr	r3, [pc, #632]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	4a9d      	ldr	r2, [pc, #628]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3a:	4b98      	ldr	r3, [pc, #608]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f023 0203 	bic.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	4994      	ldr	r1, [pc, #592]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 020c 	bic.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	498c      	ldr	r1, [pc, #560]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c7e:	4b87      	ldr	r3, [pc, #540]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4983      	ldr	r1, [pc, #524]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	497b      	ldr	r1, [pc, #492]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd0:	4972      	ldr	r1, [pc, #456]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce4:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	496a      	ldr	r1, [pc, #424]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d06:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	4961      	ldr	r1, [pc, #388]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d28:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	4959      	ldr	r1, [pc, #356]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4a:	4b54      	ldr	r3, [pc, #336]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d58:	4950      	ldr	r1, [pc, #320]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	4948      	ldr	r1, [pc, #288]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	493f      	ldr	r1, [pc, #252]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d028      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db0:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	4937      	ldr	r1, [pc, #220]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dce:	d106      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dda:	60d3      	str	r3, [r2, #12]
 8003ddc:	e011      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f8c8 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	491f      	ldr	r1, [pc, #124]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e38:	60d3      	str	r3, [r2, #12]
 8003e3a:	e011      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f899 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02b      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	4908      	ldr	r1, [pc, #32]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a02      	ldr	r2, [pc, #8]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
 8003e98:	e014      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f867 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ede:	4928      	ldr	r1, [pc, #160]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eee:	d10d      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f844 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d014      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	74bb      	strb	r3, [r7, #18]
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3320      	adds	r3, #32
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f925 	bl	800416c <RCCEx_PLLSAI2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4a:	490d      	ldr	r1, [pc, #52]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6e:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000

08003f84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f92:	4b75      	ldr	r3, [pc, #468]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f9e:	4b72      	ldr	r3, [pc, #456]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0203 	and.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d10d      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fb6:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d047      	beq.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e044      	b.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d018      	beq.n	800400a <RCCEx_PLLSAI1_Config+0x86>
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d825      	bhi.n	8004028 <RCCEx_PLLSAI1_Config+0xa4>
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d002      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x62>
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d009      	beq.n	8003ff8 <RCCEx_PLLSAI1_Config+0x74>
 8003fe4:	e020      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fe6:	4b60      	ldr	r3, [pc, #384]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11d      	bne.n	800402e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e01a      	b.n	800402e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ff8:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d116      	bne.n	8004032 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004008:	e013      	b.n	8004032 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400a:	4b57      	ldr	r3, [pc, #348]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004016:	4b54      	ldr	r3, [pc, #336]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004026:	e006      	b.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e004      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004036:	bf00      	nop
    }

    if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800403e:	4b4a      	ldr	r3, [pc, #296]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	430b      	orrs	r3, r1
 8004054:	4944      	ldr	r1, [pc, #272]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d17d      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a40      	ldr	r2, [pc, #256]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd f982 	bl	8001374 <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004072:	e009      	b.n	8004088 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004074:	f7fd f97e 	bl	8001374 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d902      	bls.n	8004088 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	73fb      	strb	r3, [r7, #15]
        break;
 8004086:	e005      	b.n	8004094 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004088:	4b37      	ldr	r3, [pc, #220]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ef      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d160      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d111      	bne.n	80040c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a0:	4b31      	ldr	r3, [pc, #196]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	0211      	lsls	r1, r2, #8
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	0912      	lsrs	r2, r2, #4
 80040b8:	0452      	lsls	r2, r2, #17
 80040ba:	430a      	orrs	r2, r1
 80040bc:	492a      	ldr	r1, [pc, #168]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
 80040c2:	e027      	b.n	8004114 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d112      	bne.n	80040f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6892      	ldr	r2, [r2, #8]
 80040da:	0211      	lsls	r1, r2, #8
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6912      	ldr	r2, [r2, #16]
 80040e0:	0852      	lsrs	r2, r2, #1
 80040e2:	3a01      	subs	r2, #1
 80040e4:	0552      	lsls	r2, r2, #21
 80040e6:	430a      	orrs	r2, r1
 80040e8:	491f      	ldr	r1, [pc, #124]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	610b      	str	r3, [r1, #16]
 80040ee:	e011      	b.n	8004114 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6892      	ldr	r2, [r2, #8]
 8004100:	0211      	lsls	r1, r2, #8
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6952      	ldr	r2, [r2, #20]
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0652      	lsls	r2, r2, #25
 800410c:	430a      	orrs	r2, r1
 800410e:	4916      	ldr	r1, [pc, #88]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a13      	ldr	r2, [pc, #76]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800411e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fd f928 	bl	8001374 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004126:	e009      	b.n	800413c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004128:	f7fd f924 	bl	8001374 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	73fb      	strb	r3, [r7, #15]
          break;
 800413a:	e005      	b.n	8004148 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000

0800416c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417a:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0203 	and.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d10d      	bne.n	80041b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
       ||
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800419e:	4b61      	ldr	r3, [pc, #388]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
       ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d047      	beq.n	8004242 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e044      	b.n	8004242 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d018      	beq.n	80041f2 <RCCEx_PLLSAI2_Config+0x86>
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d825      	bhi.n	8004210 <RCCEx_PLLSAI2_Config+0xa4>
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d002      	beq.n	80041ce <RCCEx_PLLSAI2_Config+0x62>
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d009      	beq.n	80041e0 <RCCEx_PLLSAI2_Config+0x74>
 80041cc:	e020      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ce:	4b55      	ldr	r3, [pc, #340]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e01a      	b.n	8004216 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e0:	4b50      	ldr	r3, [pc, #320]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d116      	bne.n	800421a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f0:	e013      	b.n	800421a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f2:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10f      	bne.n	800421e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041fe:	4b49      	ldr	r3, [pc, #292]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800420e:	e006      	b.n	800421e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e004      	b.n	8004220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004216:	bf00      	nop
 8004218:	e002      	b.n	8004220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800421e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004226:	4b3f      	ldr	r3, [pc, #252]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	430b      	orrs	r3, r1
 800423c:	4939      	ldr	r1, [pc, #228]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d167      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a35      	ldr	r2, [pc, #212]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fd f88e 	bl	8001374 <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800425a:	e009      	b.n	8004270 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800425c:	f7fd f88a 	bl	8001374 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	73fb      	strb	r3, [r7, #15]
        break;
 800426e:	e005      	b.n	800427c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ef      	bne.n	800425c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d14a      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d111      	bne.n	80042ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004288:	4b26      	ldr	r3, [pc, #152]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0211      	lsls	r1, r2, #8
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	0912      	lsrs	r2, r2, #4
 80042a0:	0452      	lsls	r2, r2, #17
 80042a2:	430a      	orrs	r2, r1
 80042a4:	491f      	ldr	r1, [pc, #124]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	614b      	str	r3, [r1, #20]
 80042aa:	e011      	b.n	80042d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	0211      	lsls	r1, r2, #8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6912      	ldr	r2, [r2, #16]
 80042c2:	0852      	lsrs	r2, r2, #1
 80042c4:	3a01      	subs	r2, #1
 80042c6:	0652      	lsls	r2, r2, #25
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4916      	ldr	r1, [pc, #88]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a13      	ldr	r2, [pc, #76]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fd f84a 	bl	8001374 <HAL_GetTick>
 80042e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e2:	e009      	b.n	80042f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042e4:	f7fd f846 	bl	8001374 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	73fb      	strb	r3, [r7, #15]
          break;
 80042f6:	e005      	b.n	8004304 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4904      	ldr	r1, [pc, #16]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000

08004328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e049      	b.n	80043ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fc fe98 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 fab4 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e04f      	b.n	8004490 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <HAL_TIM_Base_Start_IT+0xc4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01d      	beq.n	800444e <HAL_TIM_Base_Start_IT+0x76>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d018      	beq.n	800444e <HAL_TIM_Base_Start_IT+0x76>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_TIM_Base_Start_IT+0x76>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_TIM_Base_Start_IT+0x76>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_TIM_Base_Start_IT+0x76>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIM_Base_Start_IT+0x76>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d115      	bne.n	800447a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004456:	4013      	ands	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b06      	cmp	r3, #6
 800445e:	d015      	beq.n	800448c <HAL_TIM_Base_Start_IT+0xb4>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d011      	beq.n	800448c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	e008      	b.n	800448c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e000      	b.n	800448e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800
 80044a8:	40000c00 	.word	0x40000c00
 80044ac:	40013400 	.word	0x40013400
 80044b0:	40014000 	.word	0x40014000
 80044b4:	00010007 	.word	0x00010007

080044b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d122      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11b      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0202 	mvn.w	r2, #2
 80044e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9cb 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9bd 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f9ce 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0204 	mvn.w	r2, #4
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9a1 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f993 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f9a4 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b08      	cmp	r3, #8
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f977 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f969 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f97a 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d122      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d11b      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0210 	mvn.w	r2, #16
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2208      	movs	r2, #8
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f94d 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f93f 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f950 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10e      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0201 	mvn.w	r2, #1
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fc7c 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fafc 	bl	8004c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	d10e      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b80      	cmp	r3, #128	; 0x80
 8004684:	d107      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 faef 	bl	8004c74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d10e      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f8fe 	bl	80048be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d10e      	bne.n	80046ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f06f 0220 	mvn.w	r2, #32
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 faaf 	bl	8004c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_TIM_ConfigClockSource+0x18>
 800470a:	2302      	movs	r3, #2
 800470c:	e0b5      	b.n	800487a <HAL_TIM_ConfigClockSource+0x184>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004730:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004738:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474a:	d03e      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0xd4>
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	f200 8087 	bhi.w	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004758:	f000 8085 	beq.w	8004866 <HAL_TIM_ConfigClockSource+0x170>
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d87f      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 8004762:	2b70      	cmp	r3, #112	; 0x70
 8004764:	d01a      	beq.n	800479c <HAL_TIM_ConfigClockSource+0xa6>
 8004766:	2b70      	cmp	r3, #112	; 0x70
 8004768:	d87b      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 800476a:	2b60      	cmp	r3, #96	; 0x60
 800476c:	d050      	beq.n	8004810 <HAL_TIM_ConfigClockSource+0x11a>
 800476e:	2b60      	cmp	r3, #96	; 0x60
 8004770:	d877      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 8004772:	2b50      	cmp	r3, #80	; 0x50
 8004774:	d03c      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0xfa>
 8004776:	2b50      	cmp	r3, #80	; 0x50
 8004778:	d873      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d058      	beq.n	8004830 <HAL_TIM_ConfigClockSource+0x13a>
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d86f      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 8004782:	2b30      	cmp	r3, #48	; 0x30
 8004784:	d064      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0x15a>
 8004786:	2b30      	cmp	r3, #48	; 0x30
 8004788:	d86b      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 800478a:	2b20      	cmp	r3, #32
 800478c:	d060      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0x15a>
 800478e:	2b20      	cmp	r3, #32
 8004790:	d867      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d05c      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0x15a>
 8004796:	2b10      	cmp	r3, #16
 8004798:	d05a      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800479a:	e062      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6899      	ldr	r1, [r3, #8]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f000 f9a6 	bl	8004afc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]
      break;
 80047c8:	e04e      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6899      	ldr	r1, [r3, #8]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f000 f98f 	bl	8004afc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ec:	609a      	str	r2, [r3, #8]
      break;
 80047ee:	e03b      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f000 f903 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2150      	movs	r1, #80	; 0x50
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f95c 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 800480e:	e02b      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	461a      	mov	r2, r3
 800481e:	f000 f922 	bl	8004a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2160      	movs	r1, #96	; 0x60
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f94c 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 800482e:	e01b      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	461a      	mov	r2, r3
 800483e:	f000 f8e3 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	4618      	mov	r0, r3
 800484a:	f000 f93c 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 800484e:	e00b      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f000 f933 	bl	8004ac6 <TIM_ITRx_SetConfig>
        break;
 8004860:	e002      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d00f      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <TIM_Base_SetConfig+0x118>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00b      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d108      	bne.n	8004926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01f      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d01b      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <TIM_Base_SetConfig+0x118>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d017      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00f      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a28      	ldr	r2, [pc, #160]	; (80049fc <TIM_Base_SetConfig+0x128>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a11      	ldr	r2, [pc, #68]	; (80049fc <TIM_Base_SetConfig+0x128>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0f      	ldr	r2, [pc, #60]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 030a 	bic.w	r3, r3, #10
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b087      	sub	sp, #28
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0210 	bic.w	r2, r3, #16
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	031b      	lsls	r3, r3, #12
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f043 0307 	orr.w	r3, r3, #7
 8004ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	021a      	lsls	r2, r3, #8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	609a      	str	r2, [r3, #8]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e068      	b.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2e      	ldr	r2, [pc, #184]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d018      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10c      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40013400 	.word	0x40013400
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40014000 	.word	0x40014000

08004c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b08b      	sub	sp, #44	; 0x2c
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	613b      	str	r3, [r7, #16]
  return result;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	e003      	b.n	8004cba <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	fab3 f383 	clz	r3, r3
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	2103      	movs	r1, #3
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	401a      	ands	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	61fb      	str	r3, [r7, #28]
  return result;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004cdc:	2320      	movs	r3, #32
 8004cde:	e003      	b.n	8004ce8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	601a      	str	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	372c      	adds	r7, #44	; 0x2c
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	401a      	ands	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	605a      	str	r2, [r3, #4]
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b08b      	sub	sp, #44	; 0x2c
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	fa93 f3a3 	rbit	r3, r3
 8004d4c:	613b      	str	r3, [r7, #16]
  return result;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004d58:	2320      	movs	r3, #32
 8004d5a:	e003      	b.n	8004d64 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	fab3 f383 	clz	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	2103      	movs	r1, #3
 8004d68:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	61fb      	str	r3, [r7, #28]
  return result;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004d86:	2320      	movs	r3, #32
 8004d88:	e003      	b.n	8004d92 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004da0:	bf00      	nop
 8004da2:	372c      	adds	r7, #44	; 0x2c
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b08b      	sub	sp, #44	; 0x2c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	613b      	str	r3, [r7, #16]
  return result;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e003      	b.n	8004dde <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	fab3 f383 	clz	r3, r3
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	2103      	movs	r1, #3
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	401a      	ands	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	61fb      	str	r3, [r7, #28]
  return result;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004e00:	2320      	movs	r3, #32
 8004e02:	e003      	b.n	8004e0c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	fa01 f303 	lsl.w	r3, r1, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	60da      	str	r2, [r3, #12]
}
 8004e1a:	bf00      	nop
 8004e1c:	372c      	adds	r7, #44	; 0x2c
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b08b      	sub	sp, #44	; 0x2c
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	613b      	str	r3, [r7, #16]
  return result;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	e003      	b.n	8004e58 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	210f      	movs	r1, #15
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	401a      	ands	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	fa93 f3a3 	rbit	r3, r3
 8004e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004e7a:	2320      	movs	r3, #32
 8004e7c:	e003      	b.n	8004e86 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	fab3 f383 	clz	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004e94:	bf00      	nop
 8004e96:	372c      	adds	r7, #44	; 0x2c
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b08b      	sub	sp, #44	; 0x2c
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	613b      	str	r3, [r7, #16]
  return result;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004ec8:	2320      	movs	r3, #32
 8004eca:	e003      	b.n	8004ed4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	210f      	movs	r1, #15
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	401a      	ands	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	61fb      	str	r3, [r7, #28]
  return result;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004ef8:	2320      	movs	r3, #32
 8004efa:	e003      	b.n	8004f04 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004f12:	bf00      	nop
 8004f14:	372c      	adds	r7, #44	; 0x2c
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	fa93 f3a3 	rbit	r3, r3
 8004f34:	60fb      	str	r3, [r7, #12]
  return result;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <LL_GPIO_Init+0x26>
    return 32U;
 8004f40:	2320      	movs	r3, #32
 8004f42:	e003      	b.n	8004f4c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	fab3 f383 	clz	r3, r3
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004f4e:	e048      	b.n	8004fe2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d03a      	beq.n	8004fdc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d003      	beq.n	8004f76 <LL_GPIO_Init+0x58>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d10e      	bne.n	8004f94 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	69b9      	ldr	r1, [r7, #24]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fed7 	bl	8004d32 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff feb7 	bl	8004d02 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff05 	bl	8004dac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d111      	bne.n	8004fce <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2bff      	cmp	r3, #255	; 0xff
 8004fae:	d807      	bhi.n	8004fc0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ff34 	bl	8004e26 <LL_GPIO_SetAFPin_0_7>
 8004fbe:	e006      	b.n	8004fce <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	69b9      	ldr	r1, [r7, #24]
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff69 	bl	8004ea0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	69b9      	ldr	r1, [r7, #24]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fe56 	bl	8004c88 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1af      	bne.n	8004f50 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <LL_RCC_HSI_IsReady+0x24>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d101      	bne.n	8005012 <LL_RCC_HSI_IsReady+0x16>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <LL_RCC_HSI_IsReady+0x18>
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000

08005024 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <LL_RCC_LSE_IsReady+0x24>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	d101      	bne.n	800503a <LL_RCC_LSE_IsReady+0x16>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_RCC_LSE_IsReady+0x18>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40021000 	.word	0x40021000

0800504c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d101      	bne.n	8005060 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40021000 	.word	0x40021000

08005070 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <LL_RCC_MSI_GetRange+0x18>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000

0800508c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005096:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40021000 	.word	0x40021000

080050a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <LL_RCC_GetSysClkSource+0x18>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 030c 	and.w	r3, r3, #12
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000

080050c4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <LL_RCC_GetAHBPrescaler+0x18>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000

080050e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80050e4:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000

080050fc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40021000 	.word	0x40021000

08005118 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <LL_RCC_GetUSARTClockSource+0x24>)
 8005122:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	401a      	ands	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	041b      	lsls	r3, r3, #16
 800512e:	4313      	orrs	r3, r2
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40021000 	.word	0x40021000

08005140 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005148:	4b06      	ldr	r3, [pc, #24]	; (8005164 <LL_RCC_GetUARTClockSource+0x24>)
 800514a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	401a      	ands	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	4313      	orrs	r3, r2
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	40021000 	.word	0x40021000

08005168 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <LL_RCC_PLL_GetMainSource+0x18>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0303 	and.w	r3, r3, #3
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000

08005184 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <LL_RCC_PLL_GetN+0x18>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40021000 	.word	0x40021000

080051a0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <LL_RCC_PLL_GetR+0x18>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000

080051bc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <LL_RCC_PLL_GetDivider+0x18>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000

080051d8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d137      	bne.n	800525a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff ff94 	bl	8005118 <LL_RCC_GetUSARTClockSource>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	f200 80b3 	bhi.w	8005362 <LL_RCC_GetUSARTClockFreq+0x18a>
 80051fc:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80051fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005202:	bf00      	nop
 8005204:	08005243 	.word	0x08005243
 8005208:	08005215 	.word	0x08005215
 800520c:	0800521d 	.word	0x0800521d
 8005210:	0800522f 	.word	0x0800522f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005214:	f000 f95c 	bl	80054d0 <RCC_GetSystemClockFreq>
 8005218:	60f8      	str	r0, [r7, #12]
        break;
 800521a:	e0b5      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800521c:	f7ff feee 	bl	8004ffc <LL_RCC_HSI_IsReady>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 809f 	beq.w	8005366 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005228:	4b5a      	ldr	r3, [pc, #360]	; (8005394 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800522a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800522c:	e09b      	b.n	8005366 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800522e:	f7ff fef9 	bl	8005024 <LL_RCC_LSE_IsReady>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8098 	beq.w	800536a <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800523a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005240:	e093      	b.n	800536a <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005242:	f000 f945 	bl	80054d0 <RCC_GetSystemClockFreq>
 8005246:	4603      	mov	r3, r0
 8005248:	4618      	mov	r0, r3
 800524a:	f000 f9d1 	bl	80055f0 <RCC_GetHCLKClockFreq>
 800524e:	4603      	mov	r3, r0
 8005250:	4618      	mov	r0, r3
 8005252:	f000 f9f7 	bl	8005644 <RCC_GetPCLK2ClockFreq>
 8005256:	60f8      	str	r0, [r7, #12]
        break;
 8005258:	e096      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b0c      	cmp	r3, #12
 800525e:	d146      	bne.n	80052ee <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ff59 	bl	8005118 <LL_RCC_GetUSARTClockSource>
 8005266:	4603      	mov	r3, r0
 8005268:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800526c:	2b0c      	cmp	r3, #12
 800526e:	d87e      	bhi.n	800536e <LL_RCC_GetUSARTClockFreq+0x196>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052d7 	.word	0x080052d7
 800527c:	0800536f 	.word	0x0800536f
 8005280:	0800536f 	.word	0x0800536f
 8005284:	0800536f 	.word	0x0800536f
 8005288:	080052ad 	.word	0x080052ad
 800528c:	0800536f 	.word	0x0800536f
 8005290:	0800536f 	.word	0x0800536f
 8005294:	0800536f 	.word	0x0800536f
 8005298:	080052b5 	.word	0x080052b5
 800529c:	0800536f 	.word	0x0800536f
 80052a0:	0800536f 	.word	0x0800536f
 80052a4:	0800536f 	.word	0x0800536f
 80052a8:	080052c5 	.word	0x080052c5
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80052ac:	f000 f910 	bl	80054d0 <RCC_GetSystemClockFreq>
 80052b0:	60f8      	str	r0, [r7, #12]
        break;
 80052b2:	e069      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80052b4:	f7ff fea2 	bl	8004ffc <LL_RCC_HSI_IsReady>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d059      	beq.n	8005372 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80052be:	4b35      	ldr	r3, [pc, #212]	; (8005394 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80052c0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80052c2:	e056      	b.n	8005372 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80052c4:	f7ff feae 	bl	8005024 <LL_RCC_LSE_IsReady>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d053      	beq.n	8005376 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80052ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80052d4:	e04f      	b.n	8005376 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80052d6:	f000 f8fb 	bl	80054d0 <RCC_GetSystemClockFreq>
 80052da:	4603      	mov	r3, r0
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f987 	bl	80055f0 <RCC_GetHCLKClockFreq>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f999 	bl	800561c <RCC_GetPCLK1ClockFreq>
 80052ea:	60f8      	str	r0, [r7, #12]
        break;
 80052ec:	e04c      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b30      	cmp	r3, #48	; 0x30
 80052f2:	d142      	bne.n	800537a <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ff0f 	bl	8005118 <LL_RCC_GetUSARTClockSource>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005300:	d01a      	beq.n	8005338 <LL_RCC_GetUSARTClockFreq+0x160>
 8005302:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005306:	d83a      	bhi.n	800537e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005308:	4a23      	ldr	r2, [pc, #140]	; (8005398 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00c      	beq.n	8005328 <LL_RCC_GetUSARTClockFreq+0x150>
 800530e:	4a22      	ldr	r2, [pc, #136]	; (8005398 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d834      	bhi.n	800537e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005314:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005318:	d017      	beq.n	800534a <LL_RCC_GetUSARTClockFreq+0x172>
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d12e      	bne.n	800537e <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005320:	f000 f8d6 	bl	80054d0 <RCC_GetSystemClockFreq>
 8005324:	60f8      	str	r0, [r7, #12]
          break;
 8005326:	e02f      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005328:	f7ff fe68 	bl	8004ffc <LL_RCC_HSI_IsReady>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d027      	beq.n	8005382 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005332:	4b18      	ldr	r3, [pc, #96]	; (8005394 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005334:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005336:	e024      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005338:	f7ff fe74 	bl	8005024 <LL_RCC_LSE_IsReady>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d021      	beq.n	8005386 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005346:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005348:	e01d      	b.n	8005386 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800534a:	f000 f8c1 	bl	80054d0 <RCC_GetSystemClockFreq>
 800534e:	4603      	mov	r3, r0
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f94d 	bl	80055f0 <RCC_GetHCLKClockFreq>
 8005356:	4603      	mov	r3, r0
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f95f 	bl	800561c <RCC_GetPCLK1ClockFreq>
 800535e:	60f8      	str	r0, [r7, #12]
          break;
 8005360:	e012      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005362:	bf00      	nop
 8005364:	e010      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005366:	bf00      	nop
 8005368:	e00e      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800536a:	bf00      	nop
 800536c:	e00c      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800536e:	bf00      	nop
 8005370:	e00a      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005372:	bf00      	nop
 8005374:	e008      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005376:	bf00      	nop
 8005378:	e006      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 800537a:	bf00      	nop
 800537c:	e004      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800537e:	bf00      	nop
 8005380:	e002      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005386:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	00f42400 	.word	0x00f42400
 8005398:	00300020 	.word	0x00300020
 800539c:	00300010 	.word	0x00300010

080053a0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2bc0      	cmp	r3, #192	; 0xc0
 80053b0:	d136      	bne.n	8005420 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fec4 	bl	8005140 <LL_RCC_GetUARTClockSource>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80053be:	d01a      	beq.n	80053f6 <LL_RCC_GetUARTClockFreq+0x56>
 80053c0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80053c4:	d82e      	bhi.n	8005424 <LL_RCC_GetUARTClockFreq+0x84>
 80053c6:	4a3d      	ldr	r2, [pc, #244]	; (80054bc <LL_RCC_GetUARTClockFreq+0x11c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00c      	beq.n	80053e6 <LL_RCC_GetUARTClockFreq+0x46>
 80053cc:	4a3b      	ldr	r2, [pc, #236]	; (80054bc <LL_RCC_GetUARTClockFreq+0x11c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d828      	bhi.n	8005424 <LL_RCC_GetUARTClockFreq+0x84>
 80053d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053d6:	d017      	beq.n	8005408 <LL_RCC_GetUARTClockFreq+0x68>
 80053d8:	4a39      	ldr	r2, [pc, #228]	; (80054c0 <LL_RCC_GetUARTClockFreq+0x120>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d122      	bne.n	8005424 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80053de:	f000 f877 	bl	80054d0 <RCC_GetSystemClockFreq>
 80053e2:	60f8      	str	r0, [r7, #12]
        break;
 80053e4:	e023      	b.n	800542e <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80053e6:	f7ff fe09 	bl	8004ffc <LL_RCC_HSI_IsReady>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 80053f0:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <LL_RCC_GetUARTClockFreq+0x124>)
 80053f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80053f4:	e018      	b.n	8005428 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80053f6:	f7ff fe15 	bl	8005024 <LL_RCC_LSE_IsReady>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d015      	beq.n	800542c <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8005400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005404:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005406:	e011      	b.n	800542c <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005408:	f000 f862 	bl	80054d0 <RCC_GetSystemClockFreq>
 800540c:	4603      	mov	r3, r0
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f8ee 	bl	80055f0 <RCC_GetHCLKClockFreq>
 8005414:	4603      	mov	r3, r0
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f900 	bl	800561c <RCC_GetPCLK1ClockFreq>
 800541c:	60f8      	str	r0, [r7, #12]
        break;
 800541e:	e006      	b.n	800542e <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8005420:	bf00      	nop
 8005422:	e004      	b.n	800542e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005424:	bf00      	nop
 8005426:	e002      	b.n	800542e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005428:	bf00      	nop
 800542a:	e000      	b.n	800542e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800542c:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005434:	d136      	bne.n	80054a4 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff fe82 	bl	8005140 <LL_RCC_GetUARTClockSource>
 800543c:	4603      	mov	r3, r0
 800543e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005442:	d01a      	beq.n	800547a <LL_RCC_GetUARTClockFreq+0xda>
 8005444:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005448:	d82e      	bhi.n	80054a8 <LL_RCC_GetUARTClockFreq+0x108>
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <LL_RCC_GetUARTClockFreq+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00c      	beq.n	800546a <LL_RCC_GetUARTClockFreq+0xca>
 8005450:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <LL_RCC_GetUARTClockFreq+0x128>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d828      	bhi.n	80054a8 <LL_RCC_GetUARTClockFreq+0x108>
 8005456:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800545a:	d017      	beq.n	800548c <LL_RCC_GetUARTClockFreq+0xec>
 800545c:	4a1b      	ldr	r2, [pc, #108]	; (80054cc <LL_RCC_GetUARTClockFreq+0x12c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d122      	bne.n	80054a8 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005462:	f000 f835 	bl	80054d0 <RCC_GetSystemClockFreq>
 8005466:	60f8      	str	r0, [r7, #12]
        break;
 8005468:	e023      	b.n	80054b2 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800546a:	f7ff fdc7 	bl	8004ffc <LL_RCC_HSI_IsReady>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01b      	beq.n	80054ac <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <LL_RCC_GetUARTClockFreq+0x124>)
 8005476:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005478:	e018      	b.n	80054ac <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800547a:	f7ff fdd3 	bl	8005024 <LL_RCC_LSE_IsReady>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8005484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005488:	60fb      	str	r3, [r7, #12]
        }
        break;
 800548a:	e011      	b.n	80054b0 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800548c:	f000 f820 	bl	80054d0 <RCC_GetSystemClockFreq>
 8005490:	4603      	mov	r3, r0
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f8ac 	bl	80055f0 <RCC_GetHCLKClockFreq>
 8005498:	4603      	mov	r3, r0
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f8be 	bl	800561c <RCC_GetPCLK1ClockFreq>
 80054a0:	60f8      	str	r0, [r7, #12]
        break;
 80054a2:	e006      	b.n	80054b2 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80054a4:	bf00      	nop
 80054a6:	e004      	b.n	80054b2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80054a8:	bf00      	nop
 80054aa:	e002      	b.n	80054b2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80054b0:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	00c00080 	.word	0x00c00080
 80054c0:	00c00040 	.word	0x00c00040
 80054c4:	00f42400 	.word	0x00f42400
 80054c8:	03000200 	.word	0x03000200
 80054cc:	03000100 	.word	0x03000100

080054d0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80054d6:	f7ff fde7 	bl	80050a8 <LL_RCC_GetSysClkSource>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	d851      	bhi.n	8005584 <RCC_GetSystemClockFreq+0xb4>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <RCC_GetSystemClockFreq+0x18>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	0800551d 	.word	0x0800551d
 80054ec:	08005585 	.word	0x08005585
 80054f0:	08005585 	.word	0x08005585
 80054f4:	08005585 	.word	0x08005585
 80054f8:	08005571 	.word	0x08005571
 80054fc:	08005585 	.word	0x08005585
 8005500:	08005585 	.word	0x08005585
 8005504:	08005585 	.word	0x08005585
 8005508:	08005577 	.word	0x08005577
 800550c:	08005585 	.word	0x08005585
 8005510:	08005585 	.word	0x08005585
 8005514:	08005585 	.word	0x08005585
 8005518:	0800557d 	.word	0x0800557d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800551c:	f7ff fd96 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d111      	bne.n	800554a <RCC_GetSystemClockFreq+0x7a>
 8005526:	f7ff fd91 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <RCC_GetSystemClockFreq+0x6a>
 8005530:	f7ff fd9e 	bl	8005070 <LL_RCC_MSI_GetRange>
 8005534:	4603      	mov	r3, r0
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	e003      	b.n	8005542 <RCC_GetSystemClockFreq+0x72>
 800553a:	f7ff fda7 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 800553e:	4603      	mov	r3, r0
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <RCC_GetSystemClockFreq+0x114>)
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	e010      	b.n	800556c <RCC_GetSystemClockFreq+0x9c>
 800554a:	f7ff fd7f 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <RCC_GetSystemClockFreq+0x8e>
 8005554:	f7ff fd8c 	bl	8005070 <LL_RCC_MSI_GetRange>
 8005558:	4603      	mov	r3, r0
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	e003      	b.n	8005566 <RCC_GetSystemClockFreq+0x96>
 800555e:	f7ff fd95 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 8005562:	4603      	mov	r3, r0
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	4a1f      	ldr	r2, [pc, #124]	; (80055e4 <RCC_GetSystemClockFreq+0x114>)
 8005568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800556e:	e033      	b.n	80055d8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <RCC_GetSystemClockFreq+0x118>)
 8005572:	607b      	str	r3, [r7, #4]
      break;
 8005574:	e030      	b.n	80055d8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005576:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <RCC_GetSystemClockFreq+0x11c>)
 8005578:	607b      	str	r3, [r7, #4]
      break;
 800557a:	e02d      	b.n	80055d8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800557c:	f000 f876 	bl	800566c <RCC_PLL_GetFreqDomain_SYS>
 8005580:	6078      	str	r0, [r7, #4]
      break;
 8005582:	e029      	b.n	80055d8 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005584:	f7ff fd62 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d111      	bne.n	80055b2 <RCC_GetSystemClockFreq+0xe2>
 800558e:	f7ff fd5d 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <RCC_GetSystemClockFreq+0xd2>
 8005598:	f7ff fd6a 	bl	8005070 <LL_RCC_MSI_GetRange>
 800559c:	4603      	mov	r3, r0
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	e003      	b.n	80055aa <RCC_GetSystemClockFreq+0xda>
 80055a2:	f7ff fd73 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 80055a6:	4603      	mov	r3, r0
 80055a8:	0a1b      	lsrs	r3, r3, #8
 80055aa:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <RCC_GetSystemClockFreq+0x114>)
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	e010      	b.n	80055d4 <RCC_GetSystemClockFreq+0x104>
 80055b2:	f7ff fd4b 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <RCC_GetSystemClockFreq+0xf6>
 80055bc:	f7ff fd58 	bl	8005070 <LL_RCC_MSI_GetRange>
 80055c0:	4603      	mov	r3, r0
 80055c2:	091b      	lsrs	r3, r3, #4
 80055c4:	e003      	b.n	80055ce <RCC_GetSystemClockFreq+0xfe>
 80055c6:	f7ff fd61 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 80055ca:	4603      	mov	r3, r0
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <RCC_GetSystemClockFreq+0x114>)
 80055d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80055d6:	bf00      	nop
  }

  return frequency;
 80055d8:	687b      	ldr	r3, [r7, #4]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	0800862c 	.word	0x0800862c
 80055e8:	00f42400 	.word	0x00f42400
 80055ec:	007a1200 	.word	0x007a1200

080055f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80055f8:	f7ff fd64 	bl	80050c4 <LL_RCC_GetAHBPrescaler>
 80055fc:	4603      	mov	r3, r0
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	4a04      	ldr	r2, [pc, #16]	; (8005618 <RCC_GetHCLKClockFreq+0x28>)
 8005606:	5cd3      	ldrb	r3, [r2, r3]
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	40d3      	lsrs	r3, r2
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	08008614 	.word	0x08008614

0800561c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005624:	f7ff fd5c 	bl	80050e0 <LL_RCC_GetAPB1Prescaler>
 8005628:	4603      	mov	r3, r0
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <RCC_GetPCLK1ClockFreq+0x24>)
 800562e:	5cd3      	ldrb	r3, [r2, r3]
 8005630:	461a      	mov	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	40d3      	lsrs	r3, r2
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	08008624 	.word	0x08008624

08005644 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800564c:	f7ff fd56 	bl	80050fc <LL_RCC_GetAPB2Prescaler>
 8005650:	4603      	mov	r3, r0
 8005652:	0adb      	lsrs	r3, r3, #11
 8005654:	4a04      	ldr	r2, [pc, #16]	; (8005668 <RCC_GetPCLK2ClockFreq+0x24>)
 8005656:	5cd3      	ldrb	r3, [r2, r3]
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	40d3      	lsrs	r3, r2
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	08008624 	.word	0x08008624

0800566c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005672:	f7ff fd79 	bl	8005168 <LL_RCC_PLL_GetMainSource>
 8005676:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d036      	beq.n	80056ec <RCC_PLL_GetFreqDomain_SYS+0x80>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d836      	bhi.n	80056f2 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d003      	beq.n	8005692 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d02a      	beq.n	80056e6 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8005690:	e02f      	b.n	80056f2 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005692:	f7ff fcdb 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d111      	bne.n	80056c0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800569c:	f7ff fcd6 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80056a6:	f7ff fce3 	bl	8005070 <LL_RCC_MSI_GetRange>
 80056aa:	4603      	mov	r3, r0
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	e003      	b.n	80056b8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80056b0:	f7ff fcec 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 80056b4:	4603      	mov	r3, r0
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	4a2f      	ldr	r2, [pc, #188]	; (8005778 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80056ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056be:	e010      	b.n	80056e2 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80056c0:	f7ff fcc4 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80056ca:	f7ff fcd1 	bl	8005070 <LL_RCC_MSI_GetRange>
 80056ce:	4603      	mov	r3, r0
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	e003      	b.n	80056dc <RCC_PLL_GetFreqDomain_SYS+0x70>
 80056d4:	f7ff fcda 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 80056d8:	4603      	mov	r3, r0
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	4a26      	ldr	r2, [pc, #152]	; (8005778 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80056de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80056e4:	e02f      	b.n	8005746 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80056e6:	4b25      	ldr	r3, [pc, #148]	; (800577c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80056e8:	607b      	str	r3, [r7, #4]
      break;
 80056ea:	e02c      	b.n	8005746 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80056ec:	4b24      	ldr	r3, [pc, #144]	; (8005780 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80056ee:	607b      	str	r3, [r7, #4]
      break;
 80056f0:	e029      	b.n	8005746 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80056f2:	f7ff fcab 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d111      	bne.n	8005720 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80056fc:	f7ff fca6 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005706:	f7ff fcb3 	bl	8005070 <LL_RCC_MSI_GetRange>
 800570a:	4603      	mov	r3, r0
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	e003      	b.n	8005718 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8005710:	f7ff fcbc 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 8005714:	4603      	mov	r3, r0
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800571a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571e:	e010      	b.n	8005742 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8005720:	f7ff fc94 	bl	800504c <LL_RCC_MSI_IsEnabledRangeSelect>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800572a:	f7ff fca1 	bl	8005070 <LL_RCC_MSI_GetRange>
 800572e:	4603      	mov	r3, r0
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	e003      	b.n	800573c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005734:	f7ff fcaa 	bl	800508c <LL_RCC_MSI_GetRangeAfterStandby>
 8005738:	4603      	mov	r3, r0
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005742:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005744:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005746:	f7ff fd39 	bl	80051bc <LL_RCC_PLL_GetDivider>
 800574a:	4603      	mov	r3, r0
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	3301      	adds	r3, #1
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	fbb2 f4f3 	udiv	r4, r2, r3
 8005756:	f7ff fd15 	bl	8005184 <LL_RCC_PLL_GetN>
 800575a:	4603      	mov	r3, r0
 800575c:	fb03 f404 	mul.w	r4, r3, r4
 8005760:	f7ff fd1e 	bl	80051a0 <LL_RCC_PLL_GetR>
 8005764:	4603      	mov	r3, r0
 8005766:	0e5b      	lsrs	r3, r3, #25
 8005768:	3301      	adds	r3, #1
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	0800862c 	.word	0x0800862c
 800577c:	00f42400 	.word	0x00f42400
 8005780:	007a1200 	.word	0x007a1200

08005784 <LL_USART_IsEnabled>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <LL_USART_IsEnabled+0x18>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <LL_USART_IsEnabled+0x1a>
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_USART_SetStopBitsLength>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <LL_USART_SetHWFlowCtrl>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <LL_USART_SetBaudRate>:
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580a:	d11a      	bne.n	8005842 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	005a      	lsls	r2, r3, #1
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	441a      	add	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	b29b      	uxth	r3, r3
 800581e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	b29b      	uxth	r3, r3
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	60da      	str	r2, [r3, #12]
}
 8005840:	e00a      	b.n	8005858 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	085a      	lsrs	r2, r3, #1
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	441a      	add	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	b29b      	uxth	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	60da      	str	r2, [r3, #12]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff ff84 	bl	8005784 <LL_USART_IsEnabled>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d15b      	bne.n	800593a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <LL_USART_Init+0xe0>)
 8005888:	4013      	ands	r3, r2
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	6851      	ldr	r1, [r2, #4]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	68d2      	ldr	r2, [r2, #12]
 8005892:	4311      	orrs	r1, r2
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	6912      	ldr	r2, [r2, #16]
 8005898:	4311      	orrs	r1, r2
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	6992      	ldr	r2, [r2, #24]
 800589e:	430a      	orrs	r2, r1
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ff7c 	bl	80057aa <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff ff89 	bl	80057d0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a21      	ldr	r2, [pc, #132]	; (8005948 <LL_USART_Init+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d104      	bne.n	80058d0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80058c6:	2003      	movs	r0, #3
 80058c8:	f7ff fc86 	bl	80051d8 <LL_RCC_GetUSARTClockFreq>
 80058cc:	60b8      	str	r0, [r7, #8]
 80058ce:	e023      	b.n	8005918 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <LL_USART_Init+0xe8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d104      	bne.n	80058e2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80058d8:	200c      	movs	r0, #12
 80058da:	f7ff fc7d 	bl	80051d8 <LL_RCC_GetUSARTClockFreq>
 80058de:	60b8      	str	r0, [r7, #8]
 80058e0:	e01a      	b.n	8005918 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <LL_USART_Init+0xec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d104      	bne.n	80058f4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80058ea:	2030      	movs	r0, #48	; 0x30
 80058ec:	f7ff fc74 	bl	80051d8 <LL_RCC_GetUSARTClockFreq>
 80058f0:	60b8      	str	r0, [r7, #8]
 80058f2:	e011      	b.n	8005918 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a17      	ldr	r2, [pc, #92]	; (8005954 <LL_USART_Init+0xf0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d104      	bne.n	8005906 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80058fc:	20c0      	movs	r0, #192	; 0xc0
 80058fe:	f7ff fd4f 	bl	80053a0 <LL_RCC_GetUARTClockFreq>
 8005902:	60b8      	str	r0, [r7, #8]
 8005904:	e008      	b.n	8005918 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a13      	ldr	r2, [pc, #76]	; (8005958 <LL_USART_Init+0xf4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d104      	bne.n	8005918 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800590e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005912:	f7ff fd45 	bl	80053a0 <LL_RCC_GetUARTClockFreq>
 8005916:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff ff5e 	bl	80057f6 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	efff69f3 	.word	0xefff69f3
 8005948:	40013800 	.word	0x40013800
 800594c:	40004400 	.word	0x40004400
 8005950:	40004800 	.word	0x40004800
 8005954:	40004c00 	.word	0x40004c00
 8005958:	40005000 	.word	0x40005000

0800595c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800596a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800596e:	2b84      	cmp	r3, #132	; 0x84
 8005970:	d005      	beq.n	800597e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	3303      	adds	r3, #3
 800597c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800597e:	68fb      	ldr	r3, [r7, #12]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005990:	f000 fff4 	bl	800697c <vTaskStartScheduler>
  
  return osOK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	bd80      	pop	{r7, pc}

0800599a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800599a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599c:	b089      	sub	sp, #36	; 0x24
 800599e:	af04      	add	r7, sp, #16
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <osThreadCreate+0x54>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01c      	beq.n	80059ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685c      	ldr	r4, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681d      	ldr	r5, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691e      	ldr	r6, [r3, #16]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff ffc8 	bl	800595c <makeFreeRtosPriority>
 80059cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059d6:	9202      	str	r2, [sp, #8]
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	9100      	str	r1, [sp, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4632      	mov	r2, r6
 80059e0:	4629      	mov	r1, r5
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fdec 	bl	80065c0 <xTaskCreateStatic>
 80059e8:	4603      	mov	r3, r0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e01c      	b.n	8005a28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685c      	ldr	r4, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059fa:	b29e      	uxth	r6, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ffaa 	bl	800595c <makeFreeRtosPriority>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	9200      	str	r2, [sp, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	4632      	mov	r2, r6
 8005a16:	4629      	mov	r1, r5
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fe2e 	bl	800667a <xTaskCreate>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d001      	beq.n	8005a28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e000      	b.n	8005a2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a28:	68fb      	ldr	r3, [r7, #12]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <osDelay+0x16>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	e000      	b.n	8005a4a <osDelay+0x18>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 ff62 	bl	8006914 <vTaskDelay>
  
  return osOK;
 8005a50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f103 0208 	add.w	r2, r3, #8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f103 0208 	add.w	r2, r3, #8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f103 0208 	add.w	r2, r3, #8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b12:	d103      	bne.n	8005b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e00c      	b.n	8005b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e002      	b.n	8005b2a <vListInsert+0x2e>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d2f6      	bcs.n	8005b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6892      	ldr	r2, [r2, #8]
 8005b84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6852      	ldr	r2, [r2, #4]
 8005b8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d103      	bne.n	8005ba2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	1e5a      	subs	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bee:	f001 fd11 	bl	8007614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bfe:	fb01 f303 	mul.w	r3, r1, r3
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d114      	bne.n	8005c6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3310      	adds	r3, #16
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f8e5 	bl	8006e20 <xTaskRemoveFromEventList>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d012      	beq.n	8005c82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <xQueueGenericReset+0xcc>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	e009      	b.n	8005c82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3310      	adds	r3, #16
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fef1 	bl	8005a5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff feec 	bl	8005a5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c82:	f001 fcf7 	bl	8007674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c86:	2301      	movs	r3, #1
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3348      	adds	r3, #72	; 0x48
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fdc3 	bl	8007858 <pvPortMalloc>
 8005cd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d011      	beq.n	8005cfe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	3348      	adds	r3, #72	; 0x48
 8005ce2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cec:	79fa      	ldrb	r2, [r7, #7]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f805 	bl	8005d08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
	}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d103      	bne.n	8005d24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e002      	b.n	8005d2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d36:	2101      	movs	r1, #1
 8005d38:	69b8      	ldr	r0, [r7, #24]
 8005d3a:	f7ff ff43 	bl	8005bc4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d66:	2300      	movs	r3, #0
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f81d 	bl	8005dac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	4603      	mov	r3, r0
 8005d82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6939      	ldr	r1, [r7, #16]
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7ff ff7e 	bl	8005c94 <xQueueGenericCreate>
 8005d98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff ffd3 	bl	8005d46 <prvInitialiseMutex>

		return xNewQueue;
 8005da0:	68fb      	ldr	r3, [r7, #12]
	}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08e      	sub	sp, #56	; 0x38
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xQueueGenericSend+0x32>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <xQueueGenericSend+0x40>
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <xQueueGenericSend+0x44>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <xQueueGenericSend+0x46>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <xQueueGenericSend+0x60>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d103      	bne.n	8005e1a <xQueueGenericSend+0x6e>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <xQueueGenericSend+0x72>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <xQueueGenericSend+0x74>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xQueueGenericSend+0x8e>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	623b      	str	r3, [r7, #32]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e3a:	f001 f9b1 	bl	80071a0 <xTaskGetSchedulerState>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <xQueueGenericSend+0x9e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <xQueueGenericSend+0xa2>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <xQueueGenericSend+0xa4>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xQueueGenericSend+0xbe>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	61fb      	str	r3, [r7, #28]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e6a:	f001 fbd3 	bl	8007614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d302      	bcc.n	8005e80 <xQueueGenericSend+0xd4>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d129      	bne.n	8005ed4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e86:	f000 fa8b 	bl	80063a0 <prvCopyDataToQueue>
 8005e8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d010      	beq.n	8005eb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	3324      	adds	r3, #36	; 0x24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 ffc1 	bl	8006e20 <xTaskRemoveFromEventList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ea4:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <xQueueGenericSend+0x1f8>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	e00a      	b.n	8005ecc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ebc:	4b39      	ldr	r3, [pc, #228]	; (8005fa4 <xQueueGenericSend+0x1f8>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ecc:	f001 fbd2 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e063      	b.n	8005f9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eda:	f001 fbcb 	bl	8007674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e05c      	b.n	8005f9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ee8:	f107 0314 	add.w	r3, r7, #20
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fff9 	bl	8006ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ef6:	f001 fbbd 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005efa:	f000 fda9 	bl	8006a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005efe:	f001 fb89 	bl	8007614 <vPortEnterCritical>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f08:	b25b      	sxtb	r3, r3
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f0e:	d103      	bne.n	8005f18 <xQueueGenericSend+0x16c>
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1e:	b25b      	sxtb	r3, r3
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f24:	d103      	bne.n	8005f2e <xQueueGenericSend+0x182>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f2e:	f001 fba1 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f32:	1d3a      	adds	r2, r7, #4
 8005f34:	f107 0314 	add.w	r3, r7, #20
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 ffe8 	bl	8006f10 <xTaskCheckForTimeOut>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d124      	bne.n	8005f90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f48:	f000 fb22 	bl	8006590 <prvIsQueueFull>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d018      	beq.n	8005f84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	3310      	adds	r3, #16
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 ff3c 	bl	8006dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f62:	f000 faad 	bl	80064c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f66:	f000 fd81 	bl	8006a6c <xTaskResumeAll>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f47f af7c 	bne.w	8005e6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f72:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <xQueueGenericSend+0x1f8>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	e772      	b.n	8005e6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f86:	f000 fa9b 	bl	80064c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8a:	f000 fd6f 	bl	8006a6c <xTaskResumeAll>
 8005f8e:	e76c      	b.n	8005e6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f92:	f000 fa95 	bl	80064c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f96:	f000 fd69 	bl	8006a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3738      	adds	r7, #56	; 0x38
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b090      	sub	sp, #64	; 0x40
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <xQueueGenericSendFromISR+0x3c>
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <xQueueGenericSendFromISR+0x40>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <xQueueGenericSendFromISR+0x42>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d103      	bne.n	8006012 <xQueueGenericSendFromISR+0x6a>
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <xQueueGenericSendFromISR+0x6e>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueGenericSendFromISR+0x70>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	623b      	str	r3, [r7, #32]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006032:	f001 fbd1 	bl	80077d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006036:	f3ef 8211 	mrs	r2, BASEPRI
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	61fa      	str	r2, [r7, #28]
 800604c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800604e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <xQueueGenericSendFromISR+0xbc>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d12f      	bne.n	80060c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800607a:	f000 f991 	bl	80063a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800607e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006086:	d112      	bne.n	80060ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d016      	beq.n	80060be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	3324      	adds	r3, #36	; 0x24
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fec3 	bl	8006e20 <xTaskRemoveFromEventList>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00e      	beq.n	80060be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	e007      	b.n	80060be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060b2:	3301      	adds	r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	b25a      	sxtb	r2, r3
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060be:	2301      	movs	r3, #1
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060c2:	e001      	b.n	80060c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3740      	adds	r7, #64	; 0x40
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	; 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <xQueueReceive+0x30>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	623b      	str	r3, [r7, #32]
}
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <xQueueReceive+0x3e>
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <xQueueReceive+0x42>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueReceive+0x44>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <xQueueReceive+0x5e>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	61fb      	str	r3, [r7, #28]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800613e:	f001 f82f 	bl	80071a0 <xTaskGetSchedulerState>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <xQueueReceive+0x6e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <xQueueReceive+0x72>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <xQueueReceive+0x74>
 8006152:	2300      	movs	r3, #0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <xQueueReceive+0x8e>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	61bb      	str	r3, [r7, #24]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800616e:	f001 fa51 	bl	8007614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01f      	beq.n	80061be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006182:	f000 f977 	bl	8006474 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	3310      	adds	r3, #16
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fe40 	bl	8006e20 <xTaskRemoveFromEventList>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061a6:	4b3d      	ldr	r3, [pc, #244]	; (800629c <xQueueReceive+0x1bc>)
 80061a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061b6:	f001 fa5d 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e069      	b.n	8006292 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061c4:	f001 fa56 	bl	8007674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e062      	b.n	8006292 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061d2:	f107 0310 	add.w	r3, r7, #16
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fe84 	bl	8006ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061e0:	f001 fa48 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061e4:	f000 fc34 	bl	8006a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061e8:	f001 fa14 	bl	8007614 <vPortEnterCritical>
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061f2:	b25b      	sxtb	r3, r3
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f8:	d103      	bne.n	8006202 <xQueueReceive+0x122>
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006208:	b25b      	sxtb	r3, r3
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620e:	d103      	bne.n	8006218 <xQueueReceive+0x138>
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006218:	f001 fa2c 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800621c:	1d3a      	adds	r2, r7, #4
 800621e:	f107 0310 	add.w	r3, r7, #16
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fe73 	bl	8006f10 <xTaskCheckForTimeOut>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d123      	bne.n	8006278 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006232:	f000 f997 	bl	8006564 <prvIsQueueEmpty>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d017      	beq.n	800626c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	3324      	adds	r3, #36	; 0x24
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fdc7 	bl	8006dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800624a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624c:	f000 f938 	bl	80064c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006250:	f000 fc0c 	bl	8006a6c <xTaskResumeAll>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d189      	bne.n	800616e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <xQueueReceive+0x1bc>)
 800625c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	e780      	b.n	800616e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	f000 f927 	bl	80064c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006272:	f000 fbfb 	bl	8006a6c <xTaskResumeAll>
 8006276:	e77a      	b.n	800616e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627a:	f000 f921 	bl	80064c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800627e:	f000 fbf5 	bl	8006a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006284:	f000 f96e 	bl	8006564 <prvIsQueueEmpty>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	f43f af6f 	beq.w	800616e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006292:	4618      	mov	r0, r3
 8006294:	3730      	adds	r7, #48	; 0x30
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	; 0x38
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	623b      	str	r3, [r7, #32]
}
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <xQueueReceiveFromISR+0x3a>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <xQueueReceiveFromISR+0x3e>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <xQueueReceiveFromISR+0x40>
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	61fb      	str	r3, [r7, #28]
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062fa:	f001 fa6d 	bl	80077d8 <vPortValidateInterruptPriority>
	__asm volatile
 80062fe:	f3ef 8211 	mrs	r2, BASEPRI
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61ba      	str	r2, [r7, #24]
 8006314:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006316:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02f      	beq.n	8006386 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800632c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006334:	f000 f89e 	bl	8006474 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	1e5a      	subs	r2, r3, #1
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006340:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006348:	d112      	bne.n	8006370 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d016      	beq.n	8006380 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	3310      	adds	r3, #16
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fd62 	bl	8006e20 <xTaskRemoveFromEventList>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00e      	beq.n	8006380 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00b      	beq.n	8006380 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e007      	b.n	8006380 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006374:	3301      	adds	r3, #1
 8006376:	b2db      	uxtb	r3, r3
 8006378:	b25a      	sxtb	r2, r3
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006380:	2301      	movs	r3, #1
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
 8006384:	e001      	b.n	800638a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f383 8811 	msr	BASEPRI, r3
}
 8006394:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006398:	4618      	mov	r0, r3
 800639a:	3738      	adds	r7, #56	; 0x38
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10d      	bne.n	80063da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d14d      	bne.n	8006462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 ff06 	bl	80071dc <xTaskPriorityDisinherit>
 80063d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	e043      	b.n	8006462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d119      	bne.n	8006414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6858      	ldr	r0, [r3, #4]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	461a      	mov	r2, r3
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	f001 fc4a 	bl	8007c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	441a      	add	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	d32b      	bcc.n	8006462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	e026      	b.n	8006462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68d8      	ldr	r0, [r3, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	461a      	mov	r2, r3
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	f001 fc30 	bl	8007c84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	425b      	negs	r3, r3
 800642e:	441a      	add	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d207      	bcs.n	8006450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	425b      	negs	r3, r3
 800644a:	441a      	add	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d105      	bne.n	8006462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	3b01      	subs	r3, #1
 8006460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800646a:	697b      	ldr	r3, [r7, #20]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	441a      	add	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	d303      	bcc.n	80064a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68d9      	ldr	r1, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	461a      	mov	r2, r3
 80064b2:	6838      	ldr	r0, [r7, #0]
 80064b4:	f001 fbe6 	bl	8007c84 <memcpy>
	}
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064c8:	f001 f8a4 	bl	8007614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d4:	e011      	b.n	80064fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d012      	beq.n	8006504 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3324      	adds	r3, #36	; 0x24
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fc9c 	bl	8006e20 <xTaskRemoveFromEventList>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064ee:	f000 fd71 	bl	8006fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	dce9      	bgt.n	80064d6 <prvUnlockQueue+0x16>
 8006502:	e000      	b.n	8006506 <prvUnlockQueue+0x46>
					break;
 8006504:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	22ff      	movs	r2, #255	; 0xff
 800650a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800650e:	f001 f8b1 	bl	8007674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006512:	f001 f87f 	bl	8007614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800651c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800651e:	e011      	b.n	8006544 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d012      	beq.n	800654e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3310      	adds	r3, #16
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fc77 	bl	8006e20 <xTaskRemoveFromEventList>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006538:	f000 fd4c 	bl	8006fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	3b01      	subs	r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006548:	2b00      	cmp	r3, #0
 800654a:	dce9      	bgt.n	8006520 <prvUnlockQueue+0x60>
 800654c:	e000      	b.n	8006550 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800654e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	22ff      	movs	r2, #255	; 0xff
 8006554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006558:	f001 f88c 	bl	8007674 <vPortExitCritical>
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800656c:	f001 f852 	bl	8007614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006578:	2301      	movs	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	e001      	b.n	8006582 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006582:	f001 f877 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8006586:	68fb      	ldr	r3, [r7, #12]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006598:	f001 f83c 	bl	8007614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d102      	bne.n	80065ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e001      	b.n	80065b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065b2:	f001 f85f 	bl	8007674 <vPortExitCritical>

	return xReturn;
 80065b6:	68fb      	ldr	r3, [r7, #12]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08e      	sub	sp, #56	; 0x38
 80065c4:	af04      	add	r7, sp, #16
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	623b      	str	r3, [r7, #32]
}
 80065e6:	bf00      	nop
 80065e8:	e7fe      	b.n	80065e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <xTaskCreateStatic+0x46>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	61fb      	str	r3, [r7, #28]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006606:	23b4      	movs	r3, #180	; 0xb4
 8006608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2bb4      	cmp	r3, #180	; 0xb4
 800660e:	d00a      	beq.n	8006626 <xTaskCreateStatic+0x66>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61bb      	str	r3, [r7, #24]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006626:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01e      	beq.n	800666c <xTaskCreateStatic+0xac>
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01b      	beq.n	800666c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	2202      	movs	r2, #2
 8006642:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006646:	2300      	movs	r3, #0
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	9302      	str	r3, [sp, #8]
 800664e:	f107 0314 	add.w	r3, r7, #20
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f850 	bl	8006704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006666:	f000 f8eb 	bl	8006840 <prvAddNewTaskToReadyList>
 800666a:	e001      	b.n	8006670 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006670:	697b      	ldr	r3, [r7, #20]
	}
 8006672:	4618      	mov	r0, r3
 8006674:	3728      	adds	r7, #40	; 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800667a:	b580      	push	{r7, lr}
 800667c:	b08c      	sub	sp, #48	; 0x30
 800667e:	af04      	add	r7, sp, #16
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4618      	mov	r0, r3
 8006690:	f001 f8e2 	bl	8007858 <pvPortMalloc>
 8006694:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00e      	beq.n	80066ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800669c:	20b4      	movs	r0, #180	; 0xb4
 800669e:	f001 f8db 	bl	8007858 <pvPortMalloc>
 80066a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
 80066b0:	e005      	b.n	80066be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066b2:	6978      	ldr	r0, [r7, #20]
 80066b4:	f001 f99c 	bl	80079f0 <vPortFree>
 80066b8:	e001      	b.n	80066be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d017      	beq.n	80066f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	9302      	str	r3, [sp, #8]
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f80e 	bl	8006704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066e8:	69f8      	ldr	r0, [r7, #28]
 80066ea:	f000 f8a9 	bl	8006840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066ee:	2301      	movs	r3, #1
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	e002      	b.n	80066fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066fa:	69bb      	ldr	r3, [r7, #24]
	}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800671c:	3b01      	subs	r3, #1
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	617b      	str	r3, [r7, #20]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01f      	beq.n	8006792 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006752:	2300      	movs	r3, #0
 8006754:	61fb      	str	r3, [r7, #28]
 8006756:	e012      	b.n	800677e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	7819      	ldrb	r1, [r3, #0]
 8006760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	3334      	adds	r3, #52	; 0x34
 8006768:	460a      	mov	r2, r1
 800676a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	3301      	adds	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b0f      	cmp	r3, #15
 8006782:	d9e9      	bls.n	8006758 <prvInitialiseNewTask+0x54>
 8006784:	e000      	b.n	8006788 <prvInitialiseNewTask+0x84>
			{
				break;
 8006786:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006790:	e003      	b.n	800679a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	2b06      	cmp	r3, #6
 800679e:	d901      	bls.n	80067a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067a0:	2306      	movs	r3, #6
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2200      	movs	r2, #0
 80067b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff f96d 	bl	8005a9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	3318      	adds	r3, #24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff f968 	bl	8005a9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	f1c3 0207 	rsb	r2, r3, #7
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	334c      	adds	r3, #76	; 0x4c
 80067f4:	2260      	movs	r2, #96	; 0x60
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 fa51 	bl	8007ca0 <memset>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	4a0c      	ldr	r2, [pc, #48]	; (8006834 <prvInitialiseNewTask+0x130>)
 8006802:	651a      	str	r2, [r3, #80]	; 0x50
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	4a0c      	ldr	r2, [pc, #48]	; (8006838 <prvInitialiseNewTask+0x134>)
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	4a0b      	ldr	r2, [pc, #44]	; (800683c <prvInitialiseNewTask+0x138>)
 800680e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	69b8      	ldr	r0, [r7, #24]
 8006816:	f000 fdcd 	bl	80073b4 <pxPortInitialiseStack>
 800681a:	4602      	mov	r2, r0
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800682c:	bf00      	nop
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	0800867c 	.word	0x0800867c
 8006838:	0800869c 	.word	0x0800869c
 800683c:	0800865c 	.word	0x0800865c

08006840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006848:	f000 fee4 	bl	8007614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800684c:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	4a29      	ldr	r2, [pc, #164]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 8006854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006856:	4b29      	ldr	r3, [pc, #164]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800685e:	4a27      	ldr	r2, [pc, #156]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d110      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800686c:	f000 fbd6 	bl	800701c <prvInitialiseTaskLists>
 8006870:	e00d      	b.n	800688e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006872:	4b23      	ldr	r3, [pc, #140]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800687a:	4b20      	ldr	r3, [pc, #128]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d802      	bhi.n	800688e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006888:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006896:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	2201      	movs	r2, #1
 800689e:	409a      	lsls	r2, r3
 80068a0:	4b19      	ldr	r3, [pc, #100]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4a15      	ldr	r2, [pc, #84]	; (800690c <prvAddNewTaskToReadyList+0xcc>)
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3304      	adds	r3, #4
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f7ff f8f7 	bl	8005ab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068c6:	f000 fed5 	bl	8007674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068d2:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	429a      	cmp	r2, r3
 80068de:	d207      	bcs.n	80068f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <prvAddNewTaskToReadyList+0xd0>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000450 	.word	0x20000450
 80068fc:	20000350 	.word	0x20000350
 8006900:	2000045c 	.word	0x2000045c
 8006904:	2000046c 	.word	0x2000046c
 8006908:	20000458 	.word	0x20000458
 800690c:	20000354 	.word	0x20000354
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d017      	beq.n	8006956 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <vTaskDelay+0x60>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <vTaskDelay+0x30>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60bb      	str	r3, [r7, #8]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006944:	f000 f884 	bl	8006a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006948:	2100      	movs	r1, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fccc 	bl	80072e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006950:	f000 f88c 	bl	8006a6c <xTaskResumeAll>
 8006954:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <vTaskDelay+0x64>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000478 	.word	0x20000478
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	; 0x28
 8006980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800698a:	463a      	mov	r2, r7
 800698c:	1d39      	adds	r1, r7, #4
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f7f9 fc6c 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	9202      	str	r2, [sp, #8]
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2300      	movs	r3, #0
 80069a8:	460a      	mov	r2, r1
 80069aa:	4921      	ldr	r1, [pc, #132]	; (8006a30 <vTaskStartScheduler+0xb4>)
 80069ac:	4821      	ldr	r0, [pc, #132]	; (8006a34 <vTaskStartScheduler+0xb8>)
 80069ae:	f7ff fe07 	bl	80065c0 <xTaskCreateStatic>
 80069b2:	4603      	mov	r3, r0
 80069b4:	4a20      	ldr	r2, [pc, #128]	; (8006a38 <vTaskStartScheduler+0xbc>)
 80069b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069b8:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <vTaskStartScheduler+0xbc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069c0:	2301      	movs	r3, #1
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e001      	b.n	80069ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d11b      	bne.n	8006a08 <vTaskStartScheduler+0x8c>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <vTaskStartScheduler+0xc0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	334c      	adds	r3, #76	; 0x4c
 80069ea:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <vTaskStartScheduler+0xc4>)
 80069ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069ee:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <vTaskStartScheduler+0xc8>)
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <vTaskStartScheduler+0xcc>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069fc:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <vTaskStartScheduler+0xd0>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a02:	f000 fd65 	bl	80074d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a06:	e00e      	b.n	8006a26 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a0e:	d10a      	bne.n	8006a26 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	60fb      	str	r3, [r7, #12]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <vTaskStartScheduler+0xa8>
}
 8006a26:	bf00      	nop
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	0800860c 	.word	0x0800860c
 8006a34:	08006fed 	.word	0x08006fed
 8006a38:	20000474 	.word	0x20000474
 8006a3c:	20000350 	.word	0x20000350
 8006a40:	20000010 	.word	0x20000010
 8006a44:	20000470 	.word	0x20000470
 8006a48:	2000045c 	.word	0x2000045c
 8006a4c:	20000454 	.word	0x20000454

08006a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <vTaskSuspendAll+0x18>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	4a03      	ldr	r2, [pc, #12]	; (8006a68 <vTaskSuspendAll+0x18>)
 8006a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a5e:	bf00      	nop
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20000478 	.word	0x20000478

08006a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a7a:	4b41      	ldr	r3, [pc, #260]	; (8006b80 <xTaskResumeAll+0x114>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	603b      	str	r3, [r7, #0]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a98:	f000 fdbc 	bl	8007614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a9c:	4b38      	ldr	r3, [pc, #224]	; (8006b80 <xTaskResumeAll+0x114>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	4a37      	ldr	r2, [pc, #220]	; (8006b80 <xTaskResumeAll+0x114>)
 8006aa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa6:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <xTaskResumeAll+0x114>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d161      	bne.n	8006b72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006aae:	4b35      	ldr	r3, [pc, #212]	; (8006b84 <xTaskResumeAll+0x118>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d05d      	beq.n	8006b72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ab6:	e02e      	b.n	8006b16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab8:	4b33      	ldr	r3, [pc, #204]	; (8006b88 <xTaskResumeAll+0x11c>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff f852 	bl	8005b6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3304      	adds	r3, #4
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff f84d 	bl	8005b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	2201      	movs	r2, #1
 8006ada:	409a      	lsls	r2, r3
 8006adc:	4b2b      	ldr	r3, [pc, #172]	; (8006b8c <xTaskResumeAll+0x120>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	4a2a      	ldr	r2, [pc, #168]	; (8006b8c <xTaskResumeAll+0x120>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4a27      	ldr	r2, [pc, #156]	; (8006b90 <xTaskResumeAll+0x124>)
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f7fe ffd9 	bl	8005ab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	4b23      	ldr	r3, [pc, #140]	; (8006b94 <xTaskResumeAll+0x128>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d302      	bcc.n	8006b16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006b10:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <xTaskResumeAll+0x12c>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b16:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <xTaskResumeAll+0x11c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1cc      	bne.n	8006ab8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b24:	f000 fb1c 	bl	8007160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b28:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <xTaskResumeAll+0x130>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d010      	beq.n	8006b56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b34:	f000 f836 	bl	8006ba4 <xTaskIncrementTick>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b3e:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <xTaskResumeAll+0x12c>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1f1      	bne.n	8006b34 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006b50:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <xTaskResumeAll+0x130>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <xTaskResumeAll+0x12c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <xTaskResumeAll+0x134>)
 8006b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b72:	f000 fd7f 	bl	8007674 <vPortExitCritical>

	return xAlreadyYielded;
 8006b76:	68bb      	ldr	r3, [r7, #8]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000478 	.word	0x20000478
 8006b84:	20000450 	.word	0x20000450
 8006b88:	20000410 	.word	0x20000410
 8006b8c:	20000458 	.word	0x20000458
 8006b90:	20000354 	.word	0x20000354
 8006b94:	20000350 	.word	0x20000350
 8006b98:	20000464 	.word	0x20000464
 8006b9c:	20000460 	.word	0x20000460
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bae:	4b4e      	ldr	r3, [pc, #312]	; (8006ce8 <xTaskIncrementTick+0x144>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f040 808e 	bne.w	8006cd4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bb8:	4b4c      	ldr	r3, [pc, #304]	; (8006cec <xTaskIncrementTick+0x148>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bc0:	4a4a      	ldr	r2, [pc, #296]	; (8006cec <xTaskIncrementTick+0x148>)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d120      	bne.n	8006c0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bcc:	4b48      	ldr	r3, [pc, #288]	; (8006cf0 <xTaskIncrementTick+0x14c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <xTaskIncrementTick+0x48>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	603b      	str	r3, [r7, #0]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <xTaskIncrementTick+0x46>
 8006bec:	4b40      	ldr	r3, [pc, #256]	; (8006cf0 <xTaskIncrementTick+0x14c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	4b40      	ldr	r3, [pc, #256]	; (8006cf4 <xTaskIncrementTick+0x150>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a3e      	ldr	r2, [pc, #248]	; (8006cf0 <xTaskIncrementTick+0x14c>)
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4a3e      	ldr	r2, [pc, #248]	; (8006cf4 <xTaskIncrementTick+0x150>)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4b3d      	ldr	r3, [pc, #244]	; (8006cf8 <xTaskIncrementTick+0x154>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	4a3c      	ldr	r2, [pc, #240]	; (8006cf8 <xTaskIncrementTick+0x154>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	f000 faa9 	bl	8007160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c0e:	4b3b      	ldr	r3, [pc, #236]	; (8006cfc <xTaskIncrementTick+0x158>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d348      	bcc.n	8006caa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c18:	4b35      	ldr	r3, [pc, #212]	; (8006cf0 <xTaskIncrementTick+0x14c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c22:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <xTaskIncrementTick+0x158>)
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c28:	601a      	str	r2, [r3, #0]
					break;
 8006c2a:	e03e      	b.n	8006caa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c2c:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <xTaskIncrementTick+0x14c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d203      	bcs.n	8006c4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c44:	4a2d      	ldr	r2, [pc, #180]	; (8006cfc <xTaskIncrementTick+0x158>)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c4a:	e02e      	b.n	8006caa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe ff8c 	bl	8005b6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	3318      	adds	r3, #24
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe ff83 	bl	8005b6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <xTaskIncrementTick+0x15c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <xTaskIncrementTick+0x15c>)
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4a1f      	ldr	r2, [pc, #124]	; (8006d04 <xTaskIncrementTick+0x160>)
 8006c88:	441a      	add	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f7fe ff0f 	bl	8005ab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9a:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <xTaskIncrementTick+0x164>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d3b9      	bcc.n	8006c18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ca8:	e7b6      	b.n	8006c18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006caa:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <xTaskIncrementTick+0x164>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	4914      	ldr	r1, [pc, #80]	; (8006d04 <xTaskIncrementTick+0x160>)
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d901      	bls.n	8006cc6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <xTaskIncrementTick+0x168>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	e004      	b.n	8006cde <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <xTaskIncrementTick+0x16c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <xTaskIncrementTick+0x16c>)
 8006cdc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cde:	697b      	ldr	r3, [r7, #20]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000478 	.word	0x20000478
 8006cec:	20000454 	.word	0x20000454
 8006cf0:	20000408 	.word	0x20000408
 8006cf4:	2000040c 	.word	0x2000040c
 8006cf8:	20000468 	.word	0x20000468
 8006cfc:	20000470 	.word	0x20000470
 8006d00:	20000458 	.word	0x20000458
 8006d04:	20000354 	.word	0x20000354
 8006d08:	20000350 	.word	0x20000350
 8006d0c:	20000464 	.word	0x20000464
 8006d10:	20000460 	.word	0x20000460

08006d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <vTaskSwitchContext+0xac>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d22:	4b28      	ldr	r3, [pc, #160]	; (8006dc4 <vTaskSwitchContext+0xb0>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d28:	e044      	b.n	8006db4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006d2a:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <vTaskSwitchContext+0xb0>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <vTaskSwitchContext+0xb4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	fab3 f383 	clz	r3, r3
 8006d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	f1c3 031f 	rsb	r3, r3, #31
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	4921      	ldr	r1, [pc, #132]	; (8006dcc <vTaskSwitchContext+0xb8>)
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	607b      	str	r3, [r7, #4]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <vTaskSwitchContext+0x5a>
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <vTaskSwitchContext+0xb8>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	605a      	str	r2, [r3, #4]
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3308      	adds	r3, #8
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d104      	bne.n	8006da0 <vTaskSwitchContext+0x8c>
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	605a      	str	r2, [r3, #4]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4a0a      	ldr	r2, [pc, #40]	; (8006dd0 <vTaskSwitchContext+0xbc>)
 8006da8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <vTaskSwitchContext+0xbc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	334c      	adds	r3, #76	; 0x4c
 8006db0:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <vTaskSwitchContext+0xc0>)
 8006db2:	6013      	str	r3, [r2, #0]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20000478 	.word	0x20000478
 8006dc4:	20000464 	.word	0x20000464
 8006dc8:	20000458 	.word	0x20000458
 8006dcc:	20000354 	.word	0x20000354
 8006dd0:	20000350 	.word	0x20000350
 8006dd4:	20000010 	.word	0x20000010

08006dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dfe:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <vTaskPlaceOnEventList+0x44>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3318      	adds	r3, #24
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe fe78 	bl	8005afc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f000 fa6a 	bl	80072e8 <prvAddCurrentTaskToDelayedList>
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000350 	.word	0x20000350

08006e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60fb      	str	r3, [r7, #12]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	3318      	adds	r3, #24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fe8c 	bl	8005b6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e56:	4b1d      	ldr	r3, [pc, #116]	; (8006ecc <xTaskRemoveFromEventList+0xac>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d11c      	bne.n	8006e98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fe83 	bl	8005b6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <xTaskRemoveFromEventList+0xb0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <xTaskRemoveFromEventList+0xb0>)
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <xTaskRemoveFromEventList+0xb4>)
 8006e88:	441a      	add	r2, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fe fe0f 	bl	8005ab4 <vListInsertEnd>
 8006e96:	e005      	b.n	8006ea4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3318      	adds	r3, #24
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	480e      	ldr	r0, [pc, #56]	; (8006ed8 <xTaskRemoveFromEventList+0xb8>)
 8006ea0:	f7fe fe08 	bl	8005ab4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <xTaskRemoveFromEventList+0xbc>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d905      	bls.n	8006ebe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <xTaskRemoveFromEventList+0xc0>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	e001      	b.n	8006ec2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ec2:	697b      	ldr	r3, [r7, #20]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000478 	.word	0x20000478
 8006ed0:	20000458 	.word	0x20000458
 8006ed4:	20000354 	.word	0x20000354
 8006ed8:	20000410 	.word	0x20000410
 8006edc:	20000350 	.word	0x20000350
 8006ee0:	20000464 	.word	0x20000464

08006ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <vTaskInternalSetTimeOutState+0x24>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <vTaskInternalSetTimeOutState+0x28>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	605a      	str	r2, [r3, #4]
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	20000468 	.word	0x20000468
 8006f0c:	20000454 	.word	0x20000454

08006f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	613b      	str	r3, [r7, #16]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f52:	f000 fb5f 	bl	8007614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f56:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <xTaskCheckForTimeOut+0xbc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d102      	bne.n	8006f76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e023      	b.n	8006fbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <xTaskCheckForTimeOut+0xc0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d007      	beq.n	8006f92 <xTaskCheckForTimeOut+0x82>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e015      	b.n	8006fbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d20b      	bcs.n	8006fb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff9b 	bl	8006ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	e004      	b.n	8006fbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fbe:	f000 fb59 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000454 	.word	0x20000454
 8006fd0:	20000468 	.word	0x20000468

08006fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fd8:	4b03      	ldr	r3, [pc, #12]	; (8006fe8 <vTaskMissedYield+0x14>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000464 	.word	0x20000464

08006fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ff4:	f000 f852 	bl	800709c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <prvIdleTask+0x28>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d9f9      	bls.n	8006ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <prvIdleTask+0x2c>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007010:	e7f0      	b.n	8006ff4 <prvIdleTask+0x8>
 8007012:	bf00      	nop
 8007014:	20000354 	.word	0x20000354
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e00c      	b.n	8007042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a12      	ldr	r2, [pc, #72]	; (800707c <prvInitialiseTaskLists+0x60>)
 8007034:	4413      	add	r3, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fd0f 	bl	8005a5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3301      	adds	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b06      	cmp	r3, #6
 8007046:	d9ef      	bls.n	8007028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007048:	480d      	ldr	r0, [pc, #52]	; (8007080 <prvInitialiseTaskLists+0x64>)
 800704a:	f7fe fd06 	bl	8005a5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800704e:	480d      	ldr	r0, [pc, #52]	; (8007084 <prvInitialiseTaskLists+0x68>)
 8007050:	f7fe fd03 	bl	8005a5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007054:	480c      	ldr	r0, [pc, #48]	; (8007088 <prvInitialiseTaskLists+0x6c>)
 8007056:	f7fe fd00 	bl	8005a5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800705a:	480c      	ldr	r0, [pc, #48]	; (800708c <prvInitialiseTaskLists+0x70>)
 800705c:	f7fe fcfd 	bl	8005a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007060:	480b      	ldr	r0, [pc, #44]	; (8007090 <prvInitialiseTaskLists+0x74>)
 8007062:	f7fe fcfa 	bl	8005a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <prvInitialiseTaskLists+0x78>)
 8007068:	4a05      	ldr	r2, [pc, #20]	; (8007080 <prvInitialiseTaskLists+0x64>)
 800706a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <prvInitialiseTaskLists+0x7c>)
 800706e:	4a05      	ldr	r2, [pc, #20]	; (8007084 <prvInitialiseTaskLists+0x68>)
 8007070:	601a      	str	r2, [r3, #0]
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000354 	.word	0x20000354
 8007080:	200003e0 	.word	0x200003e0
 8007084:	200003f4 	.word	0x200003f4
 8007088:	20000410 	.word	0x20000410
 800708c:	20000424 	.word	0x20000424
 8007090:	2000043c 	.word	0x2000043c
 8007094:	20000408 	.word	0x20000408
 8007098:	2000040c 	.word	0x2000040c

0800709c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a2:	e019      	b.n	80070d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070a4:	f000 fab6 	bl	8007614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a8:	4b10      	ldr	r3, [pc, #64]	; (80070ec <prvCheckTasksWaitingTermination+0x50>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fd5a 	bl	8005b6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070ce:	f000 fad1 	bl	8007674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f810 	bl	80070f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e1      	bne.n	80070a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000424 	.word	0x20000424
 80070f0:	20000450 	.word	0x20000450
 80070f4:	20000438 	.word	0x20000438

080070f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	334c      	adds	r3, #76	; 0x4c
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fe3b 	bl	8007d80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d108      	bne.n	8007126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fc69 	bl	80079f0 <vPortFree>
				vPortFree( pxTCB );
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fc66 	bl	80079f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007124:	e018      	b.n	8007158 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d103      	bne.n	8007138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc5d 	bl	80079f0 <vPortFree>
	}
 8007136:	e00f      	b.n	8007158 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800713e:	2b02      	cmp	r3, #2
 8007140:	d00a      	beq.n	8007158 <prvDeleteTCB+0x60>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60fb      	str	r3, [r7, #12]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <prvDeleteTCB+0x5e>
	}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <prvResetNextTaskUnblockTime+0x38>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <prvResetNextTaskUnblockTime+0x3c>)
 8007172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007176:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007178:	e008      	b.n	800718c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <prvResetNextTaskUnblockTime+0x38>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4a04      	ldr	r2, [pc, #16]	; (800719c <prvResetNextTaskUnblockTime+0x3c>)
 800718a:	6013      	str	r3, [r2, #0]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	20000408 	.word	0x20000408
 800719c:	20000470 	.word	0x20000470

080071a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <xTaskGetSchedulerState+0x34>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071ae:	2301      	movs	r3, #1
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	e008      	b.n	80071c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b4:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <xTaskGetSchedulerState+0x38>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071bc:	2302      	movs	r3, #2
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	e001      	b.n	80071c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071c2:	2300      	movs	r3, #0
 80071c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071c6:	687b      	ldr	r3, [r7, #4]
	}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	2000045c 	.word	0x2000045c
 80071d8:	20000478 	.word	0x20000478

080071dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d06e      	beq.n	80072d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071f2:	4b3a      	ldr	r3, [pc, #232]	; (80072dc <xTaskPriorityDisinherit+0x100>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d00a      	beq.n	8007212 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	60fb      	str	r3, [r7, #12]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	60bb      	str	r3, [r7, #8]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007234:	1e5a      	subs	r2, r3, #1
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	429a      	cmp	r2, r3
 8007244:	d044      	beq.n	80072d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800724a:	2b00      	cmp	r3, #0
 800724c:	d140      	bne.n	80072d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fc8b 	bl	8005b6e <uxListRemove>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d115      	bne.n	800728a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007262:	491f      	ldr	r1, [pc, #124]	; (80072e0 <xTaskPriorityDisinherit+0x104>)
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <xTaskPriorityDisinherit+0xae>
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	2201      	movs	r2, #1
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	43da      	mvns	r2, r3
 8007280:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <xTaskPriorityDisinherit+0x108>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4013      	ands	r3, r2
 8007286:	4a17      	ldr	r2, [pc, #92]	; (80072e4 <xTaskPriorityDisinherit+0x108>)
 8007288:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	f1c3 0207 	rsb	r2, r3, #7
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	2201      	movs	r2, #1
 80072a4:	409a      	lsls	r2, r3
 80072a6:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <xTaskPriorityDisinherit+0x108>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	4a0d      	ldr	r2, [pc, #52]	; (80072e4 <xTaskPriorityDisinherit+0x108>)
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <xTaskPriorityDisinherit+0x104>)
 80072be:	441a      	add	r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe fbf4 	bl	8005ab4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072d0:	697b      	ldr	r3, [r7, #20]
	}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000350 	.word	0x20000350
 80072e0:	20000354 	.word	0x20000354
 80072e4:	20000458 	.word	0x20000458

080072e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072f2:	4b29      	ldr	r3, [pc, #164]	; (8007398 <prvAddCurrentTaskToDelayedList+0xb0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072f8:	4b28      	ldr	r3, [pc, #160]	; (800739c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fc35 	bl	8005b6e <uxListRemove>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800730a:	4b24      	ldr	r3, [pc, #144]	; (800739c <prvAddCurrentTaskToDelayedList+0xb4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	2201      	movs	r2, #1
 8007312:	fa02 f303 	lsl.w	r3, r2, r3
 8007316:	43da      	mvns	r2, r3
 8007318:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4013      	ands	r3, r2
 800731e:	4a20      	ldr	r2, [pc, #128]	; (80073a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007320:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007328:	d10a      	bne.n	8007340 <prvAddCurrentTaskToDelayedList+0x58>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007330:	4b1a      	ldr	r3, [pc, #104]	; (800739c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3304      	adds	r3, #4
 8007336:	4619      	mov	r1, r3
 8007338:	481a      	ldr	r0, [pc, #104]	; (80073a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800733a:	f7fe fbbb 	bl	8005ab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800733e:	e026      	b.n	800738e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007348:	4b14      	ldr	r3, [pc, #80]	; (800739c <prvAddCurrentTaskToDelayedList+0xb4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d209      	bcs.n	800736c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007358:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <prvAddCurrentTaskToDelayedList+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fe fbc9 	bl	8005afc <vListInsert>
}
 800736a:	e010      	b.n	800738e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800736c:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b0a      	ldr	r3, [pc, #40]	; (800739c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3304      	adds	r3, #4
 8007376:	4619      	mov	r1, r3
 8007378:	4610      	mov	r0, r2
 800737a:	f7fe fbbf 	bl	8005afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800737e:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	d202      	bcs.n	800738e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6013      	str	r3, [r2, #0]
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000454 	.word	0x20000454
 800739c:	20000350 	.word	0x20000350
 80073a0:	20000458 	.word	0x20000458
 80073a4:	2000043c 	.word	0x2000043c
 80073a8:	2000040c 	.word	0x2000040c
 80073ac:	20000408 	.word	0x20000408
 80073b0:	20000470 	.word	0x20000470

080073b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b04      	subs	r3, #4
 80073c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b04      	subs	r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073e4:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <pxPortInitialiseStack+0x64>)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3b14      	subs	r3, #20
 80073ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b04      	subs	r3, #4
 80073fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f06f 0202 	mvn.w	r2, #2
 8007402:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3b20      	subs	r3, #32
 8007408:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	0800741d 	.word	0x0800741d

0800741c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007426:	4b12      	ldr	r3, [pc, #72]	; (8007470 <prvTaskExitError+0x54>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800742e:	d00a      	beq.n	8007446 <prvTaskExitError+0x2a>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <prvTaskExitError+0x28>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60bb      	str	r3, [r7, #8]
}
 8007458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800745a:	bf00      	nop
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0fc      	beq.n	800745c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	2000000c 	.word	0x2000000c
	...

08007480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007480:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <pxCurrentTCBConst2>)
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748a:	f380 8809 	msr	PSP, r0
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8811 	msr	BASEPRI, r0
 800749a:	4770      	bx	lr
 800749c:	f3af 8000 	nop.w

080074a0 <pxCurrentTCBConst2>:
 80074a0:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074a8:	4808      	ldr	r0, [pc, #32]	; (80074cc <prvPortStartFirstTask+0x24>)
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f380 8808 	msr	MSP, r0
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8814 	msr	CONTROL, r0
 80074ba:	b662      	cpsie	i
 80074bc:	b661      	cpsie	f
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	df00      	svc	0
 80074c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ca:	bf00      	nop
 80074cc:	e000ed08 	.word	0xe000ed08

080074d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074d6:	4b46      	ldr	r3, [pc, #280]	; (80075f0 <xPortStartScheduler+0x120>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a46      	ldr	r2, [pc, #280]	; (80075f4 <xPortStartScheduler+0x124>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d10a      	bne.n	80074f6 <xPortStartScheduler+0x26>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074f6:	4b3e      	ldr	r3, [pc, #248]	; (80075f0 <xPortStartScheduler+0x120>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3f      	ldr	r2, [pc, #252]	; (80075f8 <xPortStartScheduler+0x128>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10a      	bne.n	8007516 <xPortStartScheduler+0x46>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007516:	4b39      	ldr	r3, [pc, #228]	; (80075fc <xPortStartScheduler+0x12c>)
 8007518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	22ff      	movs	r2, #255	; 0xff
 8007526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007538:	b2da      	uxtb	r2, r3
 800753a:	4b31      	ldr	r3, [pc, #196]	; (8007600 <xPortStartScheduler+0x130>)
 800753c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800753e:	4b31      	ldr	r3, [pc, #196]	; (8007604 <xPortStartScheduler+0x134>)
 8007540:	2207      	movs	r2, #7
 8007542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007544:	e009      	b.n	800755a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007546:	4b2f      	ldr	r3, [pc, #188]	; (8007604 <xPortStartScheduler+0x134>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3b01      	subs	r3, #1
 800754c:	4a2d      	ldr	r2, [pc, #180]	; (8007604 <xPortStartScheduler+0x134>)
 800754e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d0ef      	beq.n	8007546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007566:	4b27      	ldr	r3, [pc, #156]	; (8007604 <xPortStartScheduler+0x134>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f1c3 0307 	rsb	r3, r3, #7
 800756e:	2b04      	cmp	r3, #4
 8007570:	d00a      	beq.n	8007588 <xPortStartScheduler+0xb8>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60bb      	str	r3, [r7, #8]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007588:	4b1e      	ldr	r3, [pc, #120]	; (8007604 <xPortStartScheduler+0x134>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <xPortStartScheduler+0x134>)
 8007590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007592:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <xPortStartScheduler+0x134>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800759a:	4a1a      	ldr	r2, [pc, #104]	; (8007604 <xPortStartScheduler+0x134>)
 800759c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075a6:	4b18      	ldr	r3, [pc, #96]	; (8007608 <xPortStartScheduler+0x138>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <xPortStartScheduler+0x138>)
 80075ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075b2:	4b15      	ldr	r3, [pc, #84]	; (8007608 <xPortStartScheduler+0x138>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a14      	ldr	r2, [pc, #80]	; (8007608 <xPortStartScheduler+0x138>)
 80075b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075be:	f000 f8dd 	bl	800777c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075c2:	4b12      	ldr	r3, [pc, #72]	; (800760c <xPortStartScheduler+0x13c>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075c8:	f000 f8fc 	bl	80077c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075cc:	4b10      	ldr	r3, [pc, #64]	; (8007610 <xPortStartScheduler+0x140>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <xPortStartScheduler+0x140>)
 80075d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075d8:	f7ff ff66 	bl	80074a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075dc:	f7ff fb9a 	bl	8006d14 <vTaskSwitchContext>
	prvTaskExitError();
 80075e0:	f7ff ff1c 	bl	800741c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	e000ed00 	.word	0xe000ed00
 80075f4:	410fc271 	.word	0x410fc271
 80075f8:	410fc270 	.word	0x410fc270
 80075fc:	e000e400 	.word	0xe000e400
 8007600:	2000047c 	.word	0x2000047c
 8007604:	20000480 	.word	0x20000480
 8007608:	e000ed20 	.word	0xe000ed20
 800760c:	2000000c 	.word	0x2000000c
 8007610:	e000ef34 	.word	0xe000ef34

08007614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	607b      	str	r3, [r7, #4]
}
 800762c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <vPortEnterCritical+0x58>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	4a0d      	ldr	r2, [pc, #52]	; (800766c <vPortEnterCritical+0x58>)
 8007636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <vPortEnterCritical+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10f      	bne.n	8007660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007640:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <vPortEnterCritical+0x5c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <vPortEnterCritical+0x4c>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	603b      	str	r3, [r7, #0]
}
 800765c:	bf00      	nop
 800765e:	e7fe      	b.n	800765e <vPortEnterCritical+0x4a>
	}
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	2000000c 	.word	0x2000000c
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <vPortExitCritical+0x50>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <vPortExitCritical+0x24>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	607b      	str	r3, [r7, #4]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <vPortExitCritical+0x50>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	4a09      	ldr	r2, [pc, #36]	; (80076c4 <vPortExitCritical+0x50>)
 80076a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076a2:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <vPortExitCritical+0x50>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <vPortExitCritical+0x42>
 80076aa:	2300      	movs	r3, #0
 80076ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f383 8811 	msr	BASEPRI, r3
}
 80076b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000000c 	.word	0x2000000c
	...

080076d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076d0:	f3ef 8009 	mrs	r0, PSP
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4b15      	ldr	r3, [pc, #84]	; (8007730 <pxCurrentTCBConst>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f01e 0f10 	tst.w	lr, #16
 80076e0:	bf08      	it	eq
 80076e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	6010      	str	r0, [r2, #0]
 80076ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076f4:	f380 8811 	msr	BASEPRI, r0
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f7ff fb08 	bl	8006d14 <vTaskSwitchContext>
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f380 8811 	msr	BASEPRI, r0
 800770c:	bc09      	pop	{r0, r3}
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6808      	ldr	r0, [r1, #0]
 8007712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007716:	f01e 0f10 	tst.w	lr, #16
 800771a:	bf08      	it	eq
 800771c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007720:	f380 8809 	msr	PSP, r0
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w

08007730 <pxCurrentTCBConst>:
 8007730:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop

08007738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
}
 8007750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007752:	f7ff fa27 	bl	8006ba4 <xTaskIncrementTick>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <SysTick_Handler+0x40>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f383 8811 	msr	BASEPRI, r3
}
 800776e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <vPortSetupTimerInterrupt+0x34>)
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <vPortSetupTimerInterrupt+0x38>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <vPortSetupTimerInterrupt+0x3c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <vPortSetupTimerInterrupt+0x40>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	099b      	lsrs	r3, r3, #6
 8007798:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <vPortSetupTimerInterrupt+0x44>)
 800779a:	3b01      	subs	r3, #1
 800779c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800779e:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <vPortSetupTimerInterrupt+0x34>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000e010 	.word	0xe000e010
 80077b4:	e000e018 	.word	0xe000e018
 80077b8:	20000000 	.word	0x20000000
 80077bc:	10624dd3 	.word	0x10624dd3
 80077c0:	e000e014 	.word	0xe000e014

080077c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077d4 <vPortEnableVFP+0x10>
 80077c8:	6801      	ldr	r1, [r0, #0]
 80077ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077ce:	6001      	str	r1, [r0, #0]
 80077d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077d2:	bf00      	nop
 80077d4:	e000ed88 	.word	0xe000ed88

080077d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077de:	f3ef 8305 	mrs	r3, IPSR
 80077e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d914      	bls.n	8007814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077ea:	4a17      	ldr	r2, [pc, #92]	; (8007848 <vPortValidateInterruptPriority+0x70>)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077f4:	4b15      	ldr	r3, [pc, #84]	; (800784c <vPortValidateInterruptPriority+0x74>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	7afa      	ldrb	r2, [r7, #11]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d20a      	bcs.n	8007814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007814:	4b0e      	ldr	r3, [pc, #56]	; (8007850 <vPortValidateInterruptPriority+0x78>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <vPortValidateInterruptPriority+0x7c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d90a      	bls.n	800783a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	603b      	str	r3, [r7, #0]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <vPortValidateInterruptPriority+0x60>
	}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	e000e3f0 	.word	0xe000e3f0
 800784c:	2000047c 	.word	0x2000047c
 8007850:	e000ed0c 	.word	0xe000ed0c
 8007854:	20000480 	.word	0x20000480

08007858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007860:	2300      	movs	r3, #0
 8007862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007864:	f7ff f8f4 	bl	8006a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007868:	4b5b      	ldr	r3, [pc, #364]	; (80079d8 <pvPortMalloc+0x180>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007870:	f000 f920 	bl	8007ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007874:	4b59      	ldr	r3, [pc, #356]	; (80079dc <pvPortMalloc+0x184>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4013      	ands	r3, r2
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8093 	bne.w	80079a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01d      	beq.n	80078c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007888:	2208      	movs	r2, #8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4413      	add	r3, r2
 800788e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	2b00      	cmp	r3, #0
 8007898:	d014      	beq.n	80078c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f023 0307 	bic.w	r3, r3, #7
 80078a0:	3308      	adds	r3, #8
 80078a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <pvPortMalloc+0x6c>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	617b      	str	r3, [r7, #20]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d06e      	beq.n	80079a8 <pvPortMalloc+0x150>
 80078ca:	4b45      	ldr	r3, [pc, #276]	; (80079e0 <pvPortMalloc+0x188>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d869      	bhi.n	80079a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078d4:	4b43      	ldr	r3, [pc, #268]	; (80079e4 <pvPortMalloc+0x18c>)
 80078d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078d8:	4b42      	ldr	r3, [pc, #264]	; (80079e4 <pvPortMalloc+0x18c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078de:	e004      	b.n	80078ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d903      	bls.n	80078fc <pvPortMalloc+0xa4>
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f1      	bne.n	80078e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078fc:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <pvPortMalloc+0x180>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007902:	429a      	cmp	r2, r3
 8007904:	d050      	beq.n	80079a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2208      	movs	r2, #8
 800790c:	4413      	add	r3, r2
 800790e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	1ad2      	subs	r2, r2, r3
 8007920:	2308      	movs	r3, #8
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	429a      	cmp	r2, r3
 8007926:	d91f      	bls.n	8007968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <pvPortMalloc+0xf8>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	613b      	str	r3, [r7, #16]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	1ad2      	subs	r2, r2, r3
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007962:	69b8      	ldr	r0, [r7, #24]
 8007964:	f000 f908 	bl	8007b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007968:	4b1d      	ldr	r3, [pc, #116]	; (80079e0 <pvPortMalloc+0x188>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <pvPortMalloc+0x188>)
 8007974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007976:	4b1a      	ldr	r3, [pc, #104]	; (80079e0 <pvPortMalloc+0x188>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <pvPortMalloc+0x190>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d203      	bcs.n	800798a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007982:	4b17      	ldr	r3, [pc, #92]	; (80079e0 <pvPortMalloc+0x188>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a18      	ldr	r2, [pc, #96]	; (80079e8 <pvPortMalloc+0x190>)
 8007988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	4b13      	ldr	r3, [pc, #76]	; (80079dc <pvPortMalloc+0x184>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	431a      	orrs	r2, r3
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <pvPortMalloc+0x194>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3301      	adds	r3, #1
 80079a4:	4a11      	ldr	r2, [pc, #68]	; (80079ec <pvPortMalloc+0x194>)
 80079a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079a8:	f7ff f860 	bl	8006a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <pvPortMalloc+0x174>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	60fb      	str	r3, [r7, #12]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <pvPortMalloc+0x172>
	return pvReturn;
 80079cc:	69fb      	ldr	r3, [r7, #28]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3728      	adds	r7, #40	; 0x28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20001044 	.word	0x20001044
 80079dc:	20001058 	.word	0x20001058
 80079e0:	20001048 	.word	0x20001048
 80079e4:	2000103c 	.word	0x2000103c
 80079e8:	2000104c 	.word	0x2000104c
 80079ec:	20001050 	.word	0x20001050

080079f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d04d      	beq.n	8007a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a02:	2308      	movs	r3, #8
 8007a04:	425b      	negs	r3, r3
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4413      	add	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <vPortFree+0xb8>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <vPortFree+0x44>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	60fb      	str	r3, [r7, #12]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <vPortFree+0x62>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	60bb      	str	r3, [r7, #8]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <vPortFree+0xb8>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01e      	beq.n	8007a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11a      	bne.n	8007a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <vPortFree+0xb8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	43db      	mvns	r3, r3
 8007a72:	401a      	ands	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a78:	f7fe ffea 	bl	8006a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <vPortFree+0xbc>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4413      	add	r3, r2
 8007a86:	4a09      	ldr	r2, [pc, #36]	; (8007aac <vPortFree+0xbc>)
 8007a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a8a:	6938      	ldr	r0, [r7, #16]
 8007a8c:	f000 f874 	bl	8007b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <vPortFree+0xc0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3301      	adds	r3, #1
 8007a96:	4a06      	ldr	r2, [pc, #24]	; (8007ab0 <vPortFree+0xc0>)
 8007a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a9a:	f7fe ffe7 	bl	8006a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a9e:	bf00      	nop
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20001058 	.word	0x20001058
 8007aac:	20001048 	.word	0x20001048
 8007ab0:	20001054 	.word	0x20001054

08007ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ac0:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <prvHeapInit+0xac>)
 8007ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00c      	beq.n	8007ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3307      	adds	r3, #7
 8007ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0307 	bic.w	r3, r3, #7
 8007ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <prvHeapInit+0xac>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aec:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <prvHeapInit+0xb0>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007af2:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <prvHeapInit+0xb0>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b00:	2208      	movs	r2, #8
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <prvHeapInit+0xb4>)
 8007b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <prvHeapInit+0xb4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b1e:	4b12      	ldr	r3, [pc, #72]	; (8007b68 <prvHeapInit+0xb4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b34:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <prvHeapInit+0xb4>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	4a0a      	ldr	r2, [pc, #40]	; (8007b6c <prvHeapInit+0xb8>)
 8007b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <prvHeapInit+0xbc>)
 8007b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <prvHeapInit+0xc0>)
 8007b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	20000484 	.word	0x20000484
 8007b64:	2000103c 	.word	0x2000103c
 8007b68:	20001044 	.word	0x20001044
 8007b6c:	2000104c 	.word	0x2000104c
 8007b70:	20001048 	.word	0x20001048
 8007b74:	20001058 	.word	0x20001058

08007b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b80:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <prvInsertBlockIntoFreeList+0xac>)
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e002      	b.n	8007b8c <prvInsertBlockIntoFreeList+0x14>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d8f7      	bhi.n	8007b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d108      	bne.n	8007bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	441a      	add	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d118      	bne.n	8007c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d00d      	beq.n	8007bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	441a      	add	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e008      	b.n	8007c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvInsertBlockIntoFreeList+0xb0>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e003      	b.n	8007c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d002      	beq.n	8007c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	2000103c 	.word	0x2000103c
 8007c28:	20001044 	.word	0x20001044

08007c2c <__errno>:
 8007c2c:	4b01      	ldr	r3, [pc, #4]	; (8007c34 <__errno+0x8>)
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000010 	.word	0x20000010

08007c38 <__libc_init_array>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	4d0d      	ldr	r5, [pc, #52]	; (8007c70 <__libc_init_array+0x38>)
 8007c3c:	4c0d      	ldr	r4, [pc, #52]	; (8007c74 <__libc_init_array+0x3c>)
 8007c3e:	1b64      	subs	r4, r4, r5
 8007c40:	10a4      	asrs	r4, r4, #2
 8007c42:	2600      	movs	r6, #0
 8007c44:	42a6      	cmp	r6, r4
 8007c46:	d109      	bne.n	8007c5c <__libc_init_array+0x24>
 8007c48:	4d0b      	ldr	r5, [pc, #44]	; (8007c78 <__libc_init_array+0x40>)
 8007c4a:	4c0c      	ldr	r4, [pc, #48]	; (8007c7c <__libc_init_array+0x44>)
 8007c4c:	f000 fcb8 	bl	80085c0 <_init>
 8007c50:	1b64      	subs	r4, r4, r5
 8007c52:	10a4      	asrs	r4, r4, #2
 8007c54:	2600      	movs	r6, #0
 8007c56:	42a6      	cmp	r6, r4
 8007c58:	d105      	bne.n	8007c66 <__libc_init_array+0x2e>
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c60:	4798      	blx	r3
 8007c62:	3601      	adds	r6, #1
 8007c64:	e7ee      	b.n	8007c44 <__libc_init_array+0xc>
 8007c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6a:	4798      	blx	r3
 8007c6c:	3601      	adds	r6, #1
 8007c6e:	e7f2      	b.n	8007c56 <__libc_init_array+0x1e>
 8007c70:	080086f0 	.word	0x080086f0
 8007c74:	080086f0 	.word	0x080086f0
 8007c78:	080086f0 	.word	0x080086f0
 8007c7c:	080086f4 	.word	0x080086f4

08007c80 <__retarget_lock_acquire_recursive>:
 8007c80:	4770      	bx	lr

08007c82 <__retarget_lock_release_recursive>:
 8007c82:	4770      	bx	lr

08007c84 <memcpy>:
 8007c84:	440a      	add	r2, r1
 8007c86:	4291      	cmp	r1, r2
 8007c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c8c:	d100      	bne.n	8007c90 <memcpy+0xc>
 8007c8e:	4770      	bx	lr
 8007c90:	b510      	push	{r4, lr}
 8007c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c9a:	4291      	cmp	r1, r2
 8007c9c:	d1f9      	bne.n	8007c92 <memcpy+0xe>
 8007c9e:	bd10      	pop	{r4, pc}

08007ca0 <memset>:
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d100      	bne.n	8007caa <memset+0xa>
 8007ca8:	4770      	bx	lr
 8007caa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cae:	e7f9      	b.n	8007ca4 <memset+0x4>

08007cb0 <_malloc_r>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	1ccd      	adds	r5, r1, #3
 8007cb4:	f025 0503 	bic.w	r5, r5, #3
 8007cb8:	3508      	adds	r5, #8
 8007cba:	2d0c      	cmp	r5, #12
 8007cbc:	bf38      	it	cc
 8007cbe:	250c      	movcc	r5, #12
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	db01      	blt.n	8007cca <_malloc_r+0x1a>
 8007cc6:	42a9      	cmp	r1, r5
 8007cc8:	d903      	bls.n	8007cd2 <_malloc_r+0x22>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	6033      	str	r3, [r6, #0]
 8007cce:	2000      	movs	r0, #0
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd2:	f000 f8e1 	bl	8007e98 <__malloc_lock>
 8007cd6:	4921      	ldr	r1, [pc, #132]	; (8007d5c <_malloc_r+0xac>)
 8007cd8:	680a      	ldr	r2, [r1, #0]
 8007cda:	4614      	mov	r4, r2
 8007cdc:	b99c      	cbnz	r4, 8007d06 <_malloc_r+0x56>
 8007cde:	4f20      	ldr	r7, [pc, #128]	; (8007d60 <_malloc_r+0xb0>)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	b923      	cbnz	r3, 8007cee <_malloc_r+0x3e>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f000 f8a6 	bl	8007e38 <_sbrk_r>
 8007cec:	6038      	str	r0, [r7, #0]
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 f8a1 	bl	8007e38 <_sbrk_r>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	d123      	bne.n	8007d42 <_malloc_r+0x92>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f000 f8d0 	bl	8007ea4 <__malloc_unlock>
 8007d04:	e7e3      	b.n	8007cce <_malloc_r+0x1e>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	1b5b      	subs	r3, r3, r5
 8007d0a:	d417      	bmi.n	8007d3c <_malloc_r+0x8c>
 8007d0c:	2b0b      	cmp	r3, #11
 8007d0e:	d903      	bls.n	8007d18 <_malloc_r+0x68>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	441c      	add	r4, r3
 8007d14:	6025      	str	r5, [r4, #0]
 8007d16:	e004      	b.n	8007d22 <_malloc_r+0x72>
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	42a2      	cmp	r2, r4
 8007d1c:	bf0c      	ite	eq
 8007d1e:	600b      	streq	r3, [r1, #0]
 8007d20:	6053      	strne	r3, [r2, #4]
 8007d22:	4630      	mov	r0, r6
 8007d24:	f000 f8be 	bl	8007ea4 <__malloc_unlock>
 8007d28:	f104 000b 	add.w	r0, r4, #11
 8007d2c:	1d23      	adds	r3, r4, #4
 8007d2e:	f020 0007 	bic.w	r0, r0, #7
 8007d32:	1ac2      	subs	r2, r0, r3
 8007d34:	d0cc      	beq.n	8007cd0 <_malloc_r+0x20>
 8007d36:	1a1b      	subs	r3, r3, r0
 8007d38:	50a3      	str	r3, [r4, r2]
 8007d3a:	e7c9      	b.n	8007cd0 <_malloc_r+0x20>
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	6864      	ldr	r4, [r4, #4]
 8007d40:	e7cc      	b.n	8007cdc <_malloc_r+0x2c>
 8007d42:	1cc4      	adds	r4, r0, #3
 8007d44:	f024 0403 	bic.w	r4, r4, #3
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d0e3      	beq.n	8007d14 <_malloc_r+0x64>
 8007d4c:	1a21      	subs	r1, r4, r0
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f000 f872 	bl	8007e38 <_sbrk_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1dd      	bne.n	8007d14 <_malloc_r+0x64>
 8007d58:	e7cf      	b.n	8007cfa <_malloc_r+0x4a>
 8007d5a:	bf00      	nop
 8007d5c:	2000105c 	.word	0x2000105c
 8007d60:	20001060 	.word	0x20001060

08007d64 <cleanup_glue>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	6809      	ldr	r1, [r1, #0]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	b109      	cbz	r1, 8007d72 <cleanup_glue+0xe>
 8007d6e:	f7ff fff9 	bl	8007d64 <cleanup_glue>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d7a:	f000 b899 	b.w	8007eb0 <_free_r>
	...

08007d80 <_reclaim_reent>:
 8007d80:	4b2c      	ldr	r3, [pc, #176]	; (8007e34 <_reclaim_reent+0xb4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4283      	cmp	r3, r0
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	4604      	mov	r4, r0
 8007d8a:	d051      	beq.n	8007e30 <_reclaim_reent+0xb0>
 8007d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d8e:	b143      	cbz	r3, 8007da2 <_reclaim_reent+0x22>
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d14a      	bne.n	8007e2c <_reclaim_reent+0xac>
 8007d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d98:	6819      	ldr	r1, [r3, #0]
 8007d9a:	b111      	cbz	r1, 8007da2 <_reclaim_reent+0x22>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 f887 	bl	8007eb0 <_free_r>
 8007da2:	6961      	ldr	r1, [r4, #20]
 8007da4:	b111      	cbz	r1, 8007dac <_reclaim_reent+0x2c>
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 f882 	bl	8007eb0 <_free_r>
 8007dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007dae:	b111      	cbz	r1, 8007db6 <_reclaim_reent+0x36>
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 f87d 	bl	8007eb0 <_free_r>
 8007db6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007db8:	b111      	cbz	r1, 8007dc0 <_reclaim_reent+0x40>
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 f878 	bl	8007eb0 <_free_r>
 8007dc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007dc2:	b111      	cbz	r1, 8007dca <_reclaim_reent+0x4a>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 f873 	bl	8007eb0 <_free_r>
 8007dca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007dcc:	b111      	cbz	r1, 8007dd4 <_reclaim_reent+0x54>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 f86e 	bl	8007eb0 <_free_r>
 8007dd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007dd6:	b111      	cbz	r1, 8007dde <_reclaim_reent+0x5e>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 f869 	bl	8007eb0 <_free_r>
 8007dde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007de0:	b111      	cbz	r1, 8007de8 <_reclaim_reent+0x68>
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 f864 	bl	8007eb0 <_free_r>
 8007de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dea:	b111      	cbz	r1, 8007df2 <_reclaim_reent+0x72>
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 f85f 	bl	8007eb0 <_free_r>
 8007df2:	69a3      	ldr	r3, [r4, #24]
 8007df4:	b1e3      	cbz	r3, 8007e30 <_reclaim_reent+0xb0>
 8007df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4798      	blx	r3
 8007dfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dfe:	b1b9      	cbz	r1, 8007e30 <_reclaim_reent+0xb0>
 8007e00:	4620      	mov	r0, r4
 8007e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e06:	f7ff bfad 	b.w	8007d64 <cleanup_glue>
 8007e0a:	5949      	ldr	r1, [r1, r5]
 8007e0c:	b941      	cbnz	r1, 8007e20 <_reclaim_reent+0xa0>
 8007e0e:	3504      	adds	r5, #4
 8007e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e12:	2d80      	cmp	r5, #128	; 0x80
 8007e14:	68d9      	ldr	r1, [r3, #12]
 8007e16:	d1f8      	bne.n	8007e0a <_reclaim_reent+0x8a>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 f849 	bl	8007eb0 <_free_r>
 8007e1e:	e7ba      	b.n	8007d96 <_reclaim_reent+0x16>
 8007e20:	680e      	ldr	r6, [r1, #0]
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f844 	bl	8007eb0 <_free_r>
 8007e28:	4631      	mov	r1, r6
 8007e2a:	e7ef      	b.n	8007e0c <_reclaim_reent+0x8c>
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	e7ef      	b.n	8007e10 <_reclaim_reent+0x90>
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	bf00      	nop
 8007e34:	20000010 	.word	0x20000010

08007e38 <_sbrk_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d06      	ldr	r5, [pc, #24]	; (8007e54 <_sbrk_r+0x1c>)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	f7f9 f9d0 	bl	80011e8 <_sbrk>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_sbrk_r+0x1a>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_sbrk_r+0x1a>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20001184 	.word	0x20001184

08007e58 <siprintf>:
 8007e58:	b40e      	push	{r1, r2, r3}
 8007e5a:	b500      	push	{lr}
 8007e5c:	b09c      	sub	sp, #112	; 0x70
 8007e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e60:	9002      	str	r0, [sp, #8]
 8007e62:	9006      	str	r0, [sp, #24]
 8007e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e68:	4809      	ldr	r0, [pc, #36]	; (8007e90 <siprintf+0x38>)
 8007e6a:	9107      	str	r1, [sp, #28]
 8007e6c:	9104      	str	r1, [sp, #16]
 8007e6e:	4909      	ldr	r1, [pc, #36]	; (8007e94 <siprintf+0x3c>)
 8007e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e74:	9105      	str	r1, [sp, #20]
 8007e76:	6800      	ldr	r0, [r0, #0]
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	a902      	add	r1, sp, #8
 8007e7c:	f000 f8c4 	bl	8008008 <_svfiprintf_r>
 8007e80:	9b02      	ldr	r3, [sp, #8]
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	b01c      	add	sp, #112	; 0x70
 8007e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e8c:	b003      	add	sp, #12
 8007e8e:	4770      	bx	lr
 8007e90:	20000010 	.word	0x20000010
 8007e94:	ffff0208 	.word	0xffff0208

08007e98 <__malloc_lock>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__malloc_lock+0x8>)
 8007e9a:	f7ff bef1 	b.w	8007c80 <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	2000117c 	.word	0x2000117c

08007ea4 <__malloc_unlock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__malloc_unlock+0x8>)
 8007ea6:	f7ff beec 	b.w	8007c82 <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	2000117c 	.word	0x2000117c

08007eb0 <_free_r>:
 8007eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	d048      	beq.n	8007f48 <_free_r+0x98>
 8007eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eba:	9001      	str	r0, [sp, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8007ec2:	bfb8      	it	lt
 8007ec4:	18e4      	addlt	r4, r4, r3
 8007ec6:	f7ff ffe7 	bl	8007e98 <__malloc_lock>
 8007eca:	4a20      	ldr	r2, [pc, #128]	; (8007f4c <_free_r+0x9c>)
 8007ecc:	9801      	ldr	r0, [sp, #4]
 8007ece:	6813      	ldr	r3, [r2, #0]
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	b933      	cbnz	r3, 8007ee2 <_free_r+0x32>
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	6014      	str	r4, [r2, #0]
 8007ed8:	b003      	add	sp, #12
 8007eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ede:	f7ff bfe1 	b.w	8007ea4 <__malloc_unlock>
 8007ee2:	42a3      	cmp	r3, r4
 8007ee4:	d90b      	bls.n	8007efe <_free_r+0x4e>
 8007ee6:	6821      	ldr	r1, [r4, #0]
 8007ee8:	1862      	adds	r2, r4, r1
 8007eea:	4293      	cmp	r3, r2
 8007eec:	bf04      	itt	eq
 8007eee:	681a      	ldreq	r2, [r3, #0]
 8007ef0:	685b      	ldreq	r3, [r3, #4]
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	bf04      	itt	eq
 8007ef6:	1852      	addeq	r2, r2, r1
 8007ef8:	6022      	streq	r2, [r4, #0]
 8007efa:	602c      	str	r4, [r5, #0]
 8007efc:	e7ec      	b.n	8007ed8 <_free_r+0x28>
 8007efe:	461a      	mov	r2, r3
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	b10b      	cbz	r3, 8007f08 <_free_r+0x58>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d9fa      	bls.n	8007efe <_free_r+0x4e>
 8007f08:	6811      	ldr	r1, [r2, #0]
 8007f0a:	1855      	adds	r5, r2, r1
 8007f0c:	42a5      	cmp	r5, r4
 8007f0e:	d10b      	bne.n	8007f28 <_free_r+0x78>
 8007f10:	6824      	ldr	r4, [r4, #0]
 8007f12:	4421      	add	r1, r4
 8007f14:	1854      	adds	r4, r2, r1
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	6011      	str	r1, [r2, #0]
 8007f1a:	d1dd      	bne.n	8007ed8 <_free_r+0x28>
 8007f1c:	681c      	ldr	r4, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	6053      	str	r3, [r2, #4]
 8007f22:	4421      	add	r1, r4
 8007f24:	6011      	str	r1, [r2, #0]
 8007f26:	e7d7      	b.n	8007ed8 <_free_r+0x28>
 8007f28:	d902      	bls.n	8007f30 <_free_r+0x80>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	e7d3      	b.n	8007ed8 <_free_r+0x28>
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	1961      	adds	r1, r4, r5
 8007f34:	428b      	cmp	r3, r1
 8007f36:	bf04      	itt	eq
 8007f38:	6819      	ldreq	r1, [r3, #0]
 8007f3a:	685b      	ldreq	r3, [r3, #4]
 8007f3c:	6063      	str	r3, [r4, #4]
 8007f3e:	bf04      	itt	eq
 8007f40:	1949      	addeq	r1, r1, r5
 8007f42:	6021      	streq	r1, [r4, #0]
 8007f44:	6054      	str	r4, [r2, #4]
 8007f46:	e7c7      	b.n	8007ed8 <_free_r+0x28>
 8007f48:	b003      	add	sp, #12
 8007f4a:	bd30      	pop	{r4, r5, pc}
 8007f4c:	2000105c 	.word	0x2000105c

08007f50 <__ssputs_r>:
 8007f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	688e      	ldr	r6, [r1, #8]
 8007f56:	429e      	cmp	r6, r3
 8007f58:	4682      	mov	sl, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	4690      	mov	r8, r2
 8007f5e:	461f      	mov	r7, r3
 8007f60:	d838      	bhi.n	8007fd4 <__ssputs_r+0x84>
 8007f62:	898a      	ldrh	r2, [r1, #12]
 8007f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f68:	d032      	beq.n	8007fd0 <__ssputs_r+0x80>
 8007f6a:	6825      	ldr	r5, [r4, #0]
 8007f6c:	6909      	ldr	r1, [r1, #16]
 8007f6e:	eba5 0901 	sub.w	r9, r5, r1
 8007f72:	6965      	ldr	r5, [r4, #20]
 8007f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	444b      	add	r3, r9
 8007f80:	106d      	asrs	r5, r5, #1
 8007f82:	429d      	cmp	r5, r3
 8007f84:	bf38      	it	cc
 8007f86:	461d      	movcc	r5, r3
 8007f88:	0553      	lsls	r3, r2, #21
 8007f8a:	d531      	bpl.n	8007ff0 <__ssputs_r+0xa0>
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7ff fe8f 	bl	8007cb0 <_malloc_r>
 8007f92:	4606      	mov	r6, r0
 8007f94:	b950      	cbnz	r0, 8007fac <__ssputs_r+0x5c>
 8007f96:	230c      	movs	r3, #12
 8007f98:	f8ca 3000 	str.w	r3, [sl]
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fac:	6921      	ldr	r1, [r4, #16]
 8007fae:	464a      	mov	r2, r9
 8007fb0:	f7ff fe68 	bl	8007c84 <memcpy>
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	6126      	str	r6, [r4, #16]
 8007fc2:	6165      	str	r5, [r4, #20]
 8007fc4:	444e      	add	r6, r9
 8007fc6:	eba5 0509 	sub.w	r5, r5, r9
 8007fca:	6026      	str	r6, [r4, #0]
 8007fcc:	60a5      	str	r5, [r4, #8]
 8007fce:	463e      	mov	r6, r7
 8007fd0:	42be      	cmp	r6, r7
 8007fd2:	d900      	bls.n	8007fd6 <__ssputs_r+0x86>
 8007fd4:	463e      	mov	r6, r7
 8007fd6:	4632      	mov	r2, r6
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	4641      	mov	r1, r8
 8007fdc:	f000 faa8 	bl	8008530 <memmove>
 8007fe0:	68a3      	ldr	r3, [r4, #8]
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	1b9b      	subs	r3, r3, r6
 8007fe6:	4432      	add	r2, r6
 8007fe8:	60a3      	str	r3, [r4, #8]
 8007fea:	6022      	str	r2, [r4, #0]
 8007fec:	2000      	movs	r0, #0
 8007fee:	e7db      	b.n	8007fa8 <__ssputs_r+0x58>
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	f000 fab7 	bl	8008564 <_realloc_r>
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d1e1      	bne.n	8007fc0 <__ssputs_r+0x70>
 8007ffc:	6921      	ldr	r1, [r4, #16]
 8007ffe:	4650      	mov	r0, sl
 8008000:	f7ff ff56 	bl	8007eb0 <_free_r>
 8008004:	e7c7      	b.n	8007f96 <__ssputs_r+0x46>
	...

08008008 <_svfiprintf_r>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	4698      	mov	r8, r3
 800800e:	898b      	ldrh	r3, [r1, #12]
 8008010:	061b      	lsls	r3, r3, #24
 8008012:	b09d      	sub	sp, #116	; 0x74
 8008014:	4607      	mov	r7, r0
 8008016:	460d      	mov	r5, r1
 8008018:	4614      	mov	r4, r2
 800801a:	d50e      	bpl.n	800803a <_svfiprintf_r+0x32>
 800801c:	690b      	ldr	r3, [r1, #16]
 800801e:	b963      	cbnz	r3, 800803a <_svfiprintf_r+0x32>
 8008020:	2140      	movs	r1, #64	; 0x40
 8008022:	f7ff fe45 	bl	8007cb0 <_malloc_r>
 8008026:	6028      	str	r0, [r5, #0]
 8008028:	6128      	str	r0, [r5, #16]
 800802a:	b920      	cbnz	r0, 8008036 <_svfiprintf_r+0x2e>
 800802c:	230c      	movs	r3, #12
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008034:	e0d1      	b.n	80081da <_svfiprintf_r+0x1d2>
 8008036:	2340      	movs	r3, #64	; 0x40
 8008038:	616b      	str	r3, [r5, #20]
 800803a:	2300      	movs	r3, #0
 800803c:	9309      	str	r3, [sp, #36]	; 0x24
 800803e:	2320      	movs	r3, #32
 8008040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008044:	f8cd 800c 	str.w	r8, [sp, #12]
 8008048:	2330      	movs	r3, #48	; 0x30
 800804a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081f4 <_svfiprintf_r+0x1ec>
 800804e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008052:	f04f 0901 	mov.w	r9, #1
 8008056:	4623      	mov	r3, r4
 8008058:	469a      	mov	sl, r3
 800805a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800805e:	b10a      	cbz	r2, 8008064 <_svfiprintf_r+0x5c>
 8008060:	2a25      	cmp	r2, #37	; 0x25
 8008062:	d1f9      	bne.n	8008058 <_svfiprintf_r+0x50>
 8008064:	ebba 0b04 	subs.w	fp, sl, r4
 8008068:	d00b      	beq.n	8008082 <_svfiprintf_r+0x7a>
 800806a:	465b      	mov	r3, fp
 800806c:	4622      	mov	r2, r4
 800806e:	4629      	mov	r1, r5
 8008070:	4638      	mov	r0, r7
 8008072:	f7ff ff6d 	bl	8007f50 <__ssputs_r>
 8008076:	3001      	adds	r0, #1
 8008078:	f000 80aa 	beq.w	80081d0 <_svfiprintf_r+0x1c8>
 800807c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800807e:	445a      	add	r2, fp
 8008080:	9209      	str	r2, [sp, #36]	; 0x24
 8008082:	f89a 3000 	ldrb.w	r3, [sl]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 80a2 	beq.w	80081d0 <_svfiprintf_r+0x1c8>
 800808c:	2300      	movs	r3, #0
 800808e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008096:	f10a 0a01 	add.w	sl, sl, #1
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	9307      	str	r3, [sp, #28]
 800809e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080a2:	931a      	str	r3, [sp, #104]	; 0x68
 80080a4:	4654      	mov	r4, sl
 80080a6:	2205      	movs	r2, #5
 80080a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ac:	4851      	ldr	r0, [pc, #324]	; (80081f4 <_svfiprintf_r+0x1ec>)
 80080ae:	f7f8 f88f 	bl	80001d0 <memchr>
 80080b2:	9a04      	ldr	r2, [sp, #16]
 80080b4:	b9d8      	cbnz	r0, 80080ee <_svfiprintf_r+0xe6>
 80080b6:	06d0      	lsls	r0, r2, #27
 80080b8:	bf44      	itt	mi
 80080ba:	2320      	movmi	r3, #32
 80080bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c0:	0711      	lsls	r1, r2, #28
 80080c2:	bf44      	itt	mi
 80080c4:	232b      	movmi	r3, #43	; 0x2b
 80080c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ca:	f89a 3000 	ldrb.w	r3, [sl]
 80080ce:	2b2a      	cmp	r3, #42	; 0x2a
 80080d0:	d015      	beq.n	80080fe <_svfiprintf_r+0xf6>
 80080d2:	9a07      	ldr	r2, [sp, #28]
 80080d4:	4654      	mov	r4, sl
 80080d6:	2000      	movs	r0, #0
 80080d8:	f04f 0c0a 	mov.w	ip, #10
 80080dc:	4621      	mov	r1, r4
 80080de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e2:	3b30      	subs	r3, #48	; 0x30
 80080e4:	2b09      	cmp	r3, #9
 80080e6:	d94e      	bls.n	8008186 <_svfiprintf_r+0x17e>
 80080e8:	b1b0      	cbz	r0, 8008118 <_svfiprintf_r+0x110>
 80080ea:	9207      	str	r2, [sp, #28]
 80080ec:	e014      	b.n	8008118 <_svfiprintf_r+0x110>
 80080ee:	eba0 0308 	sub.w	r3, r0, r8
 80080f2:	fa09 f303 	lsl.w	r3, r9, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	46a2      	mov	sl, r4
 80080fc:	e7d2      	b.n	80080a4 <_svfiprintf_r+0x9c>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	1d19      	adds	r1, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	9103      	str	r1, [sp, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	bfbb      	ittet	lt
 800810a:	425b      	neglt	r3, r3
 800810c:	f042 0202 	orrlt.w	r2, r2, #2
 8008110:	9307      	strge	r3, [sp, #28]
 8008112:	9307      	strlt	r3, [sp, #28]
 8008114:	bfb8      	it	lt
 8008116:	9204      	strlt	r2, [sp, #16]
 8008118:	7823      	ldrb	r3, [r4, #0]
 800811a:	2b2e      	cmp	r3, #46	; 0x2e
 800811c:	d10c      	bne.n	8008138 <_svfiprintf_r+0x130>
 800811e:	7863      	ldrb	r3, [r4, #1]
 8008120:	2b2a      	cmp	r3, #42	; 0x2a
 8008122:	d135      	bne.n	8008190 <_svfiprintf_r+0x188>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	1d1a      	adds	r2, r3, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	9203      	str	r2, [sp, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	bfb8      	it	lt
 8008130:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008134:	3402      	adds	r4, #2
 8008136:	9305      	str	r3, [sp, #20]
 8008138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008204 <_svfiprintf_r+0x1fc>
 800813c:	7821      	ldrb	r1, [r4, #0]
 800813e:	2203      	movs	r2, #3
 8008140:	4650      	mov	r0, sl
 8008142:	f7f8 f845 	bl	80001d0 <memchr>
 8008146:	b140      	cbz	r0, 800815a <_svfiprintf_r+0x152>
 8008148:	2340      	movs	r3, #64	; 0x40
 800814a:	eba0 000a 	sub.w	r0, r0, sl
 800814e:	fa03 f000 	lsl.w	r0, r3, r0
 8008152:	9b04      	ldr	r3, [sp, #16]
 8008154:	4303      	orrs	r3, r0
 8008156:	3401      	adds	r4, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815e:	4826      	ldr	r0, [pc, #152]	; (80081f8 <_svfiprintf_r+0x1f0>)
 8008160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008164:	2206      	movs	r2, #6
 8008166:	f7f8 f833 	bl	80001d0 <memchr>
 800816a:	2800      	cmp	r0, #0
 800816c:	d038      	beq.n	80081e0 <_svfiprintf_r+0x1d8>
 800816e:	4b23      	ldr	r3, [pc, #140]	; (80081fc <_svfiprintf_r+0x1f4>)
 8008170:	bb1b      	cbnz	r3, 80081ba <_svfiprintf_r+0x1b2>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	3307      	adds	r3, #7
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	3308      	adds	r3, #8
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008180:	4433      	add	r3, r6
 8008182:	9309      	str	r3, [sp, #36]	; 0x24
 8008184:	e767      	b.n	8008056 <_svfiprintf_r+0x4e>
 8008186:	fb0c 3202 	mla	r2, ip, r2, r3
 800818a:	460c      	mov	r4, r1
 800818c:	2001      	movs	r0, #1
 800818e:	e7a5      	b.n	80080dc <_svfiprintf_r+0xd4>
 8008190:	2300      	movs	r3, #0
 8008192:	3401      	adds	r4, #1
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	4619      	mov	r1, r3
 8008198:	f04f 0c0a 	mov.w	ip, #10
 800819c:	4620      	mov	r0, r4
 800819e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a2:	3a30      	subs	r2, #48	; 0x30
 80081a4:	2a09      	cmp	r2, #9
 80081a6:	d903      	bls.n	80081b0 <_svfiprintf_r+0x1a8>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0c5      	beq.n	8008138 <_svfiprintf_r+0x130>
 80081ac:	9105      	str	r1, [sp, #20]
 80081ae:	e7c3      	b.n	8008138 <_svfiprintf_r+0x130>
 80081b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b4:	4604      	mov	r4, r0
 80081b6:	2301      	movs	r3, #1
 80081b8:	e7f0      	b.n	800819c <_svfiprintf_r+0x194>
 80081ba:	ab03      	add	r3, sp, #12
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	462a      	mov	r2, r5
 80081c0:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <_svfiprintf_r+0x1f8>)
 80081c2:	a904      	add	r1, sp, #16
 80081c4:	4638      	mov	r0, r7
 80081c6:	f3af 8000 	nop.w
 80081ca:	1c42      	adds	r2, r0, #1
 80081cc:	4606      	mov	r6, r0
 80081ce:	d1d6      	bne.n	800817e <_svfiprintf_r+0x176>
 80081d0:	89ab      	ldrh	r3, [r5, #12]
 80081d2:	065b      	lsls	r3, r3, #25
 80081d4:	f53f af2c 	bmi.w	8008030 <_svfiprintf_r+0x28>
 80081d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081da:	b01d      	add	sp, #116	; 0x74
 80081dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e0:	ab03      	add	r3, sp, #12
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	462a      	mov	r2, r5
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <_svfiprintf_r+0x1f8>)
 80081e8:	a904      	add	r1, sp, #16
 80081ea:	4638      	mov	r0, r7
 80081ec:	f000 f87a 	bl	80082e4 <_printf_i>
 80081f0:	e7eb      	b.n	80081ca <_svfiprintf_r+0x1c2>
 80081f2:	bf00      	nop
 80081f4:	080086bc 	.word	0x080086bc
 80081f8:	080086c6 	.word	0x080086c6
 80081fc:	00000000 	.word	0x00000000
 8008200:	08007f51 	.word	0x08007f51
 8008204:	080086c2 	.word	0x080086c2

08008208 <_printf_common>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	4616      	mov	r6, r2
 800820e:	4699      	mov	r9, r3
 8008210:	688a      	ldr	r2, [r1, #8]
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008218:	4293      	cmp	r3, r2
 800821a:	bfb8      	it	lt
 800821c:	4613      	movlt	r3, r2
 800821e:	6033      	str	r3, [r6, #0]
 8008220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008224:	4607      	mov	r7, r0
 8008226:	460c      	mov	r4, r1
 8008228:	b10a      	cbz	r2, 800822e <_printf_common+0x26>
 800822a:	3301      	adds	r3, #1
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	0699      	lsls	r1, r3, #26
 8008232:	bf42      	ittt	mi
 8008234:	6833      	ldrmi	r3, [r6, #0]
 8008236:	3302      	addmi	r3, #2
 8008238:	6033      	strmi	r3, [r6, #0]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d106      	bne.n	8008250 <_printf_common+0x48>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	6832      	ldr	r2, [r6, #0]
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	42ab      	cmp	r3, r5
 800824e:	dc26      	bgt.n	800829e <_printf_common+0x96>
 8008250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008254:	1e13      	subs	r3, r2, #0
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	bf18      	it	ne
 800825a:	2301      	movne	r3, #1
 800825c:	0692      	lsls	r2, r2, #26
 800825e:	d42b      	bmi.n	80082b8 <_printf_common+0xb0>
 8008260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008264:	4649      	mov	r1, r9
 8008266:	4638      	mov	r0, r7
 8008268:	47c0      	blx	r8
 800826a:	3001      	adds	r0, #1
 800826c:	d01e      	beq.n	80082ac <_printf_common+0xa4>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	68e5      	ldr	r5, [r4, #12]
 8008272:	6832      	ldr	r2, [r6, #0]
 8008274:	f003 0306 	and.w	r3, r3, #6
 8008278:	2b04      	cmp	r3, #4
 800827a:	bf08      	it	eq
 800827c:	1aad      	subeq	r5, r5, r2
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	6922      	ldr	r2, [r4, #16]
 8008282:	bf0c      	ite	eq
 8008284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008288:	2500      	movne	r5, #0
 800828a:	4293      	cmp	r3, r2
 800828c:	bfc4      	itt	gt
 800828e:	1a9b      	subgt	r3, r3, r2
 8008290:	18ed      	addgt	r5, r5, r3
 8008292:	2600      	movs	r6, #0
 8008294:	341a      	adds	r4, #26
 8008296:	42b5      	cmp	r5, r6
 8008298:	d11a      	bne.n	80082d0 <_printf_common+0xc8>
 800829a:	2000      	movs	r0, #0
 800829c:	e008      	b.n	80082b0 <_printf_common+0xa8>
 800829e:	2301      	movs	r3, #1
 80082a0:	4652      	mov	r2, sl
 80082a2:	4649      	mov	r1, r9
 80082a4:	4638      	mov	r0, r7
 80082a6:	47c0      	blx	r8
 80082a8:	3001      	adds	r0, #1
 80082aa:	d103      	bne.n	80082b4 <_printf_common+0xac>
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	3501      	adds	r5, #1
 80082b6:	e7c6      	b.n	8008246 <_printf_common+0x3e>
 80082b8:	18e1      	adds	r1, r4, r3
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	2030      	movs	r0, #48	; 0x30
 80082be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c2:	4422      	add	r2, r4
 80082c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082cc:	3302      	adds	r3, #2
 80082ce:	e7c7      	b.n	8008260 <_printf_common+0x58>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4622      	mov	r2, r4
 80082d4:	4649      	mov	r1, r9
 80082d6:	4638      	mov	r0, r7
 80082d8:	47c0      	blx	r8
 80082da:	3001      	adds	r0, #1
 80082dc:	d0e6      	beq.n	80082ac <_printf_common+0xa4>
 80082de:	3601      	adds	r6, #1
 80082e0:	e7d9      	b.n	8008296 <_printf_common+0x8e>
	...

080082e4 <_printf_i>:
 80082e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	460c      	mov	r4, r1
 80082ea:	4691      	mov	r9, r2
 80082ec:	7e27      	ldrb	r7, [r4, #24]
 80082ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082f0:	2f78      	cmp	r7, #120	; 0x78
 80082f2:	4680      	mov	r8, r0
 80082f4:	469a      	mov	sl, r3
 80082f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082fa:	d807      	bhi.n	800830c <_printf_i+0x28>
 80082fc:	2f62      	cmp	r7, #98	; 0x62
 80082fe:	d80a      	bhi.n	8008316 <_printf_i+0x32>
 8008300:	2f00      	cmp	r7, #0
 8008302:	f000 80d8 	beq.w	80084b6 <_printf_i+0x1d2>
 8008306:	2f58      	cmp	r7, #88	; 0x58
 8008308:	f000 80a3 	beq.w	8008452 <_printf_i+0x16e>
 800830c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008314:	e03a      	b.n	800838c <_printf_i+0xa8>
 8008316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800831a:	2b15      	cmp	r3, #21
 800831c:	d8f6      	bhi.n	800830c <_printf_i+0x28>
 800831e:	a001      	add	r0, pc, #4	; (adr r0, 8008324 <_printf_i+0x40>)
 8008320:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008391 	.word	0x08008391
 800832c:	0800830d 	.word	0x0800830d
 8008330:	0800830d 	.word	0x0800830d
 8008334:	0800830d 	.word	0x0800830d
 8008338:	0800830d 	.word	0x0800830d
 800833c:	08008391 	.word	0x08008391
 8008340:	0800830d 	.word	0x0800830d
 8008344:	0800830d 	.word	0x0800830d
 8008348:	0800830d 	.word	0x0800830d
 800834c:	0800830d 	.word	0x0800830d
 8008350:	0800849d 	.word	0x0800849d
 8008354:	080083c1 	.word	0x080083c1
 8008358:	0800847f 	.word	0x0800847f
 800835c:	0800830d 	.word	0x0800830d
 8008360:	0800830d 	.word	0x0800830d
 8008364:	080084bf 	.word	0x080084bf
 8008368:	0800830d 	.word	0x0800830d
 800836c:	080083c1 	.word	0x080083c1
 8008370:	0800830d 	.word	0x0800830d
 8008374:	0800830d 	.word	0x0800830d
 8008378:	08008487 	.word	0x08008487
 800837c:	680b      	ldr	r3, [r1, #0]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	600a      	str	r2, [r1, #0]
 8008384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e0a3      	b.n	80084d8 <_printf_i+0x1f4>
 8008390:	6825      	ldr	r5, [r4, #0]
 8008392:	6808      	ldr	r0, [r1, #0]
 8008394:	062e      	lsls	r6, r5, #24
 8008396:	f100 0304 	add.w	r3, r0, #4
 800839a:	d50a      	bpl.n	80083b2 <_printf_i+0xce>
 800839c:	6805      	ldr	r5, [r0, #0]
 800839e:	600b      	str	r3, [r1, #0]
 80083a0:	2d00      	cmp	r5, #0
 80083a2:	da03      	bge.n	80083ac <_printf_i+0xc8>
 80083a4:	232d      	movs	r3, #45	; 0x2d
 80083a6:	426d      	negs	r5, r5
 80083a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ac:	485e      	ldr	r0, [pc, #376]	; (8008528 <_printf_i+0x244>)
 80083ae:	230a      	movs	r3, #10
 80083b0:	e019      	b.n	80083e6 <_printf_i+0x102>
 80083b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083b6:	6805      	ldr	r5, [r0, #0]
 80083b8:	600b      	str	r3, [r1, #0]
 80083ba:	bf18      	it	ne
 80083bc:	b22d      	sxthne	r5, r5
 80083be:	e7ef      	b.n	80083a0 <_printf_i+0xbc>
 80083c0:	680b      	ldr	r3, [r1, #0]
 80083c2:	6825      	ldr	r5, [r4, #0]
 80083c4:	1d18      	adds	r0, r3, #4
 80083c6:	6008      	str	r0, [r1, #0]
 80083c8:	0628      	lsls	r0, r5, #24
 80083ca:	d501      	bpl.n	80083d0 <_printf_i+0xec>
 80083cc:	681d      	ldr	r5, [r3, #0]
 80083ce:	e002      	b.n	80083d6 <_printf_i+0xf2>
 80083d0:	0669      	lsls	r1, r5, #25
 80083d2:	d5fb      	bpl.n	80083cc <_printf_i+0xe8>
 80083d4:	881d      	ldrh	r5, [r3, #0]
 80083d6:	4854      	ldr	r0, [pc, #336]	; (8008528 <_printf_i+0x244>)
 80083d8:	2f6f      	cmp	r7, #111	; 0x6f
 80083da:	bf0c      	ite	eq
 80083dc:	2308      	moveq	r3, #8
 80083de:	230a      	movne	r3, #10
 80083e0:	2100      	movs	r1, #0
 80083e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083e6:	6866      	ldr	r6, [r4, #4]
 80083e8:	60a6      	str	r6, [r4, #8]
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	bfa2      	ittt	ge
 80083ee:	6821      	ldrge	r1, [r4, #0]
 80083f0:	f021 0104 	bicge.w	r1, r1, #4
 80083f4:	6021      	strge	r1, [r4, #0]
 80083f6:	b90d      	cbnz	r5, 80083fc <_printf_i+0x118>
 80083f8:	2e00      	cmp	r6, #0
 80083fa:	d04d      	beq.n	8008498 <_printf_i+0x1b4>
 80083fc:	4616      	mov	r6, r2
 80083fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008402:	fb03 5711 	mls	r7, r3, r1, r5
 8008406:	5dc7      	ldrb	r7, [r0, r7]
 8008408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800840c:	462f      	mov	r7, r5
 800840e:	42bb      	cmp	r3, r7
 8008410:	460d      	mov	r5, r1
 8008412:	d9f4      	bls.n	80083fe <_printf_i+0x11a>
 8008414:	2b08      	cmp	r3, #8
 8008416:	d10b      	bne.n	8008430 <_printf_i+0x14c>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	07df      	lsls	r7, r3, #31
 800841c:	d508      	bpl.n	8008430 <_printf_i+0x14c>
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	6861      	ldr	r1, [r4, #4]
 8008422:	4299      	cmp	r1, r3
 8008424:	bfde      	ittt	le
 8008426:	2330      	movle	r3, #48	; 0x30
 8008428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800842c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008430:	1b92      	subs	r2, r2, r6
 8008432:	6122      	str	r2, [r4, #16]
 8008434:	f8cd a000 	str.w	sl, [sp]
 8008438:	464b      	mov	r3, r9
 800843a:	aa03      	add	r2, sp, #12
 800843c:	4621      	mov	r1, r4
 800843e:	4640      	mov	r0, r8
 8008440:	f7ff fee2 	bl	8008208 <_printf_common>
 8008444:	3001      	adds	r0, #1
 8008446:	d14c      	bne.n	80084e2 <_printf_i+0x1fe>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800844c:	b004      	add	sp, #16
 800844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008452:	4835      	ldr	r0, [pc, #212]	; (8008528 <_printf_i+0x244>)
 8008454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	680e      	ldr	r6, [r1, #0]
 800845c:	061f      	lsls	r7, r3, #24
 800845e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008462:	600e      	str	r6, [r1, #0]
 8008464:	d514      	bpl.n	8008490 <_printf_i+0x1ac>
 8008466:	07d9      	lsls	r1, r3, #31
 8008468:	bf44      	itt	mi
 800846a:	f043 0320 	orrmi.w	r3, r3, #32
 800846e:	6023      	strmi	r3, [r4, #0]
 8008470:	b91d      	cbnz	r5, 800847a <_printf_i+0x196>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	f023 0320 	bic.w	r3, r3, #32
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	2310      	movs	r3, #16
 800847c:	e7b0      	b.n	80083e0 <_printf_i+0xfc>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	f043 0320 	orr.w	r3, r3, #32
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	2378      	movs	r3, #120	; 0x78
 8008488:	4828      	ldr	r0, [pc, #160]	; (800852c <_printf_i+0x248>)
 800848a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800848e:	e7e3      	b.n	8008458 <_printf_i+0x174>
 8008490:	065e      	lsls	r6, r3, #25
 8008492:	bf48      	it	mi
 8008494:	b2ad      	uxthmi	r5, r5
 8008496:	e7e6      	b.n	8008466 <_printf_i+0x182>
 8008498:	4616      	mov	r6, r2
 800849a:	e7bb      	b.n	8008414 <_printf_i+0x130>
 800849c:	680b      	ldr	r3, [r1, #0]
 800849e:	6826      	ldr	r6, [r4, #0]
 80084a0:	6960      	ldr	r0, [r4, #20]
 80084a2:	1d1d      	adds	r5, r3, #4
 80084a4:	600d      	str	r5, [r1, #0]
 80084a6:	0635      	lsls	r5, r6, #24
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	d501      	bpl.n	80084b0 <_printf_i+0x1cc>
 80084ac:	6018      	str	r0, [r3, #0]
 80084ae:	e002      	b.n	80084b6 <_printf_i+0x1d2>
 80084b0:	0671      	lsls	r1, r6, #25
 80084b2:	d5fb      	bpl.n	80084ac <_printf_i+0x1c8>
 80084b4:	8018      	strh	r0, [r3, #0]
 80084b6:	2300      	movs	r3, #0
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	4616      	mov	r6, r2
 80084bc:	e7ba      	b.n	8008434 <_printf_i+0x150>
 80084be:	680b      	ldr	r3, [r1, #0]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	600a      	str	r2, [r1, #0]
 80084c4:	681e      	ldr	r6, [r3, #0]
 80084c6:	6862      	ldr	r2, [r4, #4]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7f7 fe80 	bl	80001d0 <memchr>
 80084d0:	b108      	cbz	r0, 80084d6 <_printf_i+0x1f2>
 80084d2:	1b80      	subs	r0, r0, r6
 80084d4:	6060      	str	r0, [r4, #4]
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	2300      	movs	r3, #0
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084e0:	e7a8      	b.n	8008434 <_printf_i+0x150>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	4632      	mov	r2, r6
 80084e6:	4649      	mov	r1, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	47d0      	blx	sl
 80084ec:	3001      	adds	r0, #1
 80084ee:	d0ab      	beq.n	8008448 <_printf_i+0x164>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	079b      	lsls	r3, r3, #30
 80084f4:	d413      	bmi.n	800851e <_printf_i+0x23a>
 80084f6:	68e0      	ldr	r0, [r4, #12]
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	4298      	cmp	r0, r3
 80084fc:	bfb8      	it	lt
 80084fe:	4618      	movlt	r0, r3
 8008500:	e7a4      	b.n	800844c <_printf_i+0x168>
 8008502:	2301      	movs	r3, #1
 8008504:	4632      	mov	r2, r6
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	47d0      	blx	sl
 800850c:	3001      	adds	r0, #1
 800850e:	d09b      	beq.n	8008448 <_printf_i+0x164>
 8008510:	3501      	adds	r5, #1
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	9903      	ldr	r1, [sp, #12]
 8008516:	1a5b      	subs	r3, r3, r1
 8008518:	42ab      	cmp	r3, r5
 800851a:	dcf2      	bgt.n	8008502 <_printf_i+0x21e>
 800851c:	e7eb      	b.n	80084f6 <_printf_i+0x212>
 800851e:	2500      	movs	r5, #0
 8008520:	f104 0619 	add.w	r6, r4, #25
 8008524:	e7f5      	b.n	8008512 <_printf_i+0x22e>
 8008526:	bf00      	nop
 8008528:	080086cd 	.word	0x080086cd
 800852c:	080086de 	.word	0x080086de

08008530 <memmove>:
 8008530:	4288      	cmp	r0, r1
 8008532:	b510      	push	{r4, lr}
 8008534:	eb01 0402 	add.w	r4, r1, r2
 8008538:	d902      	bls.n	8008540 <memmove+0x10>
 800853a:	4284      	cmp	r4, r0
 800853c:	4623      	mov	r3, r4
 800853e:	d807      	bhi.n	8008550 <memmove+0x20>
 8008540:	1e43      	subs	r3, r0, #1
 8008542:	42a1      	cmp	r1, r4
 8008544:	d008      	beq.n	8008558 <memmove+0x28>
 8008546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800854a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800854e:	e7f8      	b.n	8008542 <memmove+0x12>
 8008550:	4402      	add	r2, r0
 8008552:	4601      	mov	r1, r0
 8008554:	428a      	cmp	r2, r1
 8008556:	d100      	bne.n	800855a <memmove+0x2a>
 8008558:	bd10      	pop	{r4, pc}
 800855a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800855e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008562:	e7f7      	b.n	8008554 <memmove+0x24>

08008564 <_realloc_r>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	4607      	mov	r7, r0
 8008568:	4614      	mov	r4, r2
 800856a:	460e      	mov	r6, r1
 800856c:	b921      	cbnz	r1, 8008578 <_realloc_r+0x14>
 800856e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008572:	4611      	mov	r1, r2
 8008574:	f7ff bb9c 	b.w	8007cb0 <_malloc_r>
 8008578:	b922      	cbnz	r2, 8008584 <_realloc_r+0x20>
 800857a:	f7ff fc99 	bl	8007eb0 <_free_r>
 800857e:	4625      	mov	r5, r4
 8008580:	4628      	mov	r0, r5
 8008582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008584:	f000 f814 	bl	80085b0 <_malloc_usable_size_r>
 8008588:	42a0      	cmp	r0, r4
 800858a:	d20f      	bcs.n	80085ac <_realloc_r+0x48>
 800858c:	4621      	mov	r1, r4
 800858e:	4638      	mov	r0, r7
 8008590:	f7ff fb8e 	bl	8007cb0 <_malloc_r>
 8008594:	4605      	mov	r5, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d0f2      	beq.n	8008580 <_realloc_r+0x1c>
 800859a:	4631      	mov	r1, r6
 800859c:	4622      	mov	r2, r4
 800859e:	f7ff fb71 	bl	8007c84 <memcpy>
 80085a2:	4631      	mov	r1, r6
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff fc83 	bl	8007eb0 <_free_r>
 80085aa:	e7e9      	b.n	8008580 <_realloc_r+0x1c>
 80085ac:	4635      	mov	r5, r6
 80085ae:	e7e7      	b.n	8008580 <_realloc_r+0x1c>

080085b0 <_malloc_usable_size_r>:
 80085b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b4:	1f18      	subs	r0, r3, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bfbc      	itt	lt
 80085ba:	580b      	ldrlt	r3, [r1, r0]
 80085bc:	18c0      	addlt	r0, r0, r3
 80085be:	4770      	bx	lr

080085c0 <_init>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr

080085cc <_fini>:
 80085cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ce:	bf00      	nop
 80085d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d2:	bc08      	pop	{r3}
 80085d4:	469e      	mov	lr, r3
 80085d6:	4770      	bx	lr
